/*** Generated by streamline 0.10.17 (callbacks) - DO NOT EDIT ***/ var __rt=require('streamline/lib/callbacks/runtime').runtime(__filename, false),__func=__rt.__func,__cb=__rt.__cb,__catch=__rt.__catch,__tryCatch=__rt.__tryCatch; var __ = require("underscore");















var util = require("util");
var utils = require("../../../util/utils");
var $ = utils.getLocaleString;
var constants = require("./constants");
var tagUtils = require("../tag/tagUtils");

function Traffic(cli, trafficManagerProviderClient) {
  this.trafficManagerProviderClient = trafficManagerProviderClient;
  this.output = cli.output;
  this.interaction = cli.interaction;};


__.extend(Traffic.prototype, {
  create: function create__1(resourceGroupName, name, options, _) { var self, tmProfile, profile, trafficManager, progress, __this = this; var __frame = { name: "create__1", line: 30 }; return __func(_, this, arguments, create__1, 3, __frame, function __$create__1() { self = __this;

      return self.get(resourceGroupName, name, __cb(_, __frame, 2, 25, function ___(__0, __1) { tmProfile = __1;

        if (tmProfile) {
          return _(new Error(util.format($("A Traffic Manager profile with name \"%s\" already exists in resource group \"%s\""), name, resourceGroupName))); } ;


        profile = self._parseProfile(options, true);
        trafficManager = {
          profile: profile };


        progress = self.interaction.progress(util.format($("Creating Traffic Manager profile \"%s\""), name)); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$create__1() {

              return self.trafficManagerProviderClient.profiles.createOrUpdate(resourceGroupName, name, trafficManager, __cb(_, __frame, 15, 49, function __$create__1() { _(null, null, true); }, true)); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$create__1() {

                progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$create__1() {

            return self.show(resourceGroupName, name, options, __cb(_, __frame, 19, 9, function __$create__1() { _(); }, true)); }); }); }, true)); }); },


  set: function set__2(resourceGroupName, name, options, _) { var self, tmProfile, profile, __this = this; var __frame = { name: "set__2", line: 52 }; return __func(_, this, arguments, set__2, 3, __frame, function __$set__2() { self = __this;

      return self.get(resourceGroupName, name, __cb(_, __frame, 2, 25, function ___(__0, __1) { tmProfile = __1; return (function __$set__2(__then) {

          if (tmProfile) {
            profile = self._parseProfile(options, false);
            if (options.profileStatus) { tmProfile.profile.properties.profileStatus = profile.properties.profileStatus; } ;
            if (options.trafficRoutingMethod) { tmProfile.profile.properties.trafficRoutingMethod = profile.properties.trafficRoutingMethod; } ;
            if (options.ttl) { tmProfile.profile.properties.dnsConfig.ttl = profile.properties.dnsConfig.ttl; } ;
            if (options.monitorProtocol) { tmProfile.profile.properties.monitorConfig.protocol = profile.properties.monitorConfig.protocol; } ;
            if (options.monitorPort) { tmProfile.profile.properties.monitorConfig.port = profile.properties.monitorConfig.port; } ;
            if (options.monitorPath) { tmProfile.profile.properties.monitorConfig.path = profile.properties.monitorConfig.path; } ;
            if (options.tags) { tagUtils.appendTags(tmProfile.profile, profile.tags); } ;
            if ((options.tags === false)) { tmProfile.profile.tags = { }; } ;

            return self.update(resourceGroupName, name, tmProfile, __cb(_, __frame, 15, 11, function __$set__2() {
              return self.show(resourceGroupName, name, options, __cb(_, __frame, 16, 11, __then, true)); }, true)); } else {

            return _(new Error(util.format($("A Traffic Manager profile with name \"%s\" not found in the resource group \"%s\""), name, resourceGroupName))); } ; })(_); }, true)); }); },



  list: function list__3(resourceGroupName, options, _) { var self, progress, tmProfiles, __this = this; var __frame = { name: "list__3", line: 74 }; return __func(_, this, arguments, list__3, 2, __frame, function __$list__3() { self = __this;

      progress = self.interaction.progress($("Getting Traffic Manager profiles"));
      tmProfiles = null; return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$list__3() {

            return self.trafficManagerProviderClient.profiles.listAllInResourceGroup(resourceGroupName, __cb(_, __frame, 5, 62, function ___(__0, __1) { tmProfiles = __1; _(null, null, true); }, true)); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$list__3() {

              progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$list__3() {


          self.interaction.formatOutput(tmProfiles.profiles, function(outputData) {
            if ((outputData.length === 0)) {
              self.output.warn(util.format($("No Traffic Manager profiles found in resource group \"%s\""), resourceGroupName)); }
             else {
              self.output.table(outputData, function(row, tm) {
                row.cell($("Name"), tm.name);
                row.cell($("Location"), tm.location);
                row.cell($("DNS name"), tm.properties.dnsConfig.relativeName);
                row.cell($("Status"), tm.properties.profileStatus);
                row.cell($("Routing method"), tm.properties.trafficRoutingMethod);
                row.cell($("Monitoring protocol"), tm.properties.monitorConfig.protocol);
                row.cell($("Monitoring path"), tm.properties.monitorConfig.path);
                row.cell($("Monitoring port"), tm.properties.monitorConfig.port);
                row.cell($("Number of endpoints"), (tm.properties.endpoints.length || 0)); }); } ; }); _(); }); }); }); },





  show: function show__4(resourceGroupName, name, options, _) { var self, tmProfile, __this = this; var __frame = { name: "show__4", line: 103 }; return __func(_, this, arguments, show__4, 3, __frame, function __$show__4() { self = __this;

      return self.get(resourceGroupName, name, __cb(_, __frame, 2, 25, function ___(__0, __1) { tmProfile = __1;

        if (!tmProfile) {
          if (self.output.format().json) {
            self.output.json({ }); }
           else {
            self.output.warn(util.format($("A Traffic Manager profile with name \"%s\" not found in the resource group \"%s\""), name, resourceGroupName)); } ; return _(null); } ;



        self._showProfile(tmProfile.profile); _(); }, true)); }); },


  get: function get__5(resourceGroupName, name, _) { var self, progress, tmProfile, __this = this; var __frame = { name: "get__5", line: 118 }; return __func(_, this, arguments, get__5, 2, __frame, function __$get__5() { self = __this;

      progress = self.interaction.progress(util.format($("Looking up the Traffic Manager profile \"%s\""), name)); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$get__5() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$get__5() {

                  return self.trafficManagerProviderClient.profiles.get(resourceGroupName, name, __cb(_, __frame, 4, 65, function ___(__0, __1) { tmProfile = __1;
                    return _(null, tmProfile); }, true)); }); })(function ___(e, __result) { __catch(function __$get__5() { if (e) {

                    if ((e.statusCode === 404)) {
                      return _(null, null); } ;

                    return _(e); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$get__5() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$get__5() {

              progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$get__5() { _(); }); }); }); },



  delete: function delete__6(resourceGroupName, name, options, _) { var self, tmProfile, progress, __this = this; var __frame = { name: "delete__6", line: 134 }; return __func(_, this, arguments, delete__6, 3, __frame, function __$delete__6() { self = __this;

      return self.get(resourceGroupName, name, __cb(_, __frame, 2, 25, function ___(__0, __2) { tmProfile = __2;
        if (!tmProfile) {
          return _(new Error(util.format("Traffic Manager profile with name \"%s\" not found in the resource group \"%s\"", name, resourceGroupName))); } ; return (function __$delete__6(_) {


          var __1 = !options.quiet; if (!__1) { return _(null, __1); } ; return self.interaction.confirm(util.format($("Delete Traffic Manager profile %s? [y/n] "), name), __cb(_, __frame, 7, 44, function ___(__0, __3) { var __2 = !__3; return _(null, __2); }, true)); })(__cb(_, __frame, -133, 17, function ___(__0, __3) { return (function __$delete__6(__then) { if (__3) { return _(null); } else { __then(); } ; })(function __$delete__6() {



            progress = self.interaction.progress(util.format($("Deleting Traffic Manager profile \"%s\""), name)); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$delete__6() {

                  return self.trafficManagerProviderClient.profiles.deleteMethod(resourceGroupName, name, __cb(_, __frame, 13, 49, function __$delete__6() { _(null, null, true); }, true)); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$delete__6() {

                    progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$delete__6() { _(); }); }); }); }, true)); }, true)); }); },



  checkDnsAvailability: function checkDnsAvailability__7(resourceGroupName, relativeDnsName, options, _) { var self, progress, profiles, tmProfile, i, item, __this = this; var __frame = { name: "checkDnsAvailability__7", line: 153 }; return __func(_, this, arguments, checkDnsAvailability__7, 3, __frame, function __$checkDnsAvailability__7() { self = __this;

      progress = self.interaction.progress($("Getting Traffic Manager profiles"));
      profiles = null; return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$checkDnsAvailability__7() {

            return self.trafficManagerProviderClient.profiles.listAllInResourceGroup(resourceGroupName, __cb(_, __frame, 5, 60, function ___(__0, __1) { profiles = __1; _(null, null, true); }, true)); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$checkDnsAvailability__7() {

              progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$checkDnsAvailability__7() {



          for (i = 0; (i < profiles.profiles.length); i++) {
            item = profiles.profiles[i];
            if ((item.properties.dnsConfig && (item.properties.dnsConfig.relativeName === relativeDnsName.toLowerCase()))) {
              tmProfile = item;
              break; } ; };



          if (self.output.format().json) {
            self.output.json({
              isAvailable: (tmProfile ? false : true) }); return _(null); } ;




          if (tmProfile) {
            self.output.warn(util.format($("The DNS name \"%s\" is already reserved by \"%s\" Traffic Manager profile"), relativeDnsName, tmProfile.name)); }
           else {
            self.output.info(util.format($("The DNS name \"%s\" is available in resource group \"%s\""), relativeDnsName, resourceGroupName)); } ; _(); }); }); }); },



  createEndpoint: function createEndpoint__8(resourceGroupName, profileName, endpointName, options, _) { var self, endpoint, trafficManager, ep, __this = this; var __frame = { name: "createEndpoint__8", line: 186 }; return __func(_, this, arguments, createEndpoint__8, 4, __frame, function __$createEndpoint__8() { self = __this;

      endpoint = self._parseEndpoint(endpointName, options, true);
      return self.get(resourceGroupName, profileName, __cb(_, __frame, 3, 30, function ___(__0, __1) { trafficManager = __1;
        if (!trafficManager) {
          return _(new Error(util.format($("A Traffic Manager with name \"%s\" not found in the resource group \"%s\""), profileName, resourceGroupName))); } ;


        ep = utils.findFirstCaseIgnore(trafficManager.profile.properties.endpoints, { name: endpointName }); return (function __$createEndpoint__8(__then) {

          if (ep) {
            self.output.error(util.format($("An endpoint with name \"%s\" already exist in Traffic Manager \"%s\""), endpointName, profileName)); __then(); } else {

            trafficManager.profile.properties.endpoints.push(endpoint);
            return self.update(resourceGroupName, profileName, trafficManager, __cb(_, __frame, 14, 11, function __$createEndpoint__8() {
              return self.show(resourceGroupName, profileName, options, __cb(_, __frame, 15, 11, __then, true)); }, true)); } ; })(_); }, true)); }); },



  setEndpoint: function setEndpoint__9(resourceGroupName, profileName, endpointName, options, _) { var self, endpoint, trafficManager, ep, __this = this; var __frame = { name: "setEndpoint__9", line: 205 }; return __func(_, this, arguments, setEndpoint__9, 4, __frame, function __$setEndpoint__9() { self = __this;

      endpoint = self._parseEndpoint(endpointName, options, false);
      return self.get(resourceGroupName, profileName, __cb(_, __frame, 3, 30, function ___(__0, __1) { trafficManager = __1;
        if (!trafficManager) {
          return _(new Error(util.format($("A Traffic Manager with name \"%s\" not found in the resource group \"%s\""), profileName, resourceGroupName))); } ;


        ep = utils.findFirstCaseIgnore(trafficManager.profile.properties.endpoints, { name: endpointName }); return (function __$setEndpoint__9(__then) {

          if (ep) {
            if (options.type) { ep.type = endpoint.type; } ;
            if (options.target) { ep.properties.target = endpoint.properties.target; } ;
            if (options.endpointStatus) { ep.properties.endpointStatus = endpoint.properties.endpointStatus; } ;
            if (options.weight) { ep.properties.weight = endpoint.properties.weight; } ;
            if (options.priority) { ep.properties.priority = endpoint.properties.priority; } ;
            return self.update(resourceGroupName, profileName, trafficManager, __cb(_, __frame, 16, 11, function __$setEndpoint__9() {
              return self.show(resourceGroupName, profileName, options, __cb(_, __frame, 17, 11, __then, true)); }, true)); } else {

            self.output.error(util.format($("An endpoint with name \"%s\" not found in the Traffic Manager \"%s\""), endpointName, profileName)); __then(); } ; })(_); }, true)); }); },



  deleteEndpoint: function deleteEndpoint__10(resourceGroupName, profileName, endpointName, options, _) { var self, trafficManager, index, __this = this; var __frame = { name: "deleteEndpoint__10", line: 228 }; return __func(_, this, arguments, deleteEndpoint__10, 4, __frame, function __$deleteEndpoint__10() { self = __this;

      return self.get(resourceGroupName, profileName, __cb(_, __frame, 2, 30, function ___(__0, __2) { trafficManager = __2;
        if (!trafficManager) {
          return _(new Error(util.format($("A Traffic Manager with name \"%s\" not found in the resource group \"%s\""), profileName, resourceGroupName))); } ;


        index = utils.indexOfCaseIgnore(trafficManager.profile.properties.endpoints, { name: endpointName }); return (function __$deleteEndpoint__10(__then) {
          if ((index !== -1)) { return (function __$deleteEndpoint__10(_) {
              var __1 = !options.quiet; if (!__1) { return _(null, __1); } ; return self.interaction.confirm(util.format($("Delete an endpoint \"%s?\" [y/n] "), endpointName), __cb(_, __frame, 9, 46, function ___(__0, __3) { var __2 = !__3; return _(null, __2); }, true)); })(__cb(_, __frame, -227, 17, function ___(__0, __3) { return (function __$deleteEndpoint__10(__then) { if (__3) { return _(null); } else { __then(); } ; })(function __$deleteEndpoint__10() {



                trafficManager.profile.properties.endpoints.splice(index, 1);
                return self.update(resourceGroupName, profileName, trafficManager, __cb(_, __frame, 14, 11, __then, true)); }); }, true)); } else {

            self.output.error(util.format($("An endpoint with name \"%s\" not found in the Traffic Manager \"%s\""), endpointName, profileName)); __then(); } ; })(_); }, true)); }); },



  update: function update__11(resourceGroupName, profileName, trafficManager, _) { var self, progress, __this = this; var __frame = { name: "update__11", line: 248 }; return __func(_, this, arguments, update__11, 3, __frame, function __$update__11() { self = __this;

      progress = self.interaction.progress(util.format($("Updating Traffic Manager \"%s\""), profileName)); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$update__11() {

            return self.trafficManagerProviderClient.profiles.createOrUpdate(resourceGroupName, profileName, trafficManager, __cb(_, __frame, 4, 49, function __$update__11() { _(null, null, true); }, true)); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$update__11() {

              progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$update__11() { _(); }); }); }); },



  _parseEndpoint: function(endpointName, options, useDefaults) {
    var self = this;
    var endpoint = {
      name: endpointName,
      properties: { } };


    if (options.type) {
      endpoint.type = utils.verifyParamExistsInCollection(constants.trafficManager.endpointType, options.type, "--type");
      if ((endpoint.type == constants.trafficManager.endpointType[0])) {
        endpoint.type = "Microsoft.Network/trafficmanagerprofiles/ExternalEndpoints"; } ; }

     else if (useDefaults) {
      endpoint.type = "Microsoft.Network/trafficmanagerprofiles/ExternalEndpoints"; }  ;


    if (options.target) {
      if (utils.stringIsNullOrEmpty(options.target)) {
        throw new Error($("Target parameter must not be null or empty string")); } ;

      endpoint.properties.target = utils.trimTrailingChar(options.target, "."); } ;


    if (options.endpointStatus) {
      endpoint.properties.endpointStatus = utils.verifyParamExistsInCollection(constants.trafficManager.status, options.endpointStatus, "--endpoint-status"); }
     else if (useDefaults) {
      var defStatus = constants.trafficManager.status[0];
      self.output.warn(util.format($("Using default endpoint status: %s"), defStatus));
      endpoint.properties.endpointStatus = defStatus; }  ;


    if (options.weight) {
      var weightAsInt = utils.parseInt(options.weight);
      if ((weightAsInt != options.weight)) {
        throw new Error($("Weight parameter must be an integer")); } ;

      endpoint.properties.weight = options.weight; } ;


    if (options.priority) {
      var priorityAsInt = utils.parseInt(options.priority);
      if ((priorityAsInt != options.priority)) {
        throw new Error($("Priority parameter must be an integer")); } ;

      endpoint.properties.priority = options.priority; } ;


    if (options.endpointLocation) {
      endpoint.properties.endpointLocation = options.endpointLocation; } ;


    return endpoint; },


  _parseProfile: function(options, useDefaults) {
    var self = this;
    var parameters = {
      properties: {
        dnsConfig: {
          relativeName: options.relativeDnsName },

        monitorConfig: { },
        endpoints: [] } };



    if (options.location) {
      parameters.location = options; }
     else if (useDefaults) {
      var defLocation = constants.trafficManager.defLocation;
      self.output.warn(util.format($("Using default location: %s"), defLocation));
      parameters.location = defLocation; }  ;


    if (options.profileStatus) {
      parameters.properties.profileStatus = utils.verifyParamExistsInCollection(constants.trafficManager.status, options.profileStatus, "--profile-status"); }
     else if (useDefaults) {
      var defStatus = constants.trafficManager.status[0];
      self.output.warn(util.format($("Using default profile status: %s"), defStatus));
      parameters.properties.profileStatus = defStatus; }  ;


    if (options.trafficRoutingMethod) {
      parameters.properties.trafficRoutingMethod = utils.verifyParamExistsInCollection(constants.trafficManager.routingMethod, options.trafficRoutingMethod, "--traffic-routing-method"); }
     else if (useDefaults) {
      var defRoutingMethod = constants.trafficManager.routingMethod[0];
      self.output.warn(util.format($("Using default routing method: %s"), defRoutingMethod));
      parameters.properties.trafficRoutingMethod = defRoutingMethod; }  ;


    if (options.ttl) {
      var ttl = parseInt(options.ttl);
      if ((!ttl || (ttl < 0))) {
        throw new Error("time to live parameter must be a positive integer value"); } ;

      parameters.properties.dnsConfig.ttl = options.ttl; }
     else if (useDefaults) {
      var defTtl = constants.trafficManager.defTtl;
      self.output.warn(util.format($("Using default ttl: %s"), defTtl));
      parameters.properties.dnsConfig.ttl = defTtl; }  ;


    if (options.monitorProtocol) {
      parameters.properties.monitorConfig.protocol = utils.verifyParamExistsInCollection(constants.trafficManager.protocols, options.monitorProtocol, "--monitor-protocol"); }
     else if (useDefaults) {
      var defProtocol = constants.trafficManager.protocols[0];
      self.output.warn(util.format($("Using default monitor protocol: %s"), defProtocol));
      parameters.properties.monitorConfig.protocol = defProtocol; }  ;


    if (options.monitorPort) {
      var monitorPort = parseInt(options.monitorPort);
      if ((!monitorPort || (monitorPort < 0))) {
        throw new Error("monitor port parameter must be a positive integer value"); } ;

      parameters.properties.monitorConfig.port = options.monitorPort; }
     else {
      if (useDefaults) {
        var defPort;
        if ((parameters.properties.monitorConfig.protocol === "http")) {
          defPort = constants.trafficManager.unsecurePort; } ;

        if ((parameters.properties.monitorConfig.protocol === "https")) {
          defPort = constants.trafficManager.securePort; } ;

        self.output.warn(util.format($("Using default monitor port: %s"), defPort));
        parameters.properties.monitorConfig.port = defPort; } ; } ;



    if (options.monitorPath) {
      parameters.properties.monitorConfig.path = options.monitorPath; } ;


    if (options.tags) {
      parameters.tags = tagUtils.buildTagsParameter(null, options); } ;


    return parameters; },


  _showProfile: function(tmProfile) {
    var self = this;
    self.interaction.formatOutput(tmProfile, function(tm) {
      self.output.nameValue($("Id"), tm.id);
      self.output.nameValue($("Name"), tm.name);
      self.output.nameValue($("Type"), tm.type);
      self.output.nameValue($("Location"), tm.location);
      self.output.nameValue($("Status"), tm.properties.profileStatus);
      self.output.nameValue($("Routing method"), tm.properties.trafficRoutingMethod);
      self.output.nameValue($("DNS name"), tm.properties.dnsConfig.relativeName);
      self.output.nameValue($("Time to live"), tm.properties.dnsConfig.ttl);
      self.output.nameValue($("Monitoring protoco"), tm.properties.monitorConfig.protocol);
      self.output.nameValue($("Monitoring path"), tm.properties.monitorConfig.path);
      self.output.nameValue($("Monitoring port"), tm.properties.monitorConfig.port);
      self.output.nameValue($("Tags"), tagUtils.getTagsInfo(tm.tags));

      var endpoints = tm.properties.endpoints;
      if ((endpoints.length !== 0)) {
        self.output.header($("Endpoints"));
        self.output.table(endpoints, function(row, ep) {
          row.cell($("Name"), ep.name);
          row.cell($("Location"), (ep.properties.endpointLocation || ""));
          row.cell($("Target"), ep.properties.target);
          row.cell($("Status"), ep.properties.endpointStatus);
          row.cell($("Weight"), ep.properties.weight);
          row.cell($("Priority"), ep.properties.priority);
          row.cell($("Type"), ep.type); }); } ; }); }});






module.exports = Traffic;
