/*** Generated by streamline 0.10.17 (callbacks) - DO NOT EDIT ***/ var __rt=require('streamline/lib/callbacks/runtime').runtime(__filename, false),__func=__rt.__func,__cb=__rt.__cb,__catch=__rt.__catch,__tryCatch=__rt.__tryCatch; var __ = require("underscore");















var util = require("util");
var utils = require("../../../util/utils");
var $ = utils.getLocaleString;
var constants = require("./constants");
var tagUtils = require("../tag/tagUtils");
var resourceUtils = require("../resource/resourceUtils");
var VNetUtil = require("../../../util/vnet.util");
var PublicIp = require("./publicIp");
var Subnet = require("./subnet");

function VirtualNetworkGateway(cli, networkResourceProviderClient) {
  this.networkResourceProviderClient = networkResourceProviderClient;
  this.publicIpCrud = new PublicIp(cli, networkResourceProviderClient);
  this.subnetCrud = new Subnet(cli, networkResourceProviderClient);
  this.vnetUtil = new VNetUtil();
  this.output = cli.output;
  this.interaction = cli.interaction;};


__.extend(VirtualNetworkGateway.prototype, {
  create: function create__1(resourceGroupName, name, options, _) { var self, parameters, gateway, __this = this; var __frame = { name: "create__1", line: 37 }; return __func(_, this, arguments, create__1, 3, __frame, function __$create__1() { self = __this;

      self._validate(options);

      return self._parse(resourceGroupName, name, options, __cb(_, __frame, 4, 26, function ___(__0, __1) { parameters = __1;

        return self.get(resourceGroupName, name, __cb(_, __frame, 6, 23, function ___(__0, __2) { gateway = __2;
          if (gateway) {
            return _(new Error(util.format($("A virtual network gateway with name \"%s\" already exists in the resource group \"%s\""), name, resourceGroupName))); } ;


          return self._createOrUpdate(resourceGroupName, name, parameters, true, __cb(_, __frame, 11, 9, function __$create__1() {
            return self.show(resourceGroupName, name, options, __cb(_, __frame, 12, 9, function __$create__1() { _(); }, true)); }, true)); }, true)); }, true)); }); },


  set: function set__2(resourceGroupName, name, options, _) { var self, gateway, parameters, __this = this; var __frame = { name: "set__2", line: 52 }; return __func(_, this, arguments, set__2, 3, __frame, function __$set__2() { self = __this;

      self._validate(options);

      return self.get(resourceGroupName, name, __cb(_, __frame, 4, 23, function ___(__0, __1) { gateway = __1;
        if (!gateway) {
          return _(new Error(util.format($("A virtual network gateway with name \"%s\" not found in the resource group \"%s\""), name, resourceGroupName))); } ;


        return self._parse(resourceGroupName, name, options, __cb(_, __frame, 9, 26, function ___(__0, __2) { parameters = __2;

          return self._createOrUpdate(resourceGroupName, name, parameters, false, __cb(_, __frame, 11, 9, function __$set__2() {
            return self.show(resourceGroupName, name, options, __cb(_, __frame, 12, 9, function __$set__2() { _(); }, true)); }, true)); }, true), gateway); }, true)); }); },


  list: function list__3(resourceGroupName, options, _) { var self, gateways, progress, __this = this; var __frame = { name: "list__3", line: 67 }; return __func(_, this, arguments, list__3, 2, __frame, function __$list__3() { self = __this;

      gateways = null;

      progress = self.interaction.progress($("Looking up virtual network gateways")); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$list__3() {

            return self.networkResourceProviderClient.virtualNetworkGateways.list(resourceGroupName, __cb(_, __frame, 6, 75, function ___(__0, __1) { gateways = __1; _(null, null, true); }, true)); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$list__3() {

              progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$list__3() {


          self.interaction.formatOutput(gateways.virtualNetworkGateways, function(data) {
            if ((data.length === 0)) {
              self.output.warn($("No virtual network gateways found")); }
             else {
              self.output.table(data, function(row, gateway) {
                row.cell($("Name"), gateway.name);
                row.cell($("Location"), gateway.location);
                row.cell($("VPN type"), gateway.vpnType);
                row.cell($("Enable BGP"), gateway.enableBgp);
                row.cell($("Private IP allocation"), gateway.ipConfigurations[0].privateIpAllocationMethod);
                row.cell($("Private IP address"), (gateway.ipConfigurations[0].privateIpAddress || "")); }); } ; }); _(); }); }); }); },





  show: function show__4(resourceGroupName, name, options, _) { var self, gateway, __this = this; var __frame = { name: "show__4", line: 94 }; return __func(_, this, arguments, show__4, 3, __frame, function __$show__4() { self = __this;

      return self.get(resourceGroupName, name, __cb(_, __frame, 2, 23, function ___(__0, __1) { gateway = __1;

        self.interaction.formatOutput(gateway, function(gateway) {
          if ((gateway !== null)) {
            var resourceInformation = resourceUtils.getResourceInformation(gateway.id);
            self.output.nameValue($("Id"), gateway.id);
            self.output.nameValue($("Name"), (resourceInformation.resourceName || gateway.name));
            self.output.nameValue($("Type"), (resourceInformation.resourceType || gateway.type));
            self.output.nameValue($("Location"), gateway.location);
            self.output.nameValue($("Tags"), tagUtils.getTagsInfo(gateway.tags));
            self.output.nameValue($("Provisioning state"), gateway.provisioningState);
            self.output.nameValue($("VPN type"), gateway.vpnType);
            self.output.nameValue($("Enable BGP"), gateway.enableBgp);

            self.output.header($("IP configurations"));
            gateway.ipConfigurations.forEach(function(ipConfig) {
              self.output.nameValue($("Id"), ipConfig.id, 2);
              self.output.nameValue($("Name"), ipConfig.name, 2);
              self.output.nameValue($("Provisioning state"), ipConfig.provisioningState, 2);
              self.output.nameValue($("Private IP allocation method"), ipConfig.privateIpAllocationMethod, 2);
              self.output.nameValue($("Private IP address"), ipConfig.privateIpAddress, 2);
              self.output.nameValue($("Public IP id"), ipConfig.publicIpAddress.id, 2);
              self.output.nameValue($("Subnet id"), ipConfig.subnet.id, 2);
              self.output.data(""); }); }

           else {
            self.output.warn(util.format($("Virtual network gateway \"%s\" not found in the resource group \"%s\""), name, resourceGroupName)); } ; }); _(); }, true)); }); },




  delete: function delete__5(resourceGroupName, name, options, _) { var self, gateway, progress, __this = this; var __frame = { name: "delete__5", line: 127 }; return __func(_, this, arguments, delete__5, 3, __frame, function __$delete__5() { self = __this;


      return self.get(resourceGroupName, name, __cb(_, __frame, 3, 23, function ___(__0, __2) { gateway = __2;
        if (!gateway) {
          return _(new Error(util.format($("Virtual network gateway \"%s\" not found in the resource group \"%s\""), name, resourceGroupName))); } ; return (function __$delete__5(_) {


          var __1 = !options.quiet; if (!__1) { return _(null, __1); } ; return self.interaction.confirm(util.format($("Delete virtual network gateway \"%s\"? [y/n] "), name), __cb(_, __frame, 8, 44, function ___(__0, __3) { var __2 = !__3; return _(null, __2); }, true)); })(__cb(_, __frame, -126, 17, function ___(__0, __3) { return (function __$delete__5(__then) { if (__3) { return _(null); } else { __then(); } ; })(function __$delete__5() {



            progress = self.interaction.progress(util.format($("Deleting virtual network gateway \"%s\""), name)); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$delete__5() {

                  return self.networkResourceProviderClient.virtualNetworkGateways.deleteMethod(resourceGroupName, name, __cb(_, __frame, 14, 64, function __$delete__5() { _(null, null, true); }, true)); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$delete__5() {

                    progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$delete__5() { _(); }); }); }); }, true)); }, true)); }); },



  get: function get__6(resourceGroupName, name, _) { var self, gateway, progress, __this = this; var __frame = { name: "get__6", line: 147 }; return __func(_, this, arguments, get__6, 2, __frame, function __$get__6() { self = __this;


      progress = self.interaction.progress(util.format($("Looking up virtual network gateway \"%s\""), name)); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$get__6() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$get__6() {

                  return self.networkResourceProviderClient.virtualNetworkGateways.get(resourceGroupName, name, __cb(_, __frame, 5, 74, function ___(__0, __1) { gateway = __1; __then(); }, true)); }); })(function ___(e, __result) { __catch(function __$get__6() { if (e) {

                    if ((e.statusCode === 404)) {
                      return _(null, null); }
                     else {
                      return _(e); } ; __then(); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$get__6() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$get__6() {


              progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$get__6() {

          return _(null, gateway.virtualNetworkGateway); }); }); }); },


  _createOrUpdate: function _createOrUpdate__7(resourceGroupName, name, parameters, isCreating, _) { var self, action, progress, __this = this; var __frame = { name: "_createOrUpdate__7", line: 165 }; return __func(_, this, arguments, _createOrUpdate__7, 4, __frame, function __$_createOrUpdate__7() { self = __this;

      action = (isCreating ? "Creating" : "Updating");
      progress = self.interaction.progress(util.format($("%s virtual network gateway \"%s\""), action, name)); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$_createOrUpdate__7() {

            return self.networkResourceProviderClient.virtualNetworkGateways.createOrUpdate(resourceGroupName, name, parameters, __cb(_, __frame, 5, 64, function __$_createOrUpdate__7() { _(null, null, true); }, true)); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$_createOrUpdate__7() {

              progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$_createOrUpdate__7() { _(); }); }); }); },



  _validate: function(options) {
    var self = this;

    if (options.type) {
      utils.verifyParamExistsInCollection(constants.vpnGateway.type, options.type, "--type"); } ;


    if (options.privateIpAddress) {
      var ipValidationResult = self.vnetUtil.parseIPv4(options.privateIpAddress);
      if (ipValidationResult.error) {
        throw new Error($("--private-ip-address parameter is in invalid format")); } ; } ;



    if (options.enableBgp) {
      utils.verifyParamExistsInCollection(["true","false",], options.enableBgp, "--enable-bgp"); } ; },



  _parse: function _parse__8(resourceGroupName, name, options, _, gateway) { var self, parameters, tags, publicip, subnet, __this = this; var __frame = { name: "_parse__8", line: 195 }; return __func(_, this, arguments, _parse__8, 3, __frame, function __$_parse__8() { self = __this;


      parameters = {
        gatewayType: "Vpn",
        vpnType: constants.vpnGateway.type[0],
        enableBgp: "false",
        location: "",
        tags: { },
        ipConfigurations: [{

          name: "ip-config",
          privateIpAllocationMethod: "Static",
          privateIpAddress: "",
          publicIpAddress: {
            id: "" },

          subnet: {
            id: "" } },] };





      if (gateway) { parameters = gateway; } ;

      if (options.type) {
        parameters.vpnType = options.type; } ;


      if (options.enableBgp) {
        parameters.enableBgp = options.enableBgp; } ;


      if (options.privateIpAddress) {
        parameters.ipConfigurations[0].privateIpAddress = options.privateIpAddress; } ;


      if (options.location) {
        parameters.location = options.location; } ;


      if (options.tags) {
        tags = tagUtils.buildTagsParameter(null, options);
        tagUtils.appendTags(parameters, tags); } ;


      if ((options.tags === false)) {
        gateway.tags = { }; } ; return (function __$_parse__8(__then) {


        if (options.publicIpId) {
          if (options.publicIpName) {
            self.output.warn($("--public-ip-name parameter will be ignored because --public-ip-id and --public-ip-name are mutually exclusive")); } ;

          parameters.ipConfigurations[0].publicIpAddress.id = options.publicIpId; __then(); } else { return (function __$_parse__8(__then) {

            if (options.publicIpName) {
              return self.publicIpCrud.get(resourceGroupName, options.publicIpName, __cb(_, __frame, 58, 41, function ___(__0, __1) { publicip = __1;
                if (!publicip) {
                  return _(new Error(util.format($("A public ip with name \"%s\" not found in the resource group \"%s\""), options.publicIpName, resourceGroupName))); } ;

                parameters.ipConfigurations[0].publicIpAddress.id = publicip.id; __then(); }, true)); } else { __then(); } ; })(__then); } ; })(function __$_parse__8() { return (function __$_parse__8(__then) {



          if (options.subnetId) {
            if ((options.vnetName || options.subnetName)) {
              self.output.warn($("--vnet-name, --subnet-name parameters will be ignored because --subnet-id and --vnet-name, --subnet-name are mutually exclusive")); } ;

            parameters.ipConfigurations[0].subnet.id = options.subnetId; __then(); } else { return (function __$_parse__8(__then) {

              if ((options.vnetName && options.subnetName)) {
                return self.subnetCrud.get(resourceGroupName, options.vnetName, options.subnetName, __cb(_, __frame, 73, 37, function ___(__0, __2) { subnet = __2;
                  if (!subnet) {
                    return _(new Error(util.format($("A subnet with name \"%s\" not found in the resource group \"%s\""), options.subnetName, resourceGroupName))); } ;

                  parameters.ipConfigurations[0].subnet.id = subnet.id; __then(); }, true)); } else { __then(); } ; })(__then); } ; })(function __$_parse__8() {



          return _(null, parameters); }); }); }); }});




module.exports = VirtualNetworkGateway;
