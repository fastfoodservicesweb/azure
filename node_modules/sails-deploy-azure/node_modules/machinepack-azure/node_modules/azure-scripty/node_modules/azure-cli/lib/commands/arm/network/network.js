/*** Generated by streamline 0.10.17 (callbacks) - DO NOT EDIT ***/ "use strict"; var __rt=require('streamline/lib/callbacks/runtime').runtime(__filename, false),__func=__rt.__func,__cb=__rt.__cb; var util = require("util");

















var utils = require("../../../util/utils");
var profile = require("../../../util/profile/index");
var constants = require("./constants");
var $ = utils.getLocaleString;

var VirtualNetwork = require("./virtualNetwork");
var Subnet = require("./subnet");
var LoadBalancer = require("./loadBalancer");
var PublicIp = require("./publicIp");
var Nic = require("./nic");
var Nsg = require("./nsg");
var DnsZone = require("./dnsZone");
var TrafficManager = require("./trafficManager");
var RouteTable = require("./routeTable");
var LocalNetworkGateway = require("./localNetworkGateway");
var VirtualNetworkGateway = require("./virtualNetworkGateway");
var ExpressRoute = require("./expressRoute");

exports.init = function(cli) {
  var network = cli.category("network").description($("Commands to manage network resources"));


  var vnet = network.category("vnet").description($("Commands to manage virtual networks"));


  vnet.command("create [resource-group] [name] [location]").description("Create a virtual network").usage("[options] <resource-group> <name> <location>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the virtual network")).option("-l, --location <location>", $("the location")).option("-a, --address-prefixes <address-prefixes>", $((("the comma separated list of address prefixes for this virtual network." + "\n     For example -a 10.0.0.0/24,10.0.1.0/24.") + "\n     Default value is 10.0.0.0/8"))).option("-d, --dns-servers <dns-servers>", $("the comma separated list of DNS servers IP addresses")).option("-t, --tags <tags>", $(((("the tags set on this virtual network." + "\n     Can be multiple. In the format of \"name=value\".") + "\n     Name is required and value is optional.") + "\n     For example, -t \"tag1=value1;tag2\""))).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __1(resourceGroup, name, location, options, _) { var networkResourceProviderClient, virtualNetwork; var __frame = { name: "__1", line: 59 }; return __func(_, this, arguments, __1, 4, __frame, function __$__1() {















      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Virtual network name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;
          return cli.interaction.promptIfNotGiven($("Location: "), location, __cb(_, __frame, 3, 33, function ___(__0, __3) { location = __3;

            networkResourceProviderClient = getNetworkResourceProviderClient(options);
            virtualNetwork = new VirtualNetwork(cli, networkResourceProviderClient);
            return virtualNetwork.create(resourceGroup, name, location, options, __cb(_, __frame, 7, 21, function __$__1() { _(); }, true)); }, true)); }, true)); }, true)); }); });


  vnet.command("set [resource-group] [name]").description("Set virtual network").usage("[options] <resource-group> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the virtual network")).option("-a, --address-prefixes <address-prefixes>", $((((("the comma separated list of address prefixes for this virtual network." + "\n     For example -a 10.0.0.0/24,10.0.1.0/24.") + "\n     This list will be appended to the current list of address prefixes.") + "\n     The address prefixes in this list should not overlap between them.") + "\n     The address prefixes in this list should not overlap with existing address prefixes in the vnet."))).option("-d, --dns-servers [dns-servers]", $(("the comma separated list of DNS servers IP addresses." + "\n     This list will be appended to the current list of DNS server IP addresses."))).option("-t, --tags <tags>", $(((("the tags set on this virtual network." + "\n     Can be multiple. In the format of \"name=value\".") + "\n     Name is required and value is optional. For example, -t \"tag1=value1;tag2\".") + "\n     Existing tag values will be replaced by the values specified."))).option("--no-tags", $("remove all existing tags")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __2(resourceGroup, name, location, options, _) { var networkResourceProviderClient, virtualNetwork; var __frame = { name: "__2", line: 87 }; return __func(_, this, arguments, __2, 4, __frame, function __$__2() {


















      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Virtual network name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;

          networkResourceProviderClient = getNetworkResourceProviderClient(options);
          virtualNetwork = new VirtualNetwork(cli, networkResourceProviderClient);
          return virtualNetwork.set(resourceGroup, name, options, __cb(_, __frame, 6, 21, function __$__2() { _(); }, true)); }, true)); }, true)); }); });


  vnet.command("list [resource-group]").description("Get all virtual networks").usage("[options] <resource-group>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __3(resourceGroup, options, _) { var networkResourceProviderClient, virtualNetwork; var __frame = { name: "__3", line: 101 }; return __func(_, this, arguments, __3, 2, __frame, function __$__3() {





      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;

        networkResourceProviderClient = getNetworkResourceProviderClient(options);
        virtualNetwork = new VirtualNetwork(cli, networkResourceProviderClient);
        return virtualNetwork.list(resourceGroup, __cb(_, __frame, 5, 21, function __$__3() { _(); }, true)); }, true)); }); });


  vnet.command("show [resource-group] [name]").description("Get a virtual network").usage("[options] <resource-group> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the virtual network")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __4(resourceGroup, name, location, options, _) { var networkResourceProviderClient, virtualNetwork; var __frame = { name: "__4", line: 115 }; return __func(_, this, arguments, __4, 4, __frame, function __$__4() {






      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Virtual network name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;

          networkResourceProviderClient = getNetworkResourceProviderClient(options);
          virtualNetwork = new VirtualNetwork(cli, networkResourceProviderClient);
          return virtualNetwork.show(resourceGroup, name, null, __cb(_, __frame, 6, 21, function __$__4() { _(); }, true)); }, true)); }, true)); }); });


  vnet.command("delete [resource-group] [name]").description("Delete a virtual network").usage("[options] <resource-group> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the virtual network")).option("-q, --quiet", $("quiet mode, do not ask for delete confirmation")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __5(resourceGroup, name, options, _) { var networkResourceProviderClient, virtualNetwork; var __frame = { name: "__5", line: 131 }; return __func(_, this, arguments, __5, 3, __frame, function __$__5() {







      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Virtual network name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;

          networkResourceProviderClient = getNetworkResourceProviderClient(options);
          virtualNetwork = new VirtualNetwork(cli, networkResourceProviderClient);
          return virtualNetwork.delete(resourceGroup, name, options, __cb(_, __frame, 6, 21, function __$__5() { _(); }, true)); }, true)); }, true)); }); });


  var subnet = vnet.category("subnet").description($("Commands to manage virtual network subnets"));


  subnet.command("create [resource-group] [vnet-name] [name]").description($("Create virtual network subnet")).usage("[options] <resource-group> <vnet-name> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-e, --vnet-name <vnet-name>", $("the name of the virtual network")).option("-n, --name <name>", $("the name of the subnet")).option("-a, --address-prefix <address-prefix>", $("the address prefix")).option("-w, --network-security-group-id <network-security-group-id>", $(("the network security group identifier." + "\n     e.g. /subscriptions/<subscription-id>/resourceGroups/<resource-group-name>/providers/Microsoft.Network/networkSecurityGroups/<nsg-name>"))).option("-o, --network-security-group-name <network-security-group-name>", $("the network security group name")).option("-i, --route-table-id <route-table-id>", $(("the route table identifier." + "\n     e.g. /subscriptions/<subscription-id>/resourceGroups/<resource-group-name>/providers/Microsoft.Network/routeTables/<route-table-name>"))).option("-r, --route-table-name <route-table-name>", $("the route table name")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __6(resourceGroup, vnetName, name, options, _) { var networkResourceProviderClient, subnet; var __frame = { name: "__6", line: 157 }; return __func(_, this, arguments, __6, 4, __frame, function __$__6() {














      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Virtual network name: "), vnetName, __cb(_, __frame, 2, 33, function ___(__0, __2) { vnetName = __2;
          return cli.interaction.promptIfNotGiven($("Subnet name: "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;

            networkResourceProviderClient = getNetworkResourceProviderClient(options);
            subnet = new Subnet(cli, networkResourceProviderClient);
            return subnet.create(resourceGroup, vnetName, name, options, __cb(_, __frame, 7, 13, function __$__6() { _(); }, true)); }, true)); }, true)); }, true)); }); });


  subnet.command("set [resource-group] [vnet-name] [name]").description($("Set a virtual network subnet")).usage("[options] <resource-group> <vnet-name> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-e, --vnet-name <vnet-name>", $("the name of the virtual network")).option("-n, --name <name>", $("the name of the subnet")).option("-a, --address-prefix <address-prefix>", $("the address prefix")).option("-w, --network-security-group-id [network-security-group-id]", $(("the network security group identifier." + "\n     e.g. /subscriptions/<subscription-id>/resourceGroups/<resource-group-name>/providers/Microsoft.Network/networkSecurityGroups/<nsg-name>"))).option("-o, --network-security-group-name <network-security-group-name>", $("the network security group name")).option("-i, --route-table-id <route-table-id>", $(("the route table identifier." + "\n     e.g. /subscriptions/<subscription-id>/resourceGroups/<resource-group-name>/providers/Microsoft.Network/routeTables/<route-table-name>"))).option("-r, --route-table-name <route-table-name>", $("the route table name")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __7(resourceGroup, vnetName, name, options, _) { var networkResourceProviderClient, subnet; var __frame = { name: "__7", line: 181 }; return __func(_, this, arguments, __7, 4, __frame, function __$__7() {














      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Virtual network name: "), vnetName, __cb(_, __frame, 2, 33, function ___(__0, __2) { vnetName = __2;
          return cli.interaction.promptIfNotGiven($("Subnet name: "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;

            networkResourceProviderClient = getNetworkResourceProviderClient(options);
            subnet = new Subnet(cli, networkResourceProviderClient);
            return subnet.set(resourceGroup, vnetName, name, options, __cb(_, __frame, 7, 13, function __$__7() { _(); }, true)); }, true)); }, true)); }, true)); }); });


  subnet.command("list [resource-group] [vnet-name]").description($("Get all virtual network subnets")).usage("[options] <resource-group> <vnet-name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-e, --vnet-name <vnet-name>", $("the name of the virtual network")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __8(resourceGroup, vnetName, options, _) { var networkResourceProviderClient, subnet; var __frame = { name: "__8", line: 197 }; return __func(_, this, arguments, __8, 3, __frame, function __$__8() {






      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Virtual network name: "), vnetName, __cb(_, __frame, 2, 33, function ___(__0, __2) { vnetName = __2;

          networkResourceProviderClient = getNetworkResourceProviderClient(options);
          subnet = new Subnet(cli, networkResourceProviderClient);
          return subnet.list(resourceGroup, vnetName, options, __cb(_, __frame, 6, 13, function __$__8() { _(); }, true)); }, true)); }, true)); }); });


  subnet.command("show [resource-group] [vnet-name] [name]").description($("Get a virtual network subnet")).usage("[options] <resource-group> <vnet-name> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-e, --vnet-name <vnet-name>", $("the name of the virtual network")).option("-n, --name <name>", $("the name of the subnet")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __9(resourceGroup, vnetName, name, options, _) { var networkResourceProviderClient, subnet; var __frame = { name: "__9", line: 213 }; return __func(_, this, arguments, __9, 4, __frame, function __$__9() {







      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Virtual network name: "), vnetName, __cb(_, __frame, 2, 33, function ___(__0, __2) { vnetName = __2;
          return cli.interaction.promptIfNotGiven($("Subnet name: "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;

            networkResourceProviderClient = getNetworkResourceProviderClient(options);
            subnet = new Subnet(cli, networkResourceProviderClient);
            return subnet.show(resourceGroup, vnetName, name, options, __cb(_, __frame, 7, 13, function __$__9() { _(); }, true)); }, true)); }, true)); }, true)); }); });


  subnet.command("delete [resource-group] [vnet-name] [name]").description($("Delete a subnet of a virtual network")).usage("[options] <resource-group> <vnet-name> <subnet-name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-e, --vnet-name <vnet-name>", $("the name of the virtual network")).option("-n, --name <name>", $("the subnet name")).option("-q, --quiet", $("quiet mode, do not ask for delete confirmation")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __10(resourceGroup, vnetName, name, options, _) { var networkResourceProviderClient, subnet; var __frame = { name: "__10", line: 231 }; return __func(_, this, arguments, __10, 4, __frame, function __$__10() {








      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Virtual network name: "), vnetName, __cb(_, __frame, 2, 33, function ___(__0, __2) { vnetName = __2;
          return cli.interaction.promptIfNotGiven($("Subnet name: "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;

            networkResourceProviderClient = getNetworkResourceProviderClient(options);
            subnet = new Subnet(cli, networkResourceProviderClient);
            return subnet.delete(resourceGroup, vnetName, name, options, __cb(_, __frame, 7, 13, function __$__10() { _(); }, true)); }, true)); }, true)); }, true)); }); });


  var lb = network.category("lb").description($("Commands to manage load balancers"));


  lb.command("create [resource-group] [name] [location]").description($("Create a load balancer")).usage("[options] <resource-group> <name> <location>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the load balancer")).option("-l, --location <location>", $("the location")).option("-t, --tags <tags>", $((("the list of tags." + "\n     Can be multiple. In the format of \"name=value\".") + "\n     Name is required and value is optional. For example, -t \"tag1=value1;tag2\""))).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __11(resourceGroup, name, location, options, _) { var networkResourceProviderClient, loadBalancer; var __frame = { name: "__11", line: 254 }; return __func(_, this, arguments, __11, 4, __frame, function __$__11() {










      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Load balancer name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;
          return cli.interaction.promptIfNotGiven($("Location: "), location, __cb(_, __frame, 3, 33, function ___(__0, __3) { location = __3;

            networkResourceProviderClient = getNetworkResourceProviderClient(options);
            loadBalancer = new LoadBalancer(cli, networkResourceProviderClient);
            return loadBalancer.create(resourceGroup, name, location, options, __cb(_, __frame, 7, 19, function __$__11() { _(); }, true)); }, true)); }, true)); }, true)); }); });


  lb.command("list [resource-group]").description($("Get all load balancers")).usage("[options] <resource-group>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __12(resourceGroup, options, _) { var networkResourceProviderClient, loadBalancer; var __frame = { name: "__12", line: 269 }; return __func(_, this, arguments, __12, 2, __frame, function __$__12() {





      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;

        networkResourceProviderClient = getNetworkResourceProviderClient(options);
        loadBalancer = new LoadBalancer(cli, networkResourceProviderClient);
        return loadBalancer.list(resourceGroup, __cb(_, __frame, 5, 19, function __$__12() { _(); }, true)); }, true)); }); });


  lb.command("show [resource-group] [name]").description($("Get a load balancer")).usage("[options] <resource-group> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the load balancer")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __13(resourceGroup, name, options, _) { var networkResourceProviderClient, loadBalancer; var __frame = { name: "__13", line: 283 }; return __func(_, this, arguments, __13, 3, __frame, function __$__13() {






      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Load balancer name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;

          networkResourceProviderClient = getNetworkResourceProviderClient(options);
          loadBalancer = new LoadBalancer(cli, networkResourceProviderClient);
          return loadBalancer.show(resourceGroup, name, options, __cb(_, __frame, 6, 19, function __$__13() { _(); }, true)); }, true)); }, true)); }); });


  lb.command("delete [resource-group] [name]").description($("Delete a load balancer")).usage("[options] <resource-group> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the load balancer")).option("-q, --quiet", $("quiet mode, do not ask for delete confirmation")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __14(resourceGroup, name, options, _) { var networkResourceProviderClient, loadBalancer; var __frame = { name: "__14", line: 299 }; return __func(_, this, arguments, __14, 3, __frame, function __$__14() {







      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Load balancer name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;

          networkResourceProviderClient = getNetworkResourceProviderClient(options);
          loadBalancer = new LoadBalancer(cli, networkResourceProviderClient);
          return loadBalancer.delete(resourceGroup, name, options, __cb(_, __frame, 6, 19, function __$__14() { _(); }, true)); }, true)); }, true)); }); });


  var lbProbe = lb.category("probe").description($("Commands to manage probes of a load balancer"));


  lbProbe.command("create [resource-group] [lb-name] [name]").description($("Add a probe to the load balancer")).usage("[options] <resource-group> <lb-name> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-l, --lb-name <lb-name>", $("the name of the load balancer")).option("-n, --name <name>", $("the name of the probe")).option("-p, --protocol <protocol>", $("the probe protocol")).option("-o, --port <port>", $("the probe port")).option("-f, --path <path>", $("the probe path")).option("-i, --interval <interval>", $("the probe interval in seconds")).option("-c, --count <count>", $("the number of probes")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __15(resourceGroup, lbName, name, options, _) { var networkResourceProviderClient, loadBalancer; var __frame = { name: "__15", line: 323 }; return __func(_, this, arguments, __15, 4, __frame, function __$__15() {












      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Load balancer name: "), lbName, __cb(_, __frame, 2, 31, function ___(__0, __2) { lbName = __2;
          return cli.interaction.promptIfNotGiven($("Probe name: "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;

            networkResourceProviderClient = getNetworkResourceProviderClient(options);
            loadBalancer = new LoadBalancer(cli, networkResourceProviderClient);
            return loadBalancer.createProbe(resourceGroup, lbName, name, options, __cb(_, __frame, 7, 19, function __$__15() { _(); }, true)); }, true)); }, true)); }, true)); }); });


  lbProbe.command("set [resource-group] [lb-name] [name]").usage("[options] <resource-group> <lb-name> <name>").description($("Set a probe of a load balancer")).option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-l, --lb-name <lb-name>", $("the name of the load balancer")).option("-n, --name <name>", $("the name of the probe")).option("-e, --new-probe-name <new-probe-name>", $("the new name of the probe")).option("-p, --protocol <protocol>", $("the new value for probe protocol")).option("-o, --port <port>", $("the new value for probe port")).option("-f, --path <path>", $("the new value for probe path")).option("-i, --interval <interval>", $("the new value for probe interval in seconds")).option("-c, --count <count>", $("the new value for number of probes")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __16(resourceGroup, lbName, name, options, _) { var networkResourceProviderClient, loadBalancer; var __frame = { name: "__16", line: 346 }; return __func(_, this, arguments, __16, 4, __frame, function __$__16() {













      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Load balancer name: "), lbName, __cb(_, __frame, 2, 31, function ___(__0, __2) { lbName = __2;
          return cli.interaction.promptIfNotGiven($("Probe name: "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;

            networkResourceProviderClient = getNetworkResourceProviderClient(options);
            loadBalancer = new LoadBalancer(cli, networkResourceProviderClient);
            return loadBalancer.setProbe(resourceGroup, lbName, name, options, __cb(_, __frame, 7, 19, function __$__16() { _(); }, true)); }, true)); }, true)); }, true)); }); });


  lbProbe.command("list [resource-group] [lb-name]").description($("Get all probes in a load balancer")).usage("[options] <resource-group> <lb-name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-l, --lb-name <lb-name>", $("the name of the load balancer")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __17(resourceGroup, lbName, options, _) { var networkResourceProviderClient, loadBalancer; var __frame = { name: "__17", line: 362 }; return __func(_, this, arguments, __17, 3, __frame, function __$__17() {






      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Load balancer name: "), lbName, __cb(_, __frame, 2, 31, function ___(__0, __2) { lbName = __2;

          networkResourceProviderClient = getNetworkResourceProviderClient(options);
          loadBalancer = new LoadBalancer(cli, networkResourceProviderClient);
          return loadBalancer.listProbes(resourceGroup, lbName, options, __cb(_, __frame, 6, 19, function __$__17() { _(); }, true)); }, true)); }, true)); }); });


  lbProbe.command("delete [resource-group] [lb-name] [name]").description($("Delete a probe from a load balancer")).usage("[options] <resource-group> <lb-name> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-l, --lb-name <lb-name>", $("the name of the load balancer")).option("-n, --name <name>", $("the probe name")).option("-q, --quiet", $("quiet mode, do not ask for delete confirmation")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __18(resourceGroup, lbName, name, options, _) { var networkResourceProviderClient, loadBalancer; var __frame = { name: "__18", line: 379 }; return __func(_, this, arguments, __18, 4, __frame, function __$__18() {








      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Load balancer name: "), lbName, __cb(_, __frame, 2, 31, function ___(__0, __2) { lbName = __2;
          return cli.interaction.promptIfNotGiven($("Probe name: "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;

            networkResourceProviderClient = getNetworkResourceProviderClient(options);
            loadBalancer = new LoadBalancer(cli, networkResourceProviderClient);
            return loadBalancer.deleteProbe(resourceGroup, lbName, name, options, __cb(_, __frame, 7, 19, function __$__18() { _(); }, true)); }, true)); }, true)); }, true)); }); });


  var lbFrontendIP = lb.category("frontend-ip").description("Commands to manage frontend ip configurations of a load balancer");


  lbFrontendIP.command("create [resource-group] [lb-name] [name]").description($("Add a frontend ip configuration to the load balancer")).usage("[options] <resource-group> <lb-name> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-l, --lb-name <lb-name>", $("the name of the load balancer")).option("-n, --name <name>", $("the name of the frontend ip configuration")).option("-a, --private-ip-address <private-ip-address>", $("the private ip address")).option("-u, --public-ip-id <public-ip-id>", $(("the public ip identifier." + "\n     e.g. /subscriptions/<subscription-id>/resourceGroups/<resource-group-name>/providers/Microsoft.Network/publicIPAddresses/<public-ip-name>"))).option("-i, --public-ip-name <public-ip-name>", $((("the public ip name." + "\n     This public ip must exist in the same resource group as the lb.") + "\n     Please use public-ip-id if that is not the case."))).option("-b, --subnet-id <subnet-id>", $(("the subnet id." + "\n     e.g. /subscriptions/<subscription-id>/resourceGroups/<resource-group-name>/providers/Microsoft.Network/VirtualNetworks/<vnet-name>/subnets/<subnet-name>"))).option("-e, --subnet-name <subnet-name>", $("the subnet name")).option("-m, --vnet-name <vnet-name>", $((("the virtual network name." + "\n     This virtual network must exist in the same resource group as the lb.") + "\n     Please use subnet-id if that is not the case."))).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __19(resourceGroup, lbName, name, options, _) { var networkResourceProviderClient, loadBalancer; var __frame = { name: "__19", line: 411 }; return __func(_, this, arguments, __19, 4, __frame, function __$__19() {



















      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Load balancer name: "), lbName, __cb(_, __frame, 2, 31, function ___(__0, __2) { lbName = __2;
          return cli.interaction.promptIfNotGiven($("Frontend ip configuration name: "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;

            networkResourceProviderClient = getNetworkResourceProviderClient(options);
            loadBalancer = new LoadBalancer(cli, networkResourceProviderClient);
            return loadBalancer.createFrontendIP(resourceGroup, lbName, name, options, __cb(_, __frame, 7, 19, function __$__19() { _(); }, true)); }, true)); }, true)); }, true)); }); });


  lbFrontendIP.command("set [resource-group] [lb-name] [name]").description($("Set a frontend ip configuration of a load balancer")).usage("[options] <resource-group> <lb-name> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-l, --lb-name <lb-name>", $("the name of the load balancer")).option("-n, --name <name>", $("the name of the frontend ip configuration")).option("-a, --private-ip-address <private-ip-address>", $("the private ip address")).option("-u, --public-ip-id [public-ip-id]", $(("the public ip identifier." + "\n     e.g. /subscriptions/<subscription-id>/resourceGroups/<resource-group-name>/providers/Microsoft.Network/publicIPAddresses/<public-ip-name>"))).option("-i, --public-ip-name <public-ip-name>", $((("the public ip name." + "\n     This public ip must exist in the same resource group as the lb.") + "\n     Please use public-ip-id if that is not the case."))).option("-b, --subnet-id [subnet-id]", $(("the subnet id." + "\n     e.g. /subscriptions/<subscription-id>/resourceGroups/<resource-group-name>/providers/Microsoft.Network/VirtualNetworks/<vnet-name>/subnets/<subnet-name>"))).option("-e, --subnet-name <subnet-name>", $("the subnet name")).option("-m, --vnet-name <vnet-name>", $((("the virtual network name." + "\n     This virtual network must exist in the same resource group as the lb.") + "\n     Please use subnet-id if that is not the case."))).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __20(resourceGroup, lbName, name, options, _) { var networkResourceProviderClient, loadBalancer; var __frame = { name: "__20", line: 440 }; return __func(_, this, arguments, __20, 4, __frame, function __$__20() {



















      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Load balancer name: "), lbName, __cb(_, __frame, 2, 31, function ___(__0, __2) { lbName = __2;
          return cli.interaction.promptIfNotGiven($("Frontend ip configuration name: "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;

            networkResourceProviderClient = getNetworkResourceProviderClient(options);
            loadBalancer = new LoadBalancer(cli, networkResourceProviderClient);
            return loadBalancer.setFrontendIP(resourceGroup, lbName, name, options, __cb(_, __frame, 7, 19, function __$__20() { _(); }, true)); }, true)); }, true)); }, true)); }); });


  lbFrontendIP.command("list [resource-group] [lb-name]").description($("Get all frontend ip configurations in the load balancer")).usage("[options] <resource-group> <lb-name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-l, --lb-name <lb-name>", $("the name of the load balancer")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __21(resourceGroup, lbName, options, _) { var networkResourceProviderClient, loadBalancer; var __frame = { name: "__21", line: 456 }; return __func(_, this, arguments, __21, 3, __frame, function __$__21() {






      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Load balancer name: "), lbName, __cb(_, __frame, 2, 31, function ___(__0, __2) { lbName = __2;

          networkResourceProviderClient = getNetworkResourceProviderClient(options);
          loadBalancer = new LoadBalancer(cli, networkResourceProviderClient);
          return loadBalancer.listFrontendIPs(resourceGroup, lbName, options, __cb(_, __frame, 6, 19, function __$__21() { _(); }, true)); }, true)); }, true)); }); });


  lbFrontendIP.command("delete [resource-group] [lb-name] [name]").description($("Delete a frontend ip configuration from a load balancer")).usage("[options] <resource-group> <lb-name> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-l, --lb-name <lb-name>", $("the name of the load balancer")).option("-n, --name <name>", $("the name of the frontend ip configuration")).option("-q, --quiet", $("quiet mode, do not ask for delete confirmation")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __22(resourceGroup, lbName, name, options, _) { var networkResourceProviderClient, loadBalancer; var __frame = { name: "__22", line: 473 }; return __func(_, this, arguments, __22, 4, __frame, function __$__22() {








      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Load balancer name: "), lbName, __cb(_, __frame, 2, 31, function ___(__0, __2) { lbName = __2;
          return cli.interaction.promptIfNotGiven($("Frontend ip configuration name: "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;

            networkResourceProviderClient = getNetworkResourceProviderClient(options);
            loadBalancer = new LoadBalancer(cli, networkResourceProviderClient);
            return loadBalancer.deleteFrontendIP(resourceGroup, lbName, name, options, __cb(_, __frame, 7, 19, function __$__22() { _(); }, true)); }, true)); }, true)); }, true)); }); });


  var lbAddressPool = lb.category("address-pool").description("Commands to manage backend address pools of a load balancer");


  lbAddressPool.command("create [resource-group] [lb-name] [name]").description($("Add an address pool to the load balancer")).usage("[options] <resource-group> <lb-name> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-l, --lb-name <lb-name>", $("the name of the load balancer")).option("-n, --name <name>", $("the name of the backend address pool")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __23(resourceGroup, lbName, name, options, _) { var networkResourceProviderClient, loadBalancer; var __frame = { name: "__23", line: 493 }; return __func(_, this, arguments, __23, 4, __frame, function __$__23() {







      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Load balancer name: "), lbName, __cb(_, __frame, 2, 31, function ___(__0, __2) { lbName = __2;
          return cli.interaction.promptIfNotGiven($("Backend address pool name: "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;

            networkResourceProviderClient = getNetworkResourceProviderClient(options);
            loadBalancer = new LoadBalancer(cli, networkResourceProviderClient);
            return loadBalancer.createBackendAddressPool(resourceGroup, lbName, name, options, __cb(_, __frame, 7, 19, function __$__23() { _(); }, true)); }, true)); }, true)); }, true)); }); });


  lbAddressPool.command("list [resource-group] [lb-name]").description($("Get all address pools in the load balancer")).usage("[options] <resource-group> <lb-name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-l, --lb-name <lb-name>", $("the name of the load balancer")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __24(resourceGroup, lbName, options, _) { var networkResourceProviderClient, loadBalancer; var __frame = { name: "__24", line: 509 }; return __func(_, this, arguments, __24, 3, __frame, function __$__24() {






      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Load balancer name: "), lbName, __cb(_, __frame, 2, 31, function ___(__0, __2) { lbName = __2;

          networkResourceProviderClient = getNetworkResourceProviderClient(options);
          loadBalancer = new LoadBalancer(cli, networkResourceProviderClient);
          return loadBalancer.listBackendAddressPools(resourceGroup, lbName, options, __cb(_, __frame, 6, 19, function __$__24() { _(); }, true)); }, true)); }, true)); }); });


  lbAddressPool.command("delete [resource-group] [lb-name] [name]").description($("Delete an address pool from a load balancer")).usage("[options] <resource-group> <lb-name> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-l, --lb-name <lb-name>", $("the name of the load balancer")).option("-n, --name <name>", $("the name of the backend address pool")).option("-q, --quiet", $("quiet mode, do not ask for delete confirmation")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __25(resourceGroup, lbName, name, options, _) { var networkResourceProviderClient, loadBalancer; var __frame = { name: "__25", line: 526 }; return __func(_, this, arguments, __25, 4, __frame, function __$__25() {








      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Load balancer name: "), lbName, __cb(_, __frame, 2, 31, function ___(__0, __2) { lbName = __2;
          return cli.interaction.promptIfNotGiven($("Backend address pool name: "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;

            networkResourceProviderClient = getNetworkResourceProviderClient(options);
            loadBalancer = new LoadBalancer(cli, networkResourceProviderClient);
            return loadBalancer.deleteBackendAddressPool(resourceGroup, lbName, name, options, __cb(_, __frame, 7, 19, function __$__25() { _(); }, true)); }, true)); }, true)); }, true)); }); });


  var lbRule = lb.category("rule").description($("Commands to manage load balancer rules"));


  lbRule.command("create [resource-group] [lb-name] [name]").description($("Add a load balancing rule to a load balancer")).usage("[options] <resource-group> <lb-name> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-l, --lb-name <lb-name>", $("the name of the load balancer")).option("-n, --name <name>", $("the name of the rule")).option("-p, --protocol <protocol>", $("the rule protocol")).option("-f, --frontend-port <frontend-port>", $("the frontend port")).option("-b, --backend-port <backend-port>", $("the backend port")).option("-e, --enable-floating-ip <enable-floating-ip>", $("enable floating point ip")).option("-i, --idle-timeout <idle-timeout>", $("the idle timeout specified in minutes")).option("-a, --probe-name <probe-name>", $("the name of the probe defined in the same load balancer")).option("-t, --frontend-ip-name <frontend-ip-name>", $("the name of the frontend ip configuration in the same load balancer")).option("-o, --backend-address-pool <backend-address-pool>", $("name of the backend address pool defined in the same load balancer")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __26(resourceGroup, lbName, name, options, _) { var networkResourceProviderClient, loadBalancer; var __frame = { name: "__26", line: 554 }; return __func(_, this, arguments, __26, 4, __frame, function __$__26() {















      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Load balancer name: "), lbName, __cb(_, __frame, 2, 31, function ___(__0, __2) { lbName = __2;
          return cli.interaction.promptIfNotGiven($("Rule name: "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;

            networkResourceProviderClient = getNetworkResourceProviderClient(options);
            loadBalancer = new LoadBalancer(cli, networkResourceProviderClient);
            return loadBalancer.createRule(resourceGroup, lbName, name, options, __cb(_, __frame, 7, 19, function __$__26() { _(); }, true)); }, true)); }, true)); }, true)); }); });


  lbRule.command("set [resource-group] [lb-name] [name]").description($("Set a load balancing rule of a load balancer")).usage("[options] <resource-group> <lb-name> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-l, --lb-name <lb-name>", $("the name of the load balancer")).option("-n, --name <name>", $("the name of the rule")).option("-r, --new-rule-name <new-rule-name>", $("new rule name")).option("-p, --protocol <protocol>", $("the rule protocol")).option("-f, --frontend-port <frontend-port>", $("the frontend port")).option("-b, --backend-port <backend-port>", $("the backend port")).option("-e, --enable-floating-ip <enable-floating-ip>", $("enable floating point ip")).option("-i, --idle-timeout <idle-timeout>", $("the idle timeout specified in minutes")).option("-a, --probe-name [probe-name]", $("the name of the probe defined in the same load balancer")).option("-t, --frontend-ip-name <frontend-ip-name>", $("the name of the frontend ip configuration in the same load balancer")).option("-o, --backend-address-pool <backend-address-pool>", $("name of the backend address pool defined in the same load balancer")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __27(resourceGroup, lbName, name, options, _) { var networkResourceProviderClient, loadBalancer; var __frame = { name: "__27", line: 580 }; return __func(_, this, arguments, __27, 4, __frame, function __$__27() {
















      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Load balancer name: "), lbName, __cb(_, __frame, 2, 31, function ___(__0, __2) { lbName = __2;
          return cli.interaction.promptIfNotGiven($("Rule name: "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;

            networkResourceProviderClient = getNetworkResourceProviderClient(options);
            loadBalancer = new LoadBalancer(cli, networkResourceProviderClient);
            return loadBalancer.setRule(resourceGroup, lbName, name, options, __cb(_, __frame, 7, 19, function __$__27() { _(); }, true)); }, true)); }, true)); }, true)); }); });


  lbRule.command("list [resource-group] [lb-name]").description($("Get all load balancing rules of a load balancer")).usage("[options] <resource-group> <lb-name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-l, --lb-name <lb-name>", $("the name of the load balancer")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __28(resourceGroup, lbName, options, _) { var networkResourceProviderClient, loadBalancer; var __frame = { name: "__28", line: 596 }; return __func(_, this, arguments, __28, 3, __frame, function __$__28() {






      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Load balancer name: "), lbName, __cb(_, __frame, 2, 31, function ___(__0, __2) { lbName = __2;

          networkResourceProviderClient = getNetworkResourceProviderClient(options);
          loadBalancer = new LoadBalancer(cli, networkResourceProviderClient);
          return loadBalancer.listRules(resourceGroup, lbName, options, __cb(_, __frame, 6, 19, function __$__28() { _(); }, true)); }, true)); }, true)); }); });


  lbRule.command("delete [resource-group] [lb-name] [name]").description($("Delete a load balancing rule from a load balancer")).usage("[options] <resource-group> <lb-name> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-l, --lb-name <lb-name>", $("the name of the load balancer")).option("-n, --name <name>", $("the name of the rule")).option("-q, --quiet", $("quiet mode, do not ask for delete confirmation")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __29(resourceGroup, lbName, name, options, _) { var networkResourceProviderClient, loadBalancer; var __frame = { name: "__29", line: 613 }; return __func(_, this, arguments, __29, 4, __frame, function __$__29() {








      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Load balancer name: "), lbName, __cb(_, __frame, 2, 31, function ___(__0, __2) { lbName = __2;
          return cli.interaction.promptIfNotGiven($("Rule name: "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;

            networkResourceProviderClient = getNetworkResourceProviderClient(options);
            loadBalancer = new LoadBalancer(cli, networkResourceProviderClient);
            return loadBalancer.deleteRule(resourceGroup, lbName, name, options, __cb(_, __frame, 7, 19, function __$__29() { _(); }, true)); }, true)); }, true)); }, true)); }); });


  var lbInboundNatRule = lb.category("inbound-nat-rule").description($("Commands to manage load balancer inbound NAT rules"));


  lbInboundNatRule.command("create [resource-group] [lb-name] [name]").description($("Add a load balancing inbound NAT rule to the load balancer")).usage("[options] <resource-group> <lb-name> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-l, --lb-name <lb-name>", $("the name of the load balancer")).option("-n, --name <name>", $("the name of the inbound NAT rule")).option("-p, --protocol <protocol>", util.format($("the rule protocol [%s]"), constants.lb.protocols)).option("-f, --frontend-port <frontend-port>", util.format($("the frontend port %s"), utils.toRange(constants.portBounds))).option("-b, --backend-port <backend-port>", util.format($("the backend port %s"), utils.toRange(constants.portBounds))).option("-e, --enable-floating-ip <enable-floating-ip>", $("enable floating point ip [true,false]")).option("-i, --frontend-ip <frontend-ip>", $("the name of the frontend ip configuration")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __30(resourceGroup, lbName, name, options, _) { var networkResourceProviderClient, loadBalancer; var __frame = { name: "__30", line: 638 }; return __func(_, this, arguments, __30, 4, __frame, function __$__30() {












      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Load balancer name: "), lbName, __cb(_, __frame, 2, 31, function ___(__0, __2) { lbName = __2;
          return cli.interaction.promptIfNotGiven($("Inbound rule name: "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;

            networkResourceProviderClient = getNetworkResourceProviderClient(options);
            loadBalancer = new LoadBalancer(cli, networkResourceProviderClient);
            return loadBalancer.createInboundNatRule(resourceGroup, lbName, name, options, __cb(_, __frame, 7, 19, function __$__30() { _(); }, true)); }, true)); }, true)); }, true)); }); });


  lbInboundNatRule.command("set [resource-group] [lb-name] [name]").usage("[options] <resource-group> <lb-name> <name>").description($("Set a load balancing inbound NAT rule of load balancer")).option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-l, --lb-name <lb-name>", $("the name of the load balancer")).option("-n, --name <name>", $("the name of the inbound NAT rule")).option("-p, --protocol <protocol>", util.format($("the rule protocol [%s]"), constants.lb.protocols)).option("-f, --frontend-port <frontend-port>", util.format($("the frontend port %s"), utils.toRange(constants.portBounds))).option("-b, --backend-port <backend-port>", util.format($("the backend port %s"), utils.toRange(constants.portBounds))).option("-e, --enable-floating-ip <enable-floating-ip>", $("enable floating point ip [true,false]")).option("-i, --frontend-ip <frontend-ip>", $("the name of the frontend ip configuration")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __31(resourceGroup, lbName, name, options, _) { var networkResourceProviderClient, loadBalancer; var __frame = { name: "__31", line: 660 }; return __func(_, this, arguments, __31, 4, __frame, function __$__31() {












      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Load balancer name: "), lbName, __cb(_, __frame, 2, 31, function ___(__0, __2) { lbName = __2;
          return cli.interaction.promptIfNotGiven($("Inbound rule name: "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;

            networkResourceProviderClient = getNetworkResourceProviderClient(options);
            loadBalancer = new LoadBalancer(cli, networkResourceProviderClient);
            return loadBalancer.setInboundNatRule(resourceGroup, lbName, name, options, __cb(_, __frame, 7, 19, function __$__31() { _(); }, true)); }, true)); }, true)); }, true)); }); });


  lbInboundNatRule.command("list [resource-group] [lb-name]").usage("[options] <resource-group> <lb-name>").description($("Get all load balancing inbound NAT rules of load balancer")).option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-l, --lb-name <lb-name>", $("the name of the load balancer")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __32(resourceGroup, lbName, options, _) { var networkResourceProviderClient, loadBalancer; var __frame = { name: "__32", line: 676 }; return __func(_, this, arguments, __32, 3, __frame, function __$__32() {






      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Load balancer name: "), lbName, __cb(_, __frame, 2, 31, function ___(__0, __2) { lbName = __2;

          networkResourceProviderClient = getNetworkResourceProviderClient(options);
          loadBalancer = new LoadBalancer(cli, networkResourceProviderClient);
          return loadBalancer.listInboundNatRules(resourceGroup, lbName, options, __cb(_, __frame, 6, 19, function __$__32() { _(); }, true)); }, true)); }, true)); }); });


  lbInboundNatRule.command("delete [resource-group] [lb-name] [name]").usage("[options] <resource-group> <lb-name> <name>").description($("Delete a load balancing inbound NAT rule from a load balancer")).option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-l, --lb-name <lb-name>", $("the name of the load balancer")).option("-n, --name <name>", $("the name of the inbound NAT rule")).option("-q, --quiet", $("quiet mode, do not ask for delete confirmation")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __33(resourceGroup, lbName, name, options, _) { var networkResourceProviderClient, loadBalancer; var __frame = { name: "__33", line: 693 }; return __func(_, this, arguments, __33, 4, __frame, function __$__33() {








      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Load balancer name: "), lbName, __cb(_, __frame, 2, 31, function ___(__0, __2) { lbName = __2;
          return cli.interaction.promptIfNotGiven($("Inbound rule name: "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;

            networkResourceProviderClient = getNetworkResourceProviderClient(options);
            loadBalancer = new LoadBalancer(cli, networkResourceProviderClient);
            return loadBalancer.deleteInboundNatRule(resourceGroup, lbName, name, options, __cb(_, __frame, 7, 19, function __$__33() { _(); }, true)); }, true)); }, true)); }, true)); }); });


  var lbInboundNatPool = lb.category("inbound-nat-pool").description($("Commands to manage load balancer inbound NAT pools"));


  lbInboundNatPool.command("create [resource-group] [lb-name] [name]").description($("Add a load balancing inbound NAT pool to the load balancer")).usage("[options] <resource-group> <lb-name> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-l, --lb-name <lb-name>", $("the name of the load balancer")).option("-n, --name <name>", $("the name of the inbound NAT pool")).option("-p, --protocol <protocol>", util.format($("the pool protocol [%s]"), constants.lb.protocols)).option("-f, --frontend-port-range-start  <frontend-port-range-start>", util.format($("the frontend port range start %s"), utils.toRange(constants.portBounds))).option("-e, --frontend-port-range-end <frontend-port-range-end>", util.format($("the frontend port range end %s"), utils.toRange(constants.portBounds))).option("-b, --backend-port <backend-port>", $("the backend port")).option("-i, --frontend-ip <frontend-ip>", $("the name of the frontend ip configuration")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __34(resourceGroup, lbName, name, options, _) { var networkResourceProviderClient, loadBalancer; var __frame = { name: "__34", line: 718 }; return __func(_, this, arguments, __34, 4, __frame, function __$__34() {












      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Load balancer name: "), lbName, __cb(_, __frame, 2, 31, function ___(__0, __2) { lbName = __2;
          return cli.interaction.promptIfNotGiven($("Inbound pool name: "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;

            networkResourceProviderClient = getNetworkResourceProviderClient(options);
            loadBalancer = new LoadBalancer(cli, networkResourceProviderClient);
            return loadBalancer.createInboundNatPool(resourceGroup, lbName, name, options, __cb(_, __frame, 7, 19, function __$__34() { _(); }, true)); }, true)); }, true)); }, true)); }); });


  lbInboundNatPool.command("set [resource-group] [lb-name] [name]").usage("[options] <resource-group> <lb-name> <name>").description($("Set a load balancing inbound NAT pool of load balancer")).option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-l, --lb-name <lb-name>", $("the name of the load balancer")).option("-n, --name <name>", $("the name of the inbound NAT pool")).option("-p, --protocol <protocol>", util.format($("the pool protocol [%s]"), constants.lb.protocols)).option("-f, --frontend-port-range-start  <frontend-port-range-start>", util.format($("the frontend port range start %s"), utils.toRange(constants.portBounds))).option("-e, --frontend-port-range-end <frontend-port-range-end>", util.format($("the frontend port range end %s"), utils.toRange(constants.portBounds))).option("-b, --backend-port <backend-port>", $("the backend port")).option("-i, --frontend-ip <frontend-ip>", $("the name of the frontend ip configuration")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __35(resourceGroup, lbName, name, options, _) { var networkResourceProviderClient, loadBalancer; var __frame = { name: "__35", line: 740 }; return __func(_, this, arguments, __35, 4, __frame, function __$__35() {












      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Load balancer name: "), lbName, __cb(_, __frame, 2, 31, function ___(__0, __2) { lbName = __2;
          return cli.interaction.promptIfNotGiven($("Inbound pool name: "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;

            networkResourceProviderClient = getNetworkResourceProviderClient(options);
            loadBalancer = new LoadBalancer(cli, networkResourceProviderClient);
            return loadBalancer.setInboundNatPool(resourceGroup, lbName, name, options, __cb(_, __frame, 7, 19, function __$__35() { _(); }, true)); }, true)); }, true)); }, true)); }); });


  lbInboundNatPool.command("list [resource-group] [lb-name]").usage("[options] <resource-group> <lb-name>").description($("Get all load balancing inbound NAT pools of load balancer")).option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-l, --lb-name <lb-name>", $("the name of the load balancer")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __36(resourceGroup, lbName, options, _) { var networkResourceProviderClient, loadBalancer; var __frame = { name: "__36", line: 756 }; return __func(_, this, arguments, __36, 3, __frame, function __$__36() {






      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Load balancer name: "), lbName, __cb(_, __frame, 2, 31, function ___(__0, __2) { lbName = __2;

          networkResourceProviderClient = getNetworkResourceProviderClient(options);
          loadBalancer = new LoadBalancer(cli, networkResourceProviderClient);
          return loadBalancer.listInboundNatPools(resourceGroup, lbName, options, __cb(_, __frame, 6, 19, function __$__36() { _(); }, true)); }, true)); }, true)); }); });


  lbInboundNatPool.command("delete [resource-group] [lb-name] [name]").usage("[options] <resource-group> <lb-name> <name>").description($("Delete a load balancing inbound NAT pool from a load balancer")).option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-l, --lb-name <lb-name>", $("the name of the load balancer")).option("-n, --name <name>", $("the name of the inbound NAT pool")).option("-q, --quiet", $("quiet mode, do not ask for delete confirmation")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __37(resourceGroup, lbName, name, options, _) { var networkResourceProviderClient, loadBalancer; var __frame = { name: "__37", line: 773 }; return __func(_, this, arguments, __37, 4, __frame, function __$__37() {








      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Load balancer name: "), lbName, __cb(_, __frame, 2, 31, function ___(__0, __2) { lbName = __2;
          return cli.interaction.promptIfNotGiven($("Inbound pool name: "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;

            networkResourceProviderClient = getNetworkResourceProviderClient(options);
            loadBalancer = new LoadBalancer(cli, networkResourceProviderClient);
            return loadBalancer.deleteInboundNatPool(resourceGroup, lbName, name, options, __cb(_, __frame, 7, 19, function __$__37() { _(); }, true)); }, true)); }, true)); }, true)); }); });


  var publicip = network.category("public-ip").description($("Commands to manage public ip addresses"));


  publicip.command("create [resource-group] [name] [location]").description($("Create a public ip")).usage("[options] <resource-group> <name> <location>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the public ip")).option("-l, --location <location>", $("the location")).option("-d, --domain-name-label <domain-name-label>", $(("the domain name label." + "\n     This set DNS to <domain-name-label>.<location>.cloudapp.azure.com"))).option("-a, --allocation-method <allocation-method>", $("the allocation method [Static][Dynamic]")).option("-i, --idletimeout <idletimeout>", $("the idle timeout specified in minutes")).option("-f, --reverse-fqdn <reverse-fqdn>", $("the reverse fqdn")).option("-t, --tags <tags>", $(((("the list of tags." + "\n     Can be multiple. In the format of \"name=value\".") + "\n     Name is required and value is optional.") + "\n     For example, -t \"tag1=value1;tag2\""))).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __38(resourceGroup, name, location, options, _) { var networkResourceProviderClient, publicip; var __frame = { name: "__38", line: 802 }; return __func(_, this, arguments, __38, 4, __frame, function __$__38() {
















      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Public IP name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;
          return cli.interaction.promptIfNotGiven($("Location: "), location, __cb(_, __frame, 3, 41, function ___(__0, __3) { options.location = __3;

            networkResourceProviderClient = getNetworkResourceProviderClient(options);
            publicip = new PublicIp(cli, networkResourceProviderClient);
            return publicip.create(resourceGroup, name, options, __cb(_, __frame, 7, 15, function __$__38() { _(); }, true)); }, true)); }, true)); }, true)); }); });


  publicip.command("set [resource-group] [name]").description($("Set a public ip")).usage("[options] <resource-group> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the public ip")).option("-d, --domain-name-label [domain-name-label]", $(("the domain name label." + "\n     This set DNS to <domain-name-label>.<location>.cloudapp.azure.com"))).option("-a, --allocation-method <allocation-method>", $("the allocation method [Static][Dynamic]")).option("-i, --idletimeout <idletimeout>", $("the idle timeout specified in minutes")).option("-f, --reverse-fqdn [reverse-fqdn]", $("the reverse fqdn")).option("-t, --tags <tags>", $((((("the list of tags." + "\n     Can be multiple. In the format of \"name=value\".") + "\n     Name is required and value is optional.") + "\n     Existing tag values will be replaced by the values specified.") + "\n     For example, -t \"tag1=value1;tag2\""))).option("--no-tags", $("remove all existing tags")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __39(resourceGroup, name, options, _) { var networkResourceProviderClient, publicip; var __frame = { name: "__39", line: 829 }; return __func(_, this, arguments, __39, 3, __frame, function __$__39() {

















      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Public ip address name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;

          networkResourceProviderClient = getNetworkResourceProviderClient(options);
          publicip = new PublicIp(cli, networkResourceProviderClient);
          return publicip.set(resourceGroup, name, options, __cb(_, __frame, 6, 15, function __$__39() { _(); }, true)); }, true)); }, true)); }); });


  publicip.command("list [resource-group]").description($("Get all public ips")).usage("[options] <resource-group>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __40(resourceGroup, options, _) { var networkResourceProviderClient, publicip; var __frame = { name: "__40", line: 843 }; return __func(_, this, arguments, __40, 2, __frame, function __$__40() {





      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;

        networkResourceProviderClient = getNetworkResourceProviderClient(options);
        publicip = new PublicIp(cli, networkResourceProviderClient);
        return publicip.list(resourceGroup, options, __cb(_, __frame, 5, 15, function __$__40() { _(); }, true)); }, true)); }); });


  publicip.command("show [resource-group] [name]").description($("Get a public ip")).usage("[options] <resource-group> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the public IP")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __41(resourceGroup, name, options, _) { var networkResourceProviderClient, publicip; var __frame = { name: "__41", line: 857 }; return __func(_, this, arguments, __41, 3, __frame, function __$__41() {






      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Public IP name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;

          networkResourceProviderClient = getNetworkResourceProviderClient(options);
          publicip = new PublicIp(cli, networkResourceProviderClient);
          return publicip.show(resourceGroup, name, options, __cb(_, __frame, 6, 15, function __$__41() { _(); }, true)); }, true)); }, true)); }); });


  publicip.command("delete [resource-group] [name]").description($("Delete a public ip")).usage("[options] <resource-group> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the public IP")).option("-q, --quiet", $("quiet mode, do not ask for delete confirmation")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __42(resourceGroup, name, options, _) { var networkResourceProviderClient, publicip; var __frame = { name: "__42", line: 873 }; return __func(_, this, arguments, __42, 3, __frame, function __$__42() {







      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Public IP name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;

          networkResourceProviderClient = getNetworkResourceProviderClient(options);
          publicip = new PublicIp(cli, networkResourceProviderClient);
          return publicip.delete(resourceGroup, name, options, __cb(_, __frame, 6, 15, function __$__42() { _(); }, true)); }, true)); }, true)); }); });


  var nic = network.category("nic").description($("Commands to manage network interfaces"));


  nic.command("create [resource-group] [name] [location]").description($("Create a network interface")).usage("[options] <resource-group> <name> <location>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the network interface")).option("-l, --location <location>", $("the location")).option("-w, --network-security-group-id <network-security-group-id>", $(("the network security group identifier." + "\n     e.g. /subscriptions/<subscription-id>/resourceGroups/<resource-group-name>/providers/Microsoft.Network/networkSecurityGroups/<nsg-name>"))).option("-o, --network-security-group-name <network-security-group-name>", $((("the network security group name." + "\n     This network security group must exist in the same resource group as the nic.") + "\n     Please use network-security-group-id if that is not the case."))).option("-i, --public-ip-id <public-ip-id>", $(("the public IP identifier." + "\n     e.g. /subscriptions/<subscription-id>/resourceGroups/<resource-group-name>/providers/Microsoft.Network/publicIPAddresses/<public-ip-name>"))).option("-p, --public-ip-name <public-ip-name>", $((("the public IP name." + "\n     This public ip must exist in the same resource group as the nic.") + "\n     Please use public-ip-id if that is not the case."))).option("-a, --private-ip-address <private-ip-address>", $("the private IP address")).option("-u, --subnet-id <subnet-id>", $(("the subnet identifier." + "\n     e.g. /subscriptions/<subscription-id>/resourceGroups/<resource-group-name>/providers/Microsoft.Network/virtualNetworks/<vnet-name>/subnets/<subnet-name>"))).option("-k, --subnet-name <subnet-name>", $("the subnet name")).option("-m, --subnet-vnet-name <subnet-vnet-name>", $("the vnet name under which subnet-name exists")).option("-d, --lb-address-pool-ids <lb-address-pool-ids>", $(("the comma separated list of load balancer address pool identifiers" + "\n     e.g. /subscriptions/<subscription-id>/resourceGroups/<resource-group-name>/providers/Microsoft.Network/loadbalancers/<lb-name>/backendAddressPools/<address-pool-name>"))).option("-e, --lb-inbound-nat-rule-ids <lb-inbound-nat-rule-ids>", $(("the comma separated list of load balancer inbound NAT rule identifiers" + "\n     e.g. /subscriptions/<subscription-id>/resourceGroups/<resource-group-name>/providers/Microsoft.Network/loadbalancers/<lb-name>/inboundNatRules/<nat-rule-name>"))).option("-r, --internal-dns-name-label <internal-dns-name-label>", $("the internal DNS name label")).option("-f, --enable-ip-forwarding <enable-ip-forwarding>", $("the ip forwarding, valid values are [true, false]")).option("-t, --tags <tags>", $(((("the comma seperated list of tags." + "\n     Can be multiple. In the format of \"name=value\".") + "\n     Name is required and value is optional.") + "\n     For example, -t \"tag1=value1;tag2\""))).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __43(resourceGroup, name, location, options, _) { var serviceClients, nic; var __frame = { name: "__43", line: 917 }; return __func(_, this, arguments, __43, 4, __frame, function __$__43() {
































      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Network interface name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;
          return cli.interaction.promptIfNotGiven($("Location: "), location, __cb(_, __frame, 3, 41, function ___(__0, __3) { options.location = __3;

            serviceClients = getServiceClients(options);
            nic = new Nic(cli, serviceClients);
            return nic.create(resourceGroup, name, options, __cb(_, __frame, 7, 10, function __$__43() { _(); }, true)); }, true)); }, true)); }, true)); }); });


  nic.command("set [resource-group] [name]").description($("Set a network interface")).usage("[options] <resource-group> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the network interface")).option("-w, --network-security-group-id [network-security-group-id]>", $(("the network security group identifier." + "\n     e.g. /subscriptions/<subscription-id>/resourceGroups/<resource-group-name>/providers/Microsoft.Network/networkSecurityGroups/<nsg-name>"))).option("-o, --network-security-group-name <network-security-group-name>", $((("the network security group name." + "\n     This network security group must exist in the same resource group as the nic.") + "\n     Please use network-security-group-id if that is not the case."))).option("-i, --public-ip-id [public-ip-id]", $(("the public IP identifier." + "\n     e.g. /subscriptions/<subscription-id>/resourceGroups/<resource-group-name>/providers/Microsoft.Network/publicIPAddresses/<public-ip-name>"))).option("-p, --public-ip-name <public-ip-name>", $((("the public IP name." + "\n     This public ip must exist in the same resource group as the nic.") + "\n     Please use public-ip-id if that is not the case."))).option("-a, --private-ip-address <private-ip-address>", $("the private IP address")).option("-u, --subnet-id <subnet-id>", $(("the subnet identifier." + "\n     e.g. /subscriptions/<subscription-id>/resourceGroups/<resource-group-name>/providers/Microsoft.Network/virtualNetworks/<vnet-name>/subnets/<subnet-name>"))).option("-k, --subnet-name <subnet-name>", $("the subnet name")).option("-m, --subnet-vnet-name <subnet-vnet-name>", $("the vnet name under which subnet-name exists")).option("-d, --lb-address-pool-ids [lb-address-pool-ids]", $(("the comma separated list of load balancer address pool identifiers" + "\n     e.g. /subscriptions/<subscription-id>/resourceGroups/<resource-group-name>/providers/Microsoft.Network/loadbalancers/<lb-name>/backendAddressPools/<address-pool-name>"))).option("-e, --lb-inbound-nat-rule-ids [lb-inbound-nat-rule-ids]", $(("the comma separated list of load balancer inbound NAT rule identifiers" + "\n     e.g. /subscriptions/<subscription-id>/resourceGroups/<resource-group-name>/providers/Microsoft.Network/loadbalancers/<lb-name>/inboundNatRules/<nat-rule-name>"))).option("-r, --internal-dns-name-label <internal-dns-name-label>", $("the internal DNS name label")).option("-f, --enable-ip-forwarding <enable-ip-forwarding>", $("the ip forwarding, valid values are [true, false]")).option("-t, --tags <tags>", $((((("the list of tags." + "\n     Can be multiple. In the format of \"name=value\".") + "\n     Name is required and value is optional.") + "\n     Existing tag values will be replaced by the values specified.") + "\n     For example, -t \"tag1=value1;tag2\""))).option("--no-tags", $("remove all existing tags")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __44(resourceGroup, name, options, _) { var serviceClients, nic; var __frame = { name: "__44", line: 960 }; return __func(_, this, arguments, __44, 3, __frame, function __$__44() {

































      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Network interface name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;

          serviceClients = getServiceClients(options);
          nic = new Nic(cli, serviceClients);
          return nic.set(resourceGroup, name, options, __cb(_, __frame, 6, 10, function __$__44() { _(); }, true)); }, true)); }, true)); }); });


  nic.command("list [resource-group]").description($("Get all network interfaces")).usage("[options] <resource-group>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-m, --virtual-machine-scale-set <virtual-machine-scale-set>", $("the name of the virtual machine scale set")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __45(resourceGroup, options, _) { var serviceClients, nic; var __frame = { name: "__45", line: 975 }; return __func(_, this, arguments, __45, 2, __frame, function __$__45() {






      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;

        serviceClients = getServiceClients(options);
        nic = new Nic(cli, serviceClients);
        return nic.list(resourceGroup, options, __cb(_, __frame, 5, 10, function __$__45() { _(); }, true)); }, true)); }); });


  nic.command("show [resource-group] [name]").description($("Get a network interface")).usage("[options] <resource-group> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the network interface")).option("-m, --virtual-machine-scale-set <virtual-machine-scale-set>", $("the name of the virtual machine scale set")).option("-i, --virtual-machine-index <virtual-machine-index>", $("the index of virtual machine in scale set")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __46(resourceGroup, name, options, _) { var serviceClients, nic; var __frame = { name: "__46", line: 991 }; return __func(_, this, arguments, __46, 3, __frame, function __$__46() {








      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Network interface name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;

          serviceClients = getServiceClients(options);
          nic = new Nic(cli, serviceClients);
          return nic.show(resourceGroup, name, options, __cb(_, __frame, 6, 10, function __$__46() { _(); }, true)); }, true)); }, true)); }); });


  nic.command("delete [resource-group] [name]").description($("Delete a network interface")).usage("[options] <resource-group> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the network interface")).option("-q, --quiet", $("quiet mode, do not ask for delete confirmation")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __47(resourceGroup, name, options, _) { var serviceClients, nic; var __frame = { name: "__47", line: 1007 }; return __func(_, this, arguments, __47, 3, __frame, function __$__47() {







      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Network interface name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;

          serviceClients = getServiceClients(options);
          nic = new Nic(cli, serviceClients);
          return nic.delete(resourceGroup, name, options, __cb(_, __frame, 6, 10, function __$__47() { _(); }, true)); }, true)); }, true)); }); });


  var nicAddressPool = nic.category("address-pool").description($("Commands to manage backend address pools of the network interface"));


  nicAddressPool.command("add [resource-group] [name]").description($("Add a backend address pool to a NIC")).option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the network interface")).option("-i, --lb-address-pool-id  <lb-address-pool-id>", $(("the load balancer address pool identifier" + "\n   e.g. /subscriptions/<subscription-id>/resourceGroups/<resource-group-name>/providers/Microsoft.Network/loadbalancers/<lb-name>/backendAddressPools/<address-pool-name>"))).option("-l, --lb-name <lb-name>", $(((("the load balancer name." + "\n   This load balancer must exists in the same resource group as the NIC.") + "\n   Please use --lb-address-pool-id if that is not the case.") + "\n   This parameter will be ignored if --lb-address-pool-id is specified"))).option("-a, --address-pool-name <address-pool-name>", $(("the name of the address pool that exists in the load balancer identified by --lb-name" + "\n   This parameter will be ignored if --lb-address-pool-id is specified"))).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __48(resourceGroup, name, options, _) { var serviceClients, nic; var __frame = { name: "__48", line: 1032 }; return __func(_, this, arguments, __48, 3, __frame, function __$__48() {













      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Network interface name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;

          serviceClients = getServiceClients(options);
          nic = new Nic(cli, serviceClients);
          return nic.addAddressPool(resourceGroup, name, options, __cb(_, __frame, 6, 10, function __$__48() { _(); }, true)); }, true)); }, true)); }); });


  nicAddressPool.command("remove [resource-group] [name]").description($("Remove a backend address pool from a NIC")).option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the network interface")).option("-i, --lb-address-pool-id  <lb-address-pool-id>", $(("the load balancer address pool identifier" + "\n   e.g. /subscriptions/<subscription-id>/resourceGroups/<resource-group-name>/providers/Microsoft.Network/loadbalancers/<lb-name>/backendAddressPools/<address-pool-name>"))).option("-l, --lb-name <lb-name>", $(((("the load balancer name." + "\n   This load balancer must exist in the same resource group as the NIC.") + "\n   Please use --lb-address-pool-id if that is not the case.") + "\n   This parameter will be ignored if --lb-address-pool-id is specified"))).option("-a, --address-pool-name <address-pool-name>", $(("the name of the address pool that exists in the load balancer identified by --lb-name" + "\n   This parameter will be ignored if --lb-address-pool-id is specified"))).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __49(resourceGroup, name, options, _) { var serviceClients, nic; var __frame = { name: "__49", line: 1054 }; return __func(_, this, arguments, __49, 3, __frame, function __$__49() {













      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Network interface name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;

          serviceClients = getServiceClients(options);
          nic = new Nic(cli, serviceClients);
          return nic.removeAddressPool(resourceGroup, name, options, __cb(_, __frame, 6, 10, function __$__49() { _(); }, true)); }, true)); }, true)); }); });


  var nicInboundRule = nic.category("inbound-nat-rule").description($("Commands to manage inbound rules of the network interface"));


  nicInboundRule.command("add [resource-group] [name]").description($("Add an inbound NAT rule to a NIC")).option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the network interface")).option("-i, --inbound-nat-rule-id <inbound-nat-rule-id>", $(("the inbound NAT rule identifier." + "\n   e.g. /subscriptions/<subscription-id>/resourceGroups/<resource-group-name>/providers/Microsoft.Network/loadbalancers/<lb-name>/inboundNatRules/<nat-rule-name>"))).option("-l, --lb-name <lb-name>", $(((("the load balancer name." + "\n   This load balancer must exists in the same resource group as the NIC.") + "\n   Please use --inbound-nat-rule-id if that is not the case.") + "\n   This parameter will be ignored if --inbound-nat-rule-id is specified"))).option("-r, --inbound-nat-rule-name <inbound-nat-rule-name>", $("the name of the NAT rule that exists in the load balancer identified by --lb-name")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __50(resourceGroup, name, options, _) { var serviceClients, nic; var __frame = { name: "__50", line: 1078 }; return __func(_, this, arguments, __50, 3, __frame, function __$__50() {












      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Network interface name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;

          serviceClients = getServiceClients(options);
          nic = new Nic(cli, serviceClients);
          return nic.addInboundRule(resourceGroup, name, options, __cb(_, __frame, 6, 10, function __$__50() { _(); }, true)); }, true)); }, true)); }); });


  nicInboundRule.command("remove [resource-group] [name]").description($("Remove an inbound NAT rule from a NIC")).option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the network interface")).option("-i, --inbound-nat-rule-id <inbound-nat-rule-id>", $(("the inbound NAT rule identifier." + "\n   e.g. /subscriptions/<subscription-id>/resourceGroups/<resource-group-name>/providers/Microsoft.Network/loadbalancers/<lb-name>/inboundNatRules/<nat-rule-name>"))).option("-l, --lb-name <lb-name>", $(((("the load balancer name." + "\n   This load balancer must exists in the same resource group as the NIC.") + "\n   Please use --inbound-nat-rule-id if that is not the case.") + "\n   This parameter will be ignored if --inbound-nat-rule-id is specified"))).option("-r, --inbound-nat-rule-name <inbound-nat-rule-name>", $("the name of the NAT rule that exists in the load balancer identified by --lb-name")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __51(resourceGroup, name, options, _) { var serviceClients, nic; var __frame = { name: "__51", line: 1099 }; return __func(_, this, arguments, __51, 3, __frame, function __$__51() {












      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Network interface name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;

          serviceClients = getServiceClients(options);
          nic = new Nic(cli, serviceClients);
          return nic.removeInboundRule(resourceGroup, name, options, __cb(_, __frame, 6, 10, function __$__51() { _(); }, true)); }, true)); }, true)); }); });


  var nsg = network.category("nsg").description($("Commands to manage network security groups"));


  nsg.command("create [resource-group] [name] [location]").description($("Create a network security group")).usage("[options] <resource-group> <name> <location>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the network security group")).option("-l, --location <location>", $("the location")).option("-t, --tags <tags>", $(((("the list of tags." + "\n     Can be multiple. In the format of \"name=value\".") + "\n     Name is required and value is optional.") + "\n     For example, -t \"tag1=value1;tag2\""))).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __52(resourceGroup, name, location, options, _) { var networkResourceProviderClient, nsg; var __frame = { name: "__52", line: 1122 }; return __func(_, this, arguments, __52, 4, __frame, function __$__52() {











      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Network security group name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;
          return cli.interaction.promptIfNotGiven($("Location: "), location, __cb(_, __frame, 3, 33, function ___(__0, __3) { location = __3;

            networkResourceProviderClient = getNetworkResourceProviderClient(options);
            nsg = new Nsg(cli, networkResourceProviderClient);
            return nsg.create(resourceGroup, name, location, options, __cb(_, __frame, 7, 10, function __$__52() { _(); }, true)); }, true)); }, true)); }, true)); }); });


  nsg.command("set [resource-group] [name]").description($("Set a network security group")).usage("[options] <resource-group> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the network security group")).option("-t, --tags <tags>", $((((("the list of tags." + "\n     Can be multiple. In the format of \"name=value\".") + "\n     Name is required and value is optional.") + "\n     Existing tag values will be replaced by the values specified.") + "\n     For example, -t \"tag1=value1;tag2\""))).option("--no-tags", $("remove all existing tags")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __53(resourceGroup, name, options, _) { var networkResourceProviderClient, nsg; var __frame = { name: "__53", line: 1144 }; return __func(_, this, arguments, __53, 3, __frame, function __$__53() {












      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Network security group name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;

          networkResourceProviderClient = getNetworkResourceProviderClient(options);
          nsg = new Nsg(cli, networkResourceProviderClient);
          return nsg.set(resourceGroup, name, options, __cb(_, __frame, 6, 10, function __$__53() { _(); }, true)); }, true)); }, true)); }); });


  nsg.command("list [resource-group]").description($("Get all network security groups")).usage("[options] <resource-group>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __54(resourceGroup, options, _) { var networkResourceProviderClient, nsg; var __frame = { name: "__54", line: 1158 }; return __func(_, this, arguments, __54, 2, __frame, function __$__54() {





      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;

        networkResourceProviderClient = getNetworkResourceProviderClient(options);
        nsg = new Nsg(cli, networkResourceProviderClient);
        return nsg.list(resourceGroup, options, __cb(_, __frame, 5, 10, function __$__54() { _(); }, true)); }, true)); }); });


  nsg.command("show [resource-group] [name]").description($("Get a network security group")).usage("[options] <resource-group> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the network security group")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __55(resourceGroup, name, options, _) { var networkResourceProviderClient, nsg; var __frame = { name: "__55", line: 1172 }; return __func(_, this, arguments, __55, 3, __frame, function __$__55() {






      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Network security group name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;

          networkResourceProviderClient = getNetworkResourceProviderClient(options);
          nsg = new Nsg(cli, networkResourceProviderClient);
          return nsg.show(resourceGroup, name, options, __cb(_, __frame, 6, 10, function __$__55() { _(); }, true)); }, true)); }, true)); }); });


  nsg.command("delete [resource-group] [name]").description($("Delete a network security group")).usage("[options] <resource-group> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the network security group")).option("-q, --quiet", $("quiet mode, do not ask for delete confirmation")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __56(resourceGroup, name, options, _) { var networkResourceProviderClient, nsg; var __frame = { name: "__56", line: 1188 }; return __func(_, this, arguments, __56, 3, __frame, function __$__56() {







      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Network security group name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;

          networkResourceProviderClient = getNetworkResourceProviderClient(options);
          nsg = new Nsg(cli, networkResourceProviderClient);
          return nsg.delete(resourceGroup, name, options, __cb(_, __frame, 6, 10, function __$__56() { _(); }, true)); }, true)); }, true)); }); });


  var nsgRules = nsg.category("rule").description($("Commands to manage network security group rules"));


  nsgRules.command("create [resource-group] [nsg-name] [name]").description($("Create a network security group rule")).usage("[options] <resource-group> <nsg-name> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-a, --nsg-name <nsg-name>", $("the name of the network security group")).option("-n, --name <name>", $("the name of the rule")).option("-d, --description <description>", $("the description")).option("-p, --protocol <protocol>", util.format($("the protocol [%s]"), constants.nsg.protocols)).option("-f, --source-address-prefix <source-address-prefix>", $("the source address prefix")).option("-o, --source-port-range <source-port-range>", util.format($("the source port range [%s-%s]"), constants.nsg.portMin, constants.nsg.portMax)).option("-e, --destination-address-prefix <destination-address-prefix>", $("the destination address prefix")).option("-u, --destination-port-range <destination-port-range>", util.format($("the destination port range [%s-%s]"), constants.nsg.portMin, constants.nsg.portMax)).option("-c, --access <access>", util.format($("the access mode [%s]"), constants.nsg.access)).option("-y, --priority <priority>", util.format($("the priority [%s-%s]"), constants.nsg.priorityMin, constants.nsg.priorityMax)).option("-r, --direction <direction>", util.format($("the direction [%s]"), constants.nsg.direction)).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __57(resourceGroup, nsgName, name, options, _) { var networkResourceProviderClient, nsg; var __frame = { name: "__57", line: 1216 }; return __func(_, this, arguments, __57, 4, __frame, function __$__57() {
















      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Network security group name: "), nsgName, __cb(_, __frame, 2, 32, function ___(__0, __2) { nsgName = __2;
          return cli.interaction.promptIfNotGiven($("The name of the security rule: "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;

            networkResourceProviderClient = getNetworkResourceProviderClient(options);
            nsg = new Nsg(cli, networkResourceProviderClient);
            return nsg.createRule(resourceGroup, nsgName, name, options, __cb(_, __frame, 7, 10, function __$__57() { _(); }, true)); }, true)); }, true)); }, true)); }); });


  nsgRules.command("set [resource-group] [nsg-name] [name]").description($("Set a network security group rule")).usage("[options] <resource-group> <nsg-name> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-a, --nsg-name <nsg-name>", $("the name of the network security group")).option("-n, --name <name>", $("the name of the rule")).option("-d, --description <description>", $("the description")).option("-p, --protocol <protocol>", util.format($("the protocol [%s]"), constants.nsg.protocols)).option("-f, --source-address-prefix <source-address-prefix>", $("the source address prefix")).option("-o, --source-port-range <source-port-range>", util.format($("the source port range [%s-%s]"), constants.nsg.portMin, constants.nsg.portMax)).option("-e, --destination-address-prefix <destination-address-prefix>", $("the destination address prefix")).option("-u, --destination-port-range <destination-port-range>", util.format($("the destination port range [%s-%s]"), constants.nsg.portMin, constants.nsg.portMax)).option("-c, --access <access>", util.format($("the access mode [%s]"), constants.nsg.access)).option("-y, --priority <priority>", util.format($("the priority [%s-%s]"), constants.nsg.priorityMin, constants.nsg.priorityMax)).option("-r, --direction <direction>", util.format($("the direction [%s]"), constants.nsg.direction)).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __58(resourceGroup, nsgName, name, options, _) { var networkResourceProviderClient, nsg; var __frame = { name: "__58", line: 1242 }; return __func(_, this, arguments, __58, 4, __frame, function __$__58() {
















      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Network security group name: "), nsgName, __cb(_, __frame, 2, 32, function ___(__0, __2) { nsgName = __2;
          return cli.interaction.promptIfNotGiven($("The name of the security rule: "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;

            networkResourceProviderClient = getNetworkResourceProviderClient(options);
            nsg = new Nsg(cli, networkResourceProviderClient);
            return nsg.setRule(resourceGroup, nsgName, name, options, __cb(_, __frame, 7, 10, function __$__58() { _(); }, true)); }, true)); }, true)); }, true)); }); });


  nsgRules.command("list [resource-group] [nsg-name]").description($("Get all rules in a network security group")).usage("[options] <resource-group> <nsg-name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-a, --nsg-name <nsg-name>", $("the name of the network security group")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __59(resourceGroup, nsgName, options, _) { var networkResourceProviderClient, nsg; var __frame = { name: "__59", line: 1258 }; return __func(_, this, arguments, __59, 3, __frame, function __$__59() {






      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Network security group name: "), nsgName, __cb(_, __frame, 2, 32, function ___(__0, __2) { nsgName = __2;

          networkResourceProviderClient = getNetworkResourceProviderClient(options);
          nsg = new Nsg(cli, networkResourceProviderClient);
          return nsg.listRules(resourceGroup, nsgName, options, __cb(_, __frame, 6, 10, function __$__59() { _(); }, true)); }, true)); }, true)); }); });


  nsgRules.command("show [resource-group] [nsg-name] [name]").description($("Get a rule in a network security group")).usage("[options] <resource-group> <nsg-name> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-a, --nsg-name <nsg-name>", $("the name of the network security group")).option("-n, --name <name>", $("the name of the rule")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __60(resourceGroup, nsgName, name, options, _) { var networkResourceProviderClient, nsg; var __frame = { name: "__60", line: 1274 }; return __func(_, this, arguments, __60, 4, __frame, function __$__60() {







      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Network security group name: "), nsgName, __cb(_, __frame, 2, 32, function ___(__0, __2) { nsgName = __2;
          return cli.interaction.promptIfNotGiven($("Rule name: "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;

            networkResourceProviderClient = getNetworkResourceProviderClient(options);
            nsg = new Nsg(cli, networkResourceProviderClient);
            return nsg.showRule(resourceGroup, nsgName, name, options, __cb(_, __frame, 7, 10, function __$__60() { _(); }, true)); }, true)); }, true)); }, true)); }); });


  nsgRules.command("delete [resource-group] [nsg-name] [name]").description($("Delete a rule in a network security group")).usage("[options] <resource-group> <nsg-name> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-a, --nsg-name <nsg-name>", $("the name of the network security group")).option("-n, --name <name>", $("the name of the rule")).option("-q, --quiet", $("quiet mode, do not ask for delete confirmation")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __61(resourceGroup, nsgName, name, options, _) { var networkResourceProviderClient, nsg; var __frame = { name: "__61", line: 1292 }; return __func(_, this, arguments, __61, 4, __frame, function __$__61() {








      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Network security group name: "), nsgName, __cb(_, __frame, 2, 32, function ___(__0, __2) { nsgName = __2;
          return cli.interaction.promptIfNotGiven($("Rule name: "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;

            networkResourceProviderClient = getNetworkResourceProviderClient(options);
            nsg = new Nsg(cli, networkResourceProviderClient);
            return nsg.deleteRule(resourceGroup, nsgName, name, options, __cb(_, __frame, 7, 10, function __$__61() { _(); }, true)); }, true)); }, true)); }, true)); }); });


  var dns = network.category("dns").description($("Commands to manage DNS"));


  var dnsZone = dns.category("zone").description($("Commands to manage DNS zone"));


  dnsZone.command("create [resource-group] [name]").description($("Create a DNS zone")).usage("[options] <resource-group> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the DNS zone")).option("-t, --tags <tags>", $(((("the list of tags." + "\n     Can be multiple. In the format of \"name=value\".") + "\n     Name is required and value is optional.") + "\n     For example, -t \"tag1=value1;tag2\""))).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __62(resourceGroup, name, options, _) { var dnsManagementClient, dnsZone; var __frame = { name: "__62", line: 1318 }; return __func(_, this, arguments, __62, 3, __frame, function __$__62() {










      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("DNS zone name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;

          dnsManagementClient = getDnsManagementClient(options);
          dnsZone = new DnsZone(cli, dnsManagementClient);
          return dnsZone.create(resourceGroup, name, options, __cb(_, __frame, 6, 14, function __$__62() { _(); }, true)); }, true)); }, true)); }); });


  dnsZone.command("set [resource-group] [name]").description($("Set a DNS zone")).usage("[options] <resource-group> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the DNS zone")).option("-t, --tags <tags>", $((((("the list of tags." + "\n     Can be multiple. In the format of \"name=value\".") + "\n     Name is required and value is optional.") + "\n     Existing tag values will be replaced by the values specified.") + "\n     For example, -t \"tag1=value1;tag2\""))).option("--no-tags", $("remove all existing tags")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __63(resourceGroup, name, options, _) { var dnsManagementClient, dnsZone; var __frame = { name: "__63", line: 1339 }; return __func(_, this, arguments, __63, 3, __frame, function __$__63() {












      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("DNS zone name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;

          dnsManagementClient = getDnsManagementClient(options);
          dnsZone = new DnsZone(cli, dnsManagementClient);
          return dnsZone.set(resourceGroup, name, options, __cb(_, __frame, 6, 14, function __$__63() { _(); }, true)); }, true)); }, true)); }); });


  dnsZone.command("list [resource-group]").description($("Get all DNS zones")).usage("[options] <resource-group>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __64(resourceGroup, options, _) { var dnsManagementClient, dnsZone; var __frame = { name: "__64", line: 1353 }; return __func(_, this, arguments, __64, 2, __frame, function __$__64() {





      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;

        dnsManagementClient = getDnsManagementClient(options);
        dnsZone = new DnsZone(cli, dnsManagementClient);
        return dnsZone.list(resourceGroup, options, __cb(_, __frame, 5, 14, function __$__64() { _(); }, true)); }, true)); }); });


  dnsZone.command("show [resource-group] [name]").description($("Get a DNS zone")).usage("[options] <resource-group> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $(("the name of the DNS zone" + "\n   You can specify \"*\" (in quotes) for this parameter"))).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __65(resourceGroup, name, options, _) { var dnsManagementClient, dnsZone; var __frame = { name: "__65", line: 1368 }; return __func(_, this, arguments, __65, 3, __frame, function __$__65() {







      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("DNS zone name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;

          dnsManagementClient = getDnsManagementClient(options);
          dnsZone = new DnsZone(cli, dnsManagementClient);
          return dnsZone.show(resourceGroup, name, options, __cb(_, __frame, 6, 14, function __$__65() { _(); }, true)); }, true)); }, true)); }); });


  dnsZone.command("delete [resource-group] [name]").description($("Delete a DNS zone")).usage("[options] <resource-group> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the DNS zone")).option("-s, --subscription <subscription>", $("the subscription identifier")).option("-q, --quiet", $("quiet mode, do not ask for delete confirmation")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __66(resourceGroup, name, options, _) { var dnsManagementClient, dnsZone; var __frame = { name: "__66", line: 1385 }; return __func(_, this, arguments, __66, 3, __frame, function __$__66() {








      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("DNS zone name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;

          dnsManagementClient = getDnsManagementClient(options);
          dnsZone = new DnsZone(cli, dnsManagementClient);
          return dnsZone.delete(resourceGroup, name, options, __cb(_, __frame, 6, 14, function __$__66() { _(); }, true)); }, true)); }, true)); }); });


  dnsZone.command("import [resource-group] [name] [file-name]").description($("Import a DNS zone")).usage("[options] <resource-group> <name> <file-name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the DNS zone")).option("-f, --file-name <file-name>", $("the name of the zone file")).option("--force", $("force overwrite of existing record sets. Otherwise, records are merged with existing record sets")).option("--debug", $("output debug info")).option("--parse-only", $("parse zone file only, without import")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __67(resourceGroup, name, fileName, options, _) { var dnsManagementClient, dnsZone; var __frame = { name: "__67", line: 1404 }; return __func(_, this, arguments, __67, 4, __frame, function __$__67() {










      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("DNS zone name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;
          return cli.interaction.promptIfNotGiven($("Zone file name: "), fileName, __cb(_, __frame, 3, 41, function ___(__0, __3) { options.fileName = __3;

            dnsManagementClient = getDnsManagementClient(options);
            dnsZone = new DnsZone(cli, dnsManagementClient);
            return dnsZone.import(resourceGroup, name, options, __cb(_, __frame, 7, 14, function __$__67() { _(); }, true)); }, true)); }, true)); }, true)); }); });


  var dnsRecordSet = dns.category("record-set").description($("Commands to manage record sets in DNS zone"));


  dnsRecordSet.command("create [resource-group] [dns-zone-name] [name] [type]").description($("Create a DNS zone record set")).usage("[options] <resource-group> <dns-zone-name> <name> <type>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-z, --dns-zone-name <dns-zone-name>", $("the name of the DNS zone")).option("-n, --name <name>", $("the relative name of the record set within the DNS zone")).option("-y, --type <type>", $(("the type of the record set." + "\n     Valid values are [A, AAAA, CNAME, MX, NS, SOA, SRV, TXT, PTR]"))).option("-l, --ttl <ttl>", $("time to live specified in seconds")).option("-t, --tags <tags>", $(((("the tags set on this virtual network." + "\n     Can be multiple. In the format of \"name=value\".") + "\n     Name is required and value is optional.") + "\n     For example, -t \"tag1=value1;tag2\""))).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __68(resourceGroup, dnsZoneName, name, type, options, _) { var dnsManagementClient, dnsZone; var __frame = { name: "__68", line: 1431 }; return __func(_, this, arguments, __68, 5, __frame, function __$__68() {














      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("DNS zone name: "), dnsZoneName, __cb(_, __frame, 2, 36, function ___(__0, __2) { dnsZoneName = __2;
          return cli.interaction.promptIfNotGiven($("Record set name: "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;
            return cli.interaction.promptIfNotGiven($("Type: "), type, __cb(_, __frame, 4, 37, function ___(__0, __4) { options.type = __4;

              dnsManagementClient = getDnsManagementClient(options);
              dnsZone = new DnsZone(cli, dnsManagementClient);
              return dnsZone.createRecordSet(resourceGroup, dnsZoneName, name, options, __cb(_, __frame, 8, 14, function __$__68() { _(); }, true)); }, true)); }, true)); }, true)); }, true)); }); });


  dnsRecordSet.command("set [resource-group] [dns-zone-name] [name] [type]").description($("Set a DNS zone record set")).usage("[options] <resource-group> <dns-zone-name> <name> <type>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-z, --dns-zone-name <dns-zone-name>", $("the name of the DNS zone")).option("-n, --name <name>", $("the relative name of the record set within the DNS zone")).option("-y, --type <type>", $(("the type of the record set." + "\n     Valid values are [A, AAAA, CNAME, MX, NS, SOA, SRV, TXT, PTR]"))).option("-l, --ttl <ttl>", $("time to live specified in seconds")).option("-t, --tags <tags>", $((((("the tags set on this virtual network." + "\n     Can be multiple. In the format of \"name=value\".") + "\n     Name is required and value is optional.") + "\n     Existing tag values will be replaced by the values specified.") + "\n     For example, -t \"tag1=value1;tag2\""))).option("--no-tags", $("remove all existing tags")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __69(resourceGroup, dnsZoneName, name, type, options, _) { var dnsManagementClient, dnsZone; var __frame = { name: "__69", line: 1458 }; return __func(_, this, arguments, __69, 5, __frame, function __$__69() {
















      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("DNS zone name: "), dnsZoneName, __cb(_, __frame, 2, 36, function ___(__0, __2) { dnsZoneName = __2;
          return cli.interaction.promptIfNotGiven($("Record set name: "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;
            return cli.interaction.promptIfNotGiven($("Type: "), type, __cb(_, __frame, 4, 37, function ___(__0, __4) { options.type = __4;

              dnsManagementClient = getDnsManagementClient(options);
              dnsZone = new DnsZone(cli, dnsManagementClient);
              return dnsZone.setRecordSet(resourceGroup, dnsZoneName, name, options, __cb(_, __frame, 8, 14, function __$__69() { _(); }, true)); }, true)); }, true)); }, true)); }, true)); }); });


  dnsRecordSet.command("list [resource-group] [dns-zone-name] [type]").description($("Get all record sets in a DNS zone")).usage("[options] <resource-group> <dns-zone-name> [type]").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-z, --dns-zone-name <dns-zone-name>", $("the name of the DNS zone")).option("-y, --type <type>", $((("the type of the record set." + "\n     If specified only record sets of this type will be listed.") + "\n     Valid values are [A, AAAA, CNAME, MX, NS, SOA, SRV, TXT, PTR]"))).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __70(resourceGroup, dnsZoneName, type, options, _) { var dnsManagementClient, dnsZone; var __frame = { name: "__70", line: 1478 }; return __func(_, this, arguments, __70, 4, __frame, function __$__70() {









      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("DNS zone name: "), dnsZoneName, __cb(_, __frame, 2, 36, function ___(__0, __2) { dnsZoneName = __2;
          options.type = (type || options.type);

          dnsManagementClient = getDnsManagementClient(options);
          dnsZone = new DnsZone(cli, dnsManagementClient);
          return dnsZone.listRecordSets(resourceGroup, dnsZoneName, options, __cb(_, __frame, 7, 14, function __$__70() { _(); }, true)); }, true)); }, true)); }); });


  dnsRecordSet.command("show [resource-group] [dns-zone-name] [name] [type]").description($("Get a record set in a DNS zone")).usage("[options] <resource-group> <dns-zone-name> <name> <type>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-z, --dns-zone-name <dns-zone-name>", $("the name of the DNS zone")).option("-n, --name <name>", $("the relative name of the record set within the DNS zone")).option("-y, --type <type>", $(("the type of the record set." + "\n     Valid values are [A, AAAA, CNAME, MX, NS, SOA, SRV, TXT, PTR]"))).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __71(resourceGroup, dnsZoneName, name, type, options, _) { var dnsManagementClient, dnsZone; var __frame = { name: "__71", line: 1497 }; return __func(_, this, arguments, __71, 5, __frame, function __$__71() {









      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("DNS zone name: "), dnsZoneName, __cb(_, __frame, 2, 36, function ___(__0, __2) { dnsZoneName = __2;
          return cli.interaction.promptIfNotGiven($("Record set name: "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;
            return cli.interaction.promptIfNotGiven($("Type: "), type, __cb(_, __frame, 4, 37, function ___(__0, __4) { options.type = __4;

              dnsManagementClient = getDnsManagementClient(options);
              dnsZone = new DnsZone(cli, dnsManagementClient);
              return dnsZone.showRecordSet(resourceGroup, dnsZoneName, name, options, __cb(_, __frame, 8, 14, function __$__71() { _(); }, true)); }, true)); }, true)); }, true)); }, true)); }); });


  dnsRecordSet.command("delete [resource-group] [dns-zone-name] [name] [type]").description($("Delete a record set from a DNS zone")).usage("[options] <resource-group> <dns-zone-name> <name> <type>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-z, --dns-zone-name <dns-zone-name>", $("the name of the DNS zone")).option("-n, --name <name>", $("the relative name of the record set within the DNS zone")).option("-y, --type <type>", $((("the type of the record set." + "\n     If specified only record sets of this type will be listed.") + "\n     Valid values are [A, AAAA, CNAME, MX, NS, SOA, SRV, TXT, PTR]"))).option("-q, --quiet", $("quiet mode, do not ask for delete confirmation")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __72(resourceGroup, dnsZoneName, name, type, options, _) { var dnsManagementClient, dnsZone; var __frame = { name: "__72", line: 1519 }; return __func(_, this, arguments, __72, 5, __frame, function __$__72() {











      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("DNS zone name: "), dnsZoneName, __cb(_, __frame, 2, 36, function ___(__0, __2) { dnsZoneName = __2;
          return cli.interaction.promptIfNotGiven($("Record set name: "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;
            return cli.interaction.promptIfNotGiven($("Type: "), type, __cb(_, __frame, 4, 37, function ___(__0, __4) { options.type = __4;

              dnsManagementClient = getDnsManagementClient(options);
              dnsZone = new DnsZone(cli, dnsManagementClient);
              return dnsZone.deleteRecordSet(resourceGroup, dnsZoneName, name, options, __cb(_, __frame, 8, 14, function __$__72() { _(); }, true)); }, true)); }, true)); }, true)); }, true)); }); });


  dnsRecordSet.command("add-record [resource-group] [dns-zone-name] [record-set-name] [type]").description($("Add a record in a record set under a DNS zone")).usage("[options] <resource-group> <dns-zone-name> <record-set-name> <type>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-z, --dns-zone-name <dns-zone-name>", $("the name of the DNS zone")).option("-n, --record-set-name <record-set-name>", $("the name of the record set")).option("-y, --type <type>", $(((("the type of the record set." + "\n     If specified only record sets of this type will be listed.") + "\n     Valid values are [A, AAAA, CNAME, MX, NS, SOA, SRV, TXT, PTR]") + "\n\nThe record type A \n\n"))).option("-a  --ipv4-address <ipv4-address>", $(("the IPv4 address attribute\n\n" + "Record type AAAA \n\n"))).option("-b  --ipv6-address <ipv6-address>", $(("the IPv6 address attribute\n\n" + "Record type CNAME\n\n"))).option("-c  --cname <cname>", $(("the canonical name (target)\n\n" + "Record type NS\n\n"))).option("-d  --nsdname <nsdname>", $(("the domain name attribute\n\n" + "Record type MX\n\n"))).option("-f, --preference <preference>", $("preference attribute")).option("-e, --exchange <exchange>", $(("exchange attribute\n\n" + "Record type SRV\n\n"))).option("-p, --priority <priority>", $("the priority attribute")).option("-w, --weight <weight>", $("the weight attribute")).option("-o, --port <port>", $("the port")).option("-u, --target <target>", $(("the target attribute\n\n" + "Record type TXT\n\n"))).option("-x, --text <text>", $(("the text attribute\n\n" + "Record type SOA\n\n"))).option("-l, --email <email>", $("the email attribute")).option("-i, --expire-time <expire-time>", $("the expire time specified in seconds")).option("-S, --serial-number <serial-number>", $("the serial number")).option("-k, --host <host>", $("the host name attribute")).option("-m, --minimum-ttl <minimum-ttl>", $("the minimum time to live specified in seconds")).option("-r, --refresh-time <refresh-time>", $("the refresh time specified in seconds")).option("-j, --retry-time <retry-time>", $(("the retry time specified in seconds" + "\n\nRecord type PTR \n\n"))).option("-P, --ptrd-name <ptrd-name>", $("ptr domain name\n\n")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __73(resourceGroup, dnsZoneName, recordSetName, type, options, _) { var dnsManagementClient, dnsZone; var __frame = { name: "__73", line: 1568 }; return __func(_, this, arguments, __73, 5, __frame, function __$__73() {






































      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("DNS zone name: "), dnsZoneName, __cb(_, __frame, 2, 36, function ___(__0, __2) { dnsZoneName = __2;
          return cli.interaction.promptIfNotGiven($("Record set name: "), recordSetName, __cb(_, __frame, 3, 38, function ___(__0, __3) { recordSetName = __3;
            return cli.interaction.promptIfNotGiven($("Type: "), type, __cb(_, __frame, 4, 37, function ___(__0, __4) { options.type = __4;

              dnsManagementClient = getDnsManagementClient(options);
              dnsZone = new DnsZone(cli, dnsManagementClient);
              return dnsZone.promptRecordParameters(options.type, options, __cb(_, __frame, 8, 14, function __$__73() {
                return dnsZone.addRecord(resourceGroup, dnsZoneName, recordSetName, options, __cb(_, __frame, 9, 14, function __$__73() { _(); }, true)); }, true)); }, true)); }, true)); }, true)); }, true)); }); });


  dnsRecordSet.command("delete-record [resource-group] [dns-zone-name] [record-set-name] [type]").description($("Delete a record from a record set under a DNS zone")).usage("[options] <resource-group> <dns-zone> <record-set-name> <type>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-z, --dns-zone-name <dns-zone-name>", $("the name of the DNS zone")).option("-n, --record-set-name <record-set-name>", $("the name of the record set")).option("-y, --type <type>", $(((("the type of the record set." + "\n     If specified only record sets of this type will be listed.") + "\n     Valid values are [A, AAAA, CNAME, MX, NS, SOA, SRV, TXT, PTR]") + "\n\nThe record type A \n\n"))).option("-a  --ipv4-address <ipv4-address>", $(("the IPv4 address attribute\n\n" + "Record type AAAA \n\n"))).option("-b  --ipv6-address <ipv6-address>", $(("the IPv6 address attribute\n\n" + "Record type CNAME\n\n"))).option("-c  --cname <cname>", $(("the canonical name (target)\n\n" + "Record type NS\n\n"))).option("-d  --nsdname <nsdname>", $(("the domain name attribute\n\n" + "Record type MX\n\n"))).option("-f, --preference <preference>", $("preference attribute")).option("-e, --exchange <exchange>", $(("exchange attribute\n\n" + "Record type SRV\n\n"))).option("-p, --priority <priority>", $("the priority attribute")).option("-w, --weight <weight>", $("the weight attribute")).option("-o, --port <port>", $("the port")).option("-u, --target <target>", $(("the target attribute\n\n" + "Record type TXT\n\n"))).option("-x, --text <text>", $(("the text attribute" + "\n\nRecord type PTR \n\n"))).option("-P, --ptrd-name <ptrd-name>", $("ptr domain name\n\n")).option("-q, --quiet", $("quiet mode, do not ask for delete confirmation")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __74(resourceGroup, dnsZoneName, recordSetName, type, options, _) { var dnsManagementClient, dnsZone; var __frame = { name: "__74", line: 1611 }; return __func(_, this, arguments, __74, 5, __frame, function __$__74() {































      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("DNS zone name: "), dnsZoneName, __cb(_, __frame, 2, 36, function ___(__0, __2) { dnsZoneName = __2;
          return cli.interaction.promptIfNotGiven($("Record set name: "), recordSetName, __cb(_, __frame, 3, 38, function ___(__0, __3) { recordSetName = __3;
            return cli.interaction.promptIfNotGiven($("Type: "), type, __cb(_, __frame, 4, 37, function ___(__0, __4) { options.type = __4;

              dnsManagementClient = getDnsManagementClient(options);
              dnsZone = new DnsZone(cli, dnsManagementClient);
              return dnsZone.promptRecordParameters(options.type, options, __cb(_, __frame, 8, 14, function __$__74() {
                return dnsZone.deleteRecord(resourceGroup, dnsZoneName, recordSetName, options, __cb(_, __frame, 9, 14, function __$__74() { _(); }, true)); }, true)); }, true)); }, true)); }, true)); }, true)); }); });


  var trafficManager = network.category("traffic-manager").description($("Commands to manage Traffic Manager"));


  var trafficManagerProfile = trafficManager.category("profile").description($("Commands to manage Traffic Manager profile"));


  trafficManagerProfile.command("create [resource-group] [name]").description($("Create a Traffic Manager profile")).usage("[options] <resource-group> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the profile")).option("-u, --profile-status <profile-status> ", util.format($(("the profile status, valid values are" + "\n     [%s], default is %s")), constants.trafficManager.status, constants.trafficManager.status[0])).option("-m, --traffic-routing-method <traffic-routing-method>", util.format($(("the traffic routing method for the profile," + "\n     valid values are [%s], default is %s")), constants.trafficManager.routingMethod, constants.trafficManager.routingMethod[0])).option("-r, --relative-dns-name <relative-dns-name>", $("relative DNS name of the profile e.g. .trafficmanager.net")).option("-l  --ttl <ttl>", $("time to live in specified in seconds")).option("-p, --monitor-protocol <monitor-protocol>", util.format($(("the monitor protocol, valid values are" + "\n     [%s], default is %s")), constants.trafficManager.protocols, constants.trafficManager.protocols[0])).option("-o, --monitor-port <monitor-port>", $("the monitoring port")).option("-a, --monitor-path <monitor-path>", $("the monitoring path")).option("-t, --tags <tags>", $(((("the tags set on this profile. Can be " + "\n     multiple, in the format of 'name=value'.") + "\n     Name is required and value is optional. ") + "\n     For example, -t \"tag1=value1;tag2\""))).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __75(resourceGroup, name, options, _) { var trafficManagerProviderClient, trafficManager; var __frame = { name: "__75", line: 1649 }; return __func(_, this, arguments, __75, 3, __frame, function __$__75() {




















      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Profile name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;
          return cli.interaction.promptIfNotGiven($("Relative DNS name of the profile, e.g. .trafficmanager.net: "), options.relativeDnsName, __cb(_, __frame, 3, 48, function ___(__0, __3) { options.relativeDnsName = __3;
            return cli.interaction.promptIfNotGiven($("Monitor path: "), options.monitorPath, __cb(_, __frame, 4, 44, function ___(__0, __4) { options.monitorPath = __4;

              trafficManagerProviderClient = getTrafficManagementClient(options);
              trafficManager = new TrafficManager(cli, trafficManagerProviderClient);
              return trafficManager.create(resourceGroup, name, options, __cb(_, __frame, 8, 21, function __$__75() { _(); }, true)); }, true)); }, true)); }, true)); }, true)); }); });


  trafficManagerProfile.command("set [resource-group] [name]").description($("Set a Traffic Manager profile")).usage("[options] <resource-group> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the profile")).option("-u, --profile-status <profile-status> ", util.format($(("the profile status, valid values are" + "\n     [%s], default is %s")), constants.trafficManager.status, constants.trafficManager.status[0])).option("-m, --traffic-routing-method <traffic-routing-method>", util.format($(("the traffic routing method for the profile," + "\n     valid values are [%s], default is %s")), constants.trafficManager.routingMethod, constants.trafficManager.routingMethod[0])).option("-l  --ttl <ttl>", $("time to live specified in seconds")).option("-p, --monitor-protocol <monitor-protocol>", util.format($(("the monitor protocol, valid values are" + "\n     [%s], default is %s")), constants.trafficManager.protocols, constants.trafficManager.protocols[0])).option("-o, --monitor-port <monitor-port>", $("the monitoring port")).option("-a, --monitor-path <monitor-path>", $("the monitoring path")).option("-t, --tags <tags>", $((((("the tags set on this profile. Can be " + "\n     multiple, in the format of 'name=value'.") + "\n     Name is required and value is optional. ") + "\n     Existing tag values will be replaced by the values specified.") + "\n     For example, -t \"tag1=value1;tag2\""))).option("--no-tags", $("remove all existing tags")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __76(resourceGroup, name, options, _) { var trafficManagerProviderClient, trafficManager; var __frame = { name: "__76", line: 1681 }; return __func(_, this, arguments, __76, 3, __frame, function __$__76() {





















      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Profile name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;

          trafficManagerProviderClient = getTrafficManagementClient(options);
          trafficManager = new TrafficManager(cli, trafficManagerProviderClient);
          return trafficManager.set(resourceGroup, name, options, __cb(_, __frame, 6, 21, function __$__76() { _(); }, true)); }, true)); }, true)); }); });


  trafficManagerProfile.command("list [resource-group]").description($("Get all Traffic Manager profiles")).usage("[options] <resource-group>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __77(resourceGroup, options, _) { var trafficManagerProviderClient, trafficManager; var __frame = { name: "__77", line: 1695 }; return __func(_, this, arguments, __77, 2, __frame, function __$__77() {





      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;

        trafficManagerProviderClient = getTrafficManagementClient(options);
        trafficManager = new TrafficManager(cli, trafficManagerProviderClient);
        return trafficManager.list(resourceGroup, options, __cb(_, __frame, 5, 21, function __$__77() { _(); }, true)); }, true)); }); });


  trafficManagerProfile.command("show [resource-group] [name]").description($("Get a Traffic Manager profile")).usage("[options] <resource-group> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the profile")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __78(resourceGroup, name, options, _) { var trafficManagerProviderClient, trafficManager; var __frame = { name: "__78", line: 1709 }; return __func(_, this, arguments, __78, 3, __frame, function __$__78() {






      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Profile name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;

          trafficManagerProviderClient = getTrafficManagementClient(options);
          trafficManager = new TrafficManager(cli, trafficManagerProviderClient);
          return trafficManager.show(resourceGroup, name, options, __cb(_, __frame, 6, 21, function __$__78() { _(); }, true)); }, true)); }, true)); }); });


  trafficManagerProfile.command("delete [resource-group] [name]").description($("Delete a Traffic Manager profile")).usage("[options] <resource-group> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the profile")).option("-q, --quiet", $("quiet mode, do not ask for delete confirmation")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __79(resourceGroup, name, options, _) { var trafficManagerProviderClient, trafficManager; var __frame = { name: "__79", line: 1725 }; return __func(_, this, arguments, __79, 3, __frame, function __$__79() {







      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Profile name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;

          trafficManagerProviderClient = getTrafficManagementClient(options);
          trafficManager = new TrafficManager(cli, trafficManagerProviderClient);
          return trafficManager.delete(resourceGroup, name, options, __cb(_, __frame, 6, 21, function __$__79() { _(); }, true)); }, true)); }, true)); }); });


  trafficManagerProfile.command("is-dns-available [resource-group] [relative-dns-name]").description($("Checks whether the specified DNS prefix is available for creating a Traffic Manager profile")).usage("[options] <resource-group> <relative-dns-name> ").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --relative-dns-name <relative-dns-name>", $("the relative DNS name to check for availability")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __80(resourceGroup, relativeDnsName, options, _) { var trafficManagerProviderClient, trafficManager; var __frame = { name: "__80", line: 1740 }; return __func(_, this, arguments, __80, 3, __frame, function __$__80() {






      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Relative DNS name: "), relativeDnsName, __cb(_, __frame, 2, 40, function ___(__0, __2) { relativeDnsName = __2;

          trafficManagerProviderClient = getTrafficManagementClient(options);
          trafficManager = new TrafficManager(cli, trafficManagerProviderClient);
          return trafficManager.checkDnsAvailability(resourceGroup, relativeDnsName, options, __cb(_, __frame, 6, 21, function __$__80() { _(); }, true)); }, true)); }, true)); }); });


  var trafficManagerEndpoint = trafficManagerProfile.category("endpoint").description($("Commands to manage Traffic Manager endpoints"));


  trafficManagerEndpoint.command("create [resource-group] [profile-name] [name] [endpoint-location]").description($("Create an endpoint in Traffic Manager profile")).usage("[options] <resource-group> <profile-name> <name> <endpoint-location>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-f, --profile-name <profile-name>", $("the profile name")).option("-n, --name <name>", $("the name of the endpoint")).option("-l, --endpoint-location <endpoint-location>", $("the location of the endpoint")).option("-y, --type <type>", util.format($(((("the endpoint type, valid values are:" + "\n       [%s], where externalEndpoint represents endpoint") + "\n       for a service with FQDN external to Azure") + "\n       e.g. foobar.contoso.com")), constants.trafficManager.endpointType)).option("-e, --target <target>", $(("the domain name target of the endpoint," + "\n       e.g. foobar.contoso.com"))).option("-u, --endpoint-status <endpoint-status>", util.format($(("the endpoint status, valid values are:" + "\n       [%s] Default is %s")), constants.trafficManager.status, constants.trafficManager.status[0])).option("-w, --weight <weight>", $("the endpoint weight used in the load balancing algorithm")).option("-p, --priority <priority>", $(("the endpoint priority used in the load balancing algorithm," + "\n       valid range is [1, 1000]"))).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __81(resourceGroup, profileName, name, endpointLocation, options, _) { var trafficManagerProviderClient, trafficManager; var __frame = { name: "__81", line: 1771 }; return __func(_, this, arguments, __81, 5, __frame, function __$__81() {



















      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Profile name: "), profileName, __cb(_, __frame, 2, 36, function ___(__0, __2) { profileName = __2;
          return cli.interaction.promptIfNotGiven($("Endpoint name: "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;
            return cli.interaction.promptIfNotGiven($("Endpoint location: "), endpointLocation, __cb(_, __frame, 4, 49, function ___(__0, __4) { options.endpointLocation = __4;
              return cli.interaction.promptIfNotGiven($("Endpoint target: "), options.target, __cb(_, __frame, 5, 39, function ___(__0, __5) { options.target = __5;

                trafficManagerProviderClient = getTrafficManagementClient(options);
                trafficManager = new TrafficManager(cli, trafficManagerProviderClient);
                return trafficManager.createEndpoint(resourceGroup, profileName, name, options, __cb(_, __frame, 9, 21, function __$__81() { _(); }, true)); }, true)); }, true)); }, true)); }, true)); }, true)); }); });


  trafficManagerEndpoint.command("set [resource-group] [profile-name] [name]").description($("Set an endpoint in a Traffic Manager profile")).usage("[options] <resource-group> <profile-name> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-f, --profile-name <profile-name>", $("the profile name")).option("-n, --name <name>", $("the name of the endpoint")).option("-y, --type <type>", util.format($(((("the endpoint type, valid values are:" + "\n       [%s], where externalEndpoint represents endpoint") + "\n       for a service with FQDN external to Azure") + "\n       e.g. foobar.contoso.com")), constants.trafficManager.endpointType)).option("-e, --target <target>", $(("the domain name target of the endpoint," + "\n       e.g. foobar.contoso.com"))).option("-u, --endpoint-status <endpoint-status>", util.format($(("the endpoint status, valid values are:" + "\n       [%s] Default is %s")), constants.trafficManager.status, constants.trafficManager.status[0])).option("-w, --weight <weight>", $("the endpoint weight used in the load balancing algorithm")).option("-p, --priority <priority>", $(("the endpoint priority used in the load balancing algorithm," + "\n       valid range is [1, 1000]"))).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __82(resourceGroup, profileName, name, options, _) { var trafficManagerProviderClient, trafficManager; var __frame = { name: "__82", line: 1801 }; return __func(_, this, arguments, __82, 4, __frame, function __$__82() {


















      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Profile name: "), profileName, __cb(_, __frame, 2, 36, function ___(__0, __2) { profileName = __2;
          return cli.interaction.promptIfNotGiven($("Endpoint name: "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;

            trafficManagerProviderClient = getTrafficManagementClient(options);
            trafficManager = new TrafficManager(cli, trafficManagerProviderClient);
            return trafficManager.setEndpoint(resourceGroup, profileName, name, options, __cb(_, __frame, 7, 21, function __$__82() { _(); }, true)); }, true)); }, true)); }, true)); }); });


  trafficManagerEndpoint.command("delete [resource-group] [profile-name] [name]").description($("Delete an endpoint from a Traffic Manager profile")).usage("[options] <resource-group> <profile-name> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-f, --profile-name <profile-name>", $("the profile name")).option("-n, --name <name>", $("the name of the endpoint")).option("-q, --quiet", $("quiet mode, do not ask for delete confirmation")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __83(resourceGroup, profileName, name, options, _) { var trafficManagerProviderClient, trafficManager; var __frame = { name: "__83", line: 1819 }; return __func(_, this, arguments, __83, 4, __frame, function __$__83() {








      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Profile name: "), profileName, __cb(_, __frame, 2, 36, function ___(__0, __2) { profileName = __2;
          return cli.interaction.promptIfNotGiven($("Endpoint name: "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;

            trafficManagerProviderClient = getTrafficManagementClient(options);
            trafficManager = new TrafficManager(cli, trafficManagerProviderClient);
            return trafficManager.deleteEndpoint(resourceGroup, profileName, name, options, __cb(_, __frame, 7, 21, function __$__83() { _(); }, true)); }, true)); }, true)); }, true)); }); });


  var routeTable = network.category("route-table").description($("Commands to manage Route Table"));


  routeTable.command("create [resource-group] [name] [location]").description($("Create a Route Table")).usage("[options] <resource-group> <name> <location>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the Route Table")).option("-l, --location <location>", $("the location, this must be same as the location of the virtual network containing the subnet(s) on which this Route Table needs to be applied")).option("-t, --tags <tags>", $((("the list of tags." + "\n     Can be multiple. In the format of \"name=value\".") + "\n     Name is required and value is optional. For example, -t \"tag1=value1;tag2\""))).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __84(resourceGroup, name, location, options, _) { var networkResourceProviderClient, routeTable; var __frame = { name: "__84", line: 1842 }; return __func(_, this, arguments, __84, 4, __frame, function __$__84() {










      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Route Table name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;
          return cli.interaction.promptIfNotGiven($("Location: "), location, __cb(_, __frame, 3, 33, function ___(__0, __3) { location = __3;

            networkResourceProviderClient = getNetworkResourceProviderClient(options);
            routeTable = new RouteTable(cli, networkResourceProviderClient);
            return routeTable.create(resourceGroup, name, location, options, __cb(_, __frame, 7, 17, function __$__84() { _(); }, true)); }, true)); }, true)); }, true)); }); });


  routeTable.command("show [resource-group] [name]").description($("Get a Route Table")).usage("[options] <resource-group> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the Route Table")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __85(resourceGroup, name, options, _) { var networkResourceProviderClient, routeTable; var __frame = { name: "__85", line: 1858 }; return __func(_, this, arguments, __85, 3, __frame, function __$__85() {






      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Route Table name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;

          networkResourceProviderClient = getNetworkResourceProviderClient(options);
          routeTable = new RouteTable(cli, networkResourceProviderClient);
          return routeTable.show(resourceGroup, name, options, __cb(_, __frame, 6, 17, function __$__85() { _(); }, true)); }, true)); }, true)); }); });


  routeTable.command("list [resource-group]").description($("Get all Route Tables")).usage("[options] <resource-group>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __86(resourceGroup, options, _) { var networkResourceProviderClient, routeTable; var __frame = { name: "__86", line: 1872 }; return __func(_, this, arguments, __86, 2, __frame, function __$__86() {





      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;

        networkResourceProviderClient = getNetworkResourceProviderClient(options);
        routeTable = new RouteTable(cli, networkResourceProviderClient);
        return routeTable.list(resourceGroup, options, __cb(_, __frame, 5, 17, function __$__86() { _(); }, true)); }, true)); }); });


  routeTable.command("delete [resource-group] [name]").description($("Delete a Route Table")).usage("[options] <resource-group> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the Route Table")).option("-q, --quiet", $("quiet mode, do not ask for delete confirmation")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __87(resourceGroup, name, options, _) { var networkResourceProviderClient, routeTable; var __frame = { name: "__87", line: 1887 }; return __func(_, this, arguments, __87, 3, __frame, function __$__87() {







      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Route Table name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;

          networkResourceProviderClient = getNetworkResourceProviderClient(options);
          routeTable = new RouteTable(cli, networkResourceProviderClient);
          return routeTable.delete(resourceGroup, name, options, __cb(_, __frame, 6, 17, function __$__87() { _(); }, true)); }, true)); }, true)); }); });


  var route = routeTable.category("route").description($("Commands to manage Route Table routes"));


  route.command("create [resource-group] [route-table-name] [name] [address-prefix] [next-hop-type]").description($("Create route in a Route Table")).usage("[options] <resource-group> <route-table-name> <name> <address-prefix> <next-hop-type>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-r, --route-table-name <route-table-name>", $("the name of the Route Table")).option("-n, --name <name>", $("the name of the route")).option("-a, --address-prefix <address-prefix>", $("the route address prefix e.g. 0.0.0.0/0")).option("-y, --next-hop-type <next-hop-type>", util.format($(("the route next hop type, valid values are:" + "\n       [%s]")), constants.route.nextHopType)).option("-p, --next-hop-ip-address <next-hop-ip-address>", $(("the route next hop ip addresses, this parameter is valid" + "\n       only for next hop type VirtualAppliance"))).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __88(resourceGroup, routeTableName, name, addressPrefix, nextHopType, options, _) { var networkResourceProviderClient, routeTable; var __frame = { name: "__88", line: 1911 }; return __func(_, this, arguments, __88, 6, __frame, function __$__88() {












      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Route Table name: "), routeTableName, __cb(_, __frame, 2, 39, function ___(__0, __2) { routeTableName = __2;
          return cli.interaction.promptIfNotGiven($("Route name: "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;
            return cli.interaction.promptIfNotGiven($("Address prefix: "), addressPrefix, __cb(_, __frame, 4, 46, function ___(__0, __4) { options.addressPrefix = __4;
              return cli.interaction.promptIfNotGiven($("Next hop type: "), nextHopType, __cb(_, __frame, 5, 44, function ___(__0, __5) { options.nextHopType = __5;

                networkResourceProviderClient = getNetworkResourceProviderClient(options);
                routeTable = new RouteTable(cli, networkResourceProviderClient);
                return routeTable.createRoute(resourceGroup, routeTableName, name, options, __cb(_, __frame, 9, 17, function __$__88() { _(); }, true)); }, true)); }, true)); }, true)); }, true)); }, true)); }); });


  route.command("set [resource-group] [route-table-name] [name]").description($("Set route in a Route Table")).usage("[options] <resource-group> <route-table-name> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-r, --route-table-name <route-table-name>", $("the name of the Route Table")).option("-n, --name <name>", $("the name of the route")).option("-a, --address-prefix <address-prefix>", $("the route address prefix e.g. 0.0.0.0/0")).option("-y, --next-hop-type <next-hop-type>", util.format($(("the route next hop type, valid values are:" + "\n       [%s]")), constants.route.nextHopType)).option("-p, --next-hop-ip-address <next-hop-ip-address>", $(("the route next hop ip addresses, this parameter is valid" + "\n       only for next hop type VirualAppliance"))).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __89(resourceGroup, routeTableName, name, options, _) { var networkResourceProviderClient, routeTable; var __frame = { name: "__89", line: 1935 }; return __func(_, this, arguments, __89, 4, __frame, function __$__89() {












      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Route Table name: "), routeTableName, __cb(_, __frame, 2, 39, function ___(__0, __2) { routeTableName = __2;
          return cli.interaction.promptIfNotGiven($("Route name: "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;

            networkResourceProviderClient = getNetworkResourceProviderClient(options);
            routeTable = new RouteTable(cli, networkResourceProviderClient);
            return routeTable.setRoute(resourceGroup, routeTableName, name, options, __cb(_, __frame, 7, 17, function __$__89() { _(); }, true)); }, true)); }, true)); }, true)); }); });


  route.command("list [resource-group] [route-table-name]").description($("List all routes in a Route Table")).usage("[options] <resource-group> <route-table-name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-r, --route-table-name <route-table-name>", $("the name of the Route Table")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __90(resourceGroup, routeTableName, options, _) { var networkResourceProviderClient, routeTable; var __frame = { name: "__90", line: 1951 }; return __func(_, this, arguments, __90, 3, __frame, function __$__90() {






      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Route Table name: "), routeTableName, __cb(_, __frame, 2, 39, function ___(__0, __2) { routeTableName = __2;

          networkResourceProviderClient = getNetworkResourceProviderClient(options);
          routeTable = new RouteTable(cli, networkResourceProviderClient);
          return routeTable.listRoutes(resourceGroup, routeTableName, options, __cb(_, __frame, 6, 17, function __$__90() { _(); }, true)); }, true)); }, true)); }); });


  route.command("show [resource-group] [route-table-name] [name]").description($("Show details about route in a Route Table")).usage("[options] <resource-group> <route-table-name> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-r, --route-table-name <route-table-name>", $("the name of the Route Table")).option("-n, --name <name>", $("the name of the route")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __91(resourceGroup, routeTableName, name, options, _) { var networkResourceProviderClient, routeTable; var __frame = { name: "__91", line: 1967 }; return __func(_, this, arguments, __91, 4, __frame, function __$__91() {







      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Route Table name: "), routeTableName, __cb(_, __frame, 2, 39, function ___(__0, __2) { routeTableName = __2;
          return cli.interaction.promptIfNotGiven($("Route name: "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;

            networkResourceProviderClient = getNetworkResourceProviderClient(options);
            routeTable = new RouteTable(cli, networkResourceProviderClient);
            return routeTable.showRoute(resourceGroup, routeTableName, name, options, __cb(_, __frame, 7, 17, function __$__91() { _(); }, true)); }, true)); }, true)); }, true)); }); });


  route.command("delete [resource-group] [route-table-name] [name]").description($("Delete route from a Route Table")).usage("[options] <resource-group> <route-table-name> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-r, --route-table-name <route-table-name>", $("the name of the Route Table")).option("-n, --name <name>", $("the name of the route")).option("-q, --quiet", $("quiet mode, do not ask for delete confirmation")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __92(resourceGroup, routeTableName, name, options, _) { var networkResourceProviderClient, routeTable; var __frame = { name: "__92", line: 1985 }; return __func(_, this, arguments, __92, 4, __frame, function __$__92() {








      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Route Table name: "), routeTableName, __cb(_, __frame, 2, 39, function ___(__0, __2) { routeTableName = __2;
          return cli.interaction.promptIfNotGiven($("Route name: "), name, __cb(_, __frame, 3, 29, function ___(__0, __3) { name = __3;

            networkResourceProviderClient = getNetworkResourceProviderClient(options);
            routeTable = new RouteTable(cli, networkResourceProviderClient);
            return routeTable.deleteRoute(resourceGroup, routeTableName, name, options, __cb(_, __frame, 7, 17, function __$__92() { _(); }, true)); }, true)); }, true)); }, true)); }); });


  var gateway = network.category("gateway").description($("Commands to manage Gateways"));


  var localGateway = gateway.category("local-network").description($("Commands to manage Local Network Gateways"));


  localGateway.command("create [resource-group] [name] [location]").description($("Create a local network gateway")).usage("[options] <resource-group> <name> <location>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the local network")).option("-a, --address-space <address-space>", $("the local network site address space")).option("-i, --ip-address <ip-address>", $("the IP address of the local network site")).option("-l, --location <location>", $("the location")).option("-s, --subscription <subscription>", $("the subscription identifier")).option("-t, --tags <tags>", $(((("the tags set on this local network gateway." + "\n   Can be multiple, in the format of \"name=value\".") + "\n   Name is required and value is optional.") + "\n   For example, -t tag1=value1;tag2"))).execute(function __93(resourceGroup, name, location, options, _) { var networkResourceProviderClient, localNetwork; var __frame = { name: "__93", line: 2014 }; return __func(_, this, arguments, __93, 4, __frame, function __$__93() {













      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Local network name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;
          return cli.interaction.promptIfNotGiven($("Location: "), location, __cb(_, __frame, 3, 41, function ___(__0, __3) { options.location = __3;
            return cli.interaction.promptIfNotGiven($("Address space: "), options.addressSpace, __cb(_, __frame, 4, 45, function ___(__0, __4) { options.addressSpace = __4;
              return cli.interaction.promptIfNotGiven($("IP address: "), options.ipAddress, __cb(_, __frame, 5, 42, function ___(__0, __5) { options.ipAddress = __5;

                networkResourceProviderClient = getNetworkResourceProviderClient(options);
                localNetwork = new LocalNetworkGateway(cli, networkResourceProviderClient);
                return localNetwork.create(resourceGroup, name, options, __cb(_, __frame, 9, 19, function __$__93() { _(); }, true)); }, true)); }, true)); }, true)); }, true)); }, true)); }); });


  localGateway.command("set [resource-group] [name]").description($("Set a local network gateway")).usage("[options] <resource-group> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the local network")).option("-a, --address-space <address-space>", $("the local network site address space")).option("-t, --tags <tags>", $(((("the tags set on this local network gateway." + "\n     Can be multiple. In the format of \"name=value\".") + "\n     Name is required and value is optional. For example, -t \"tag1=value1;tag2\".") + "\n     Existing tag values will be replaced by the values specified."))).option("--no-tags", $("remove all existing tags")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __94(resourceGroup, name, options, _) { var networkResourceProviderClient, localNetwork; var __frame = { name: "__94", line: 2038 }; return __func(_, this, arguments, __94, 3, __frame, function __$__94() {












      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Local network name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;

          networkResourceProviderClient = getNetworkResourceProviderClient(options);
          localNetwork = new LocalNetworkGateway(cli, networkResourceProviderClient);
          return localNetwork.set(resourceGroup, name, options, __cb(_, __frame, 6, 19, function __$__94() { _(); }, true)); }, true)); }, true)); }); });


  localGateway.command("list [resource-group]").usage("[options] <resource-group>").description($("Get all local networks gateways")).option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __95(resourceGroup, options, _) { var networkResourceProviderClient, localNetwork; var __frame = { name: "__95", line: 2052 }; return __func(_, this, arguments, __95, 2, __frame, function __$__95() {





      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;

        networkResourceProviderClient = getNetworkResourceProviderClient(options);
        localNetwork = new LocalNetworkGateway(cli, networkResourceProviderClient);
        return localNetwork.list(resourceGroup, options, __cb(_, __frame, 5, 19, function __$__95() { _(); }, true)); }, true)); }); });


  localGateway.command("show [resource-group] [name]").usage("[options] <resource-group> <name>").description($("Get a local network gateway")).option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the local network")).option("-s, --subscription <id>", $("the subscription id")).execute(function __96(resourceGroup, name, options, _) { var networkResourceProviderClient, localNetwork; var __frame = { name: "__96", line: 2066 }; return __func(_, this, arguments, __96, 3, __frame, function __$__96() {






      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Local network name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;

          networkResourceProviderClient = getNetworkResourceProviderClient(options);
          localNetwork = new LocalNetworkGateway(cli, networkResourceProviderClient);
          return localNetwork.show(resourceGroup, name, options, __cb(_, __frame, 6, 19, function __$__96() { _(); }, true)); }, true)); }, true)); }); });


  localGateway.command("delete [resource-group] [name]").usage("[options] <resource-group> <name>").description($("Delete a local network gateway")).option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the local network")).option("-q, --quiet", $("quiet mode, do not ask for delete confirmation")).option("-s, --subscription <id>", $("the subscription id")).execute(function __97(resourceGroup, name, options, _) { var networkResourceProviderClient, localNetwork; var __frame = { name: "__97", line: 2082 }; return __func(_, this, arguments, __97, 3, __frame, function __$__97() {







      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Local network name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;

          networkResourceProviderClient = getNetworkResourceProviderClient(options);
          localNetwork = new LocalNetworkGateway(cli, networkResourceProviderClient);
          return localNetwork.delete(resourceGroup, name, options, __cb(_, __frame, 6, 19, function __$__97() { _(); }, true)); }, true)); }, true)); }); });


  var vnetGateway = gateway.category("vnet").description($("Commands to manage Virtual Network Gateways"));


  vnetGateway.command("create [resource-group] [name] [location]").description($("Create a virtual network gateway")).usage("[options] <resource-group> <name> <location>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the virtual network gateway")).option("-l, --location <location>", $("the location")).option("-y, --type <type>", util.format($((("the gateway type" + "\n   Valid values are [%s]") + "\n   Default is RouteBased")), constants.vpnGateway.type)).option("-u, --public-ip-id <public-ip-id>", $(("the public ip identifier." + "\n     e.g. /subscriptions/<subscription-id>/resourceGroups/<resource-group-name>/providers/Microsoft.Network/publicIPAddresses/<public-ip-name>"))).option("-p, --public-ip-name <public-ip-name>", $("the public ip name. This public ip must exists in the same resource group as the vnet gateway. Please use public-ip-id if that is not the case.")).option("-f, --subnet-id <subnet-id>", $(("the subnet identifier." + "\n     e.g. /subscriptions/<subscription-id>/resourceGroups/<resource-group-name>/providers/Microsoft.Network/virtualNetworks/MyTestNetwork/subnets/<subnet-name>"))).option("-m, --vnet-name <vnet-name>", $("the virtual network name. This virtual network must exists in the same resource group as the vnet gateway. Please use sunet-id if that is not the case.")).option("-e, --subnet-name <subnet-name>", $("the subnet name")).option("-a, --private-ip-address <private-ip-address>", $("the private ip address")).option("-b, --enable-bgp <enable-bgp>", $((("enables BGP flag" + "\n   Valid values are [True, False]") + "\n   Default is False"))).option("-t, --tags <tags>", $(((("the tags set on this virtual network gateway." + "\n   Can be multiple, in the format of \"name=value\".") + "\n   Name is required and value is optional.") + "\n   For example, -t tag1=value1;tag2"))).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __98(resourceGroup, name, location, options, _) { var networkResourceProviderClient, vnetGateway; var __frame = { name: "__98", line: 2119 }; return __func(_, this, arguments, __98, 4, __frame, function __$__98() {

























      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Virtual network gateway name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;
          return cli.interaction.promptIfNotGiven($("Location: "), location, __cb(_, __frame, 3, 41, function ___(__0, __3) { options.location = __3;
            return cli.interaction.promptIfNotGiven($("Private IP address: "), options.privateIpAddress, __cb(_, __frame, 4, 49, function ___(__0, __4) { options.privateIpAddress = __4; return (function __$__98(__then) {

                if ((!options.publicIpId && !options.publicIpName)) {
                  return cli.interaction.prompt($("Public IP name: "), __cb(_, __frame, 7, 47, function ___(__0, __5) { options.publicIpName = __5; __then(); }, true)); } else { __then(); } ; })(function __$__98() { return (function __$__98(__then) {


                  if ((!options.subnetId && ((!options.vnetName || !options.subnetName)))) {
                    return cli.interaction.prompt($("Virtual network name: "), __cb(_, __frame, 11, 43, function ___(__0, __6) { options.vnetName = __6;
                      return cli.interaction.prompt($("Subnet name: "), __cb(_, __frame, 12, 45, function ___(__0, __7) { options.subnetName = __7; __then(); }, true)); }, true)); } else { __then(); } ; })(function __$__98() {


                  networkResourceProviderClient = getNetworkResourceProviderClient(options);
                  vnetGateway = new VirtualNetworkGateway(cli, networkResourceProviderClient);
                  return vnetGateway.create(resourceGroup, name, options, __cb(_, __frame, 17, 18, function __$__98() { _(); }, true)); }); }); }, true)); }, true)); }, true)); }, true)); }); });


  vnetGateway.command("set [resource-group] [name]").description($("Set a virtual network gateway")).usage("[options] <resource-group> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the virtual network gateway")).option("-t, --tags <tags>", $(((("the tags set on this virtual network gateway." + "\n     Can be multiple. In the format of \"name=value\".") + "\n     Name is required and value is optional. For example, -t \"tag1=value1;tag2\".") + "\n     Existing tag values will be replaced by the values specified."))).option("--no-tags", $("remove all existing tags")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __99(resourceGroup, name, options, _) { var networkResourceProviderClient, vnetGateway; var __frame = { name: "__99", line: 2150 }; return __func(_, this, arguments, __99, 3, __frame, function __$__99() {











      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Virtual network gateway name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;

          networkResourceProviderClient = getNetworkResourceProviderClient(options);
          vnetGateway = new VirtualNetworkGateway(cli, networkResourceProviderClient);
          return vnetGateway.set(resourceGroup, name, options, __cb(_, __frame, 6, 18, function __$__99() { _(); }, true)); }, true)); }, true)); }); });


  vnetGateway.command("list [resource-group]").description($("List virtual network gateways")).usage("[options] <resource-group>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __100(resourceGroup, options, _) { var networkResourceProviderClient, vnetGateway; var __frame = { name: "__100", line: 2164 }; return __func(_, this, arguments, __100, 2, __frame, function __$__100() {





      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;

        networkResourceProviderClient = getNetworkResourceProviderClient(options);
        vnetGateway = new VirtualNetworkGateway(cli, networkResourceProviderClient);
        return vnetGateway.list(resourceGroup, options, __cb(_, __frame, 5, 18, function __$__100() { _(); }, true)); }, true)); }); });


  vnetGateway.command("show [resource-group] [name]").description($("Get a virtual network gateway")).usage("[options] <resource-group> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the virtual network gateway")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __101(resourceGroup, name, options, _) { var networkResourceProviderClient, vnetGateway; var __frame = { name: "__101", line: 2178 }; return __func(_, this, arguments, __101, 3, __frame, function __$__101() {






      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Virtual network gateway name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;

          networkResourceProviderClient = getNetworkResourceProviderClient(options);
          vnetGateway = new VirtualNetworkGateway(cli, networkResourceProviderClient);
          return vnetGateway.show(resourceGroup, name, options, __cb(_, __frame, 6, 18, function __$__101() { _(); }, true)); }, true)); }, true)); }); });


  vnetGateway.command("delete [resource-group] [name]").description($("Delete a virtual network gateway")).usage("[options] <resource-group> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the virtual network gateway")).option("-q, --quiet", $("quiet mode, do not ask for delete confirmation")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __102(resourceGroup, name, options, _) { var networkResourceProviderClient, vnetGateway; var __frame = { name: "__102", line: 2194 }; return __func(_, this, arguments, __102, 3, __frame, function __$__102() {







      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Virtual network gateway name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;

          networkResourceProviderClient = getNetworkResourceProviderClient(options);
          vnetGateway = new VirtualNetworkGateway(cli, networkResourceProviderClient);
          return vnetGateway.delete(resourceGroup, name, options, __cb(_, __frame, 6, 18, function __$__102() { _(); }, true)); }, true)); }, true)); }); });


  var expressRoute = network.category("express-route").description($("Commands to manage express routes"));


  expressRoute.command("create [resource-group] [name] [location] [service-provider-name] [peering-location]").description($("Create express route circuit")).usage("[options] <resource-group> <name> <location>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the express route circuit")).option("-l, --location <location>", $("the location")).option("-p, --service-provider-name <service-provider-name>", $("the service provider name")).option("-i, --peering-location <peering-location>", $("the service provider peering location")).option("-b, --bandwidth-in-mbps <bandwidth-in-mbps>", $("the bandwidth in Mbps")).option("-e, --sku-tier <sku-tier>", $("the sku tier")).option("-f, --sku-family <sku-family>", $("the sku family")).option("-t, --tags <tags>", $(((("the tags set on express route." + "\n   Can be multiple, in the format of \"name=value\".") + "\n   Name is required and value is optional.") + "\n   For example, -t tag1=value1;tag2"))).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __103(resourceGroup, name, location, serviceProviderName, peeringLocation, options, _) { var networkResourceProviderClient, expressRoute; var __frame = { name: "__103", line: 2222 }; return __func(_, this, arguments, __103, 6, __frame, function __$__103() {
















      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Express route name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;
          return cli.interaction.promptIfNotGiven($("Location: "), location, __cb(_, __frame, 3, 33, function ___(__0, __3) { location = __3;
            return cli.interaction.promptIfNotGiven($("Service provider name: "), serviceProviderName, __cb(_, __frame, 4, 52, function ___(__0, __4) { options.serviceProviderName = __4;
              return cli.interaction.promptIfNotGiven($("Peering location: "), peeringLocation, __cb(_, __frame, 5, 48, function ___(__0, __5) { options.peeringLocation = __5;

                networkResourceProviderClient = getNetworkResourceProviderClient(options);
                expressRoute = new ExpressRoute(cli, networkResourceProviderClient);
                return expressRoute.create(resourceGroup, name, location, options, __cb(_, __frame, 9, 19, function __$__103() { _(); }, true)); }, true)); }, true)); }, true)); }, true)); }, true)); }); });


  expressRoute.command("set [resource-group] [name]").description($("Set an express route circuit")).usage("[options] <resource-group> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the express route circuit")).option("-b, --bandwidth-in-mbps <bandwidth-in-mbps>", $("the bandwidth in Mbps")).option("-e, --sku-tier <sku-tier>", $("the sku tier")).option("-f, --sku-family <sku-family>", $("the sku family")).option("-t, --tags <tags>", $(((("the tags set on express route." + "\n   Can be multiple, in the format of \"name=value\".") + "\n   Name is required and value is optional.") + "\n   For example, -t tag1=value1;tag2"))).option("--no-tags", $("remove all existing tags")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __104(resourceGroup, name, options, _) { var networkResourceProviderClient, expressRoute; var __frame = { name: "__104", line: 2248 }; return __func(_, this, arguments, __104, 3, __frame, function __$__104() {














      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Express route name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;

          networkResourceProviderClient = getNetworkResourceProviderClient(options);
          expressRoute = new ExpressRoute(cli, networkResourceProviderClient);
          return expressRoute.set(resourceGroup, name, options, __cb(_, __frame, 6, 19, function __$__104() { _(); }, true)); }, true)); }, true)); }); });


  expressRoute.command("list [resource-group]").description($("Get all express route circuits")).usage("[options] <resource-group>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __105(resourceGroup, options, _) { var networkResourceProviderClient, expressRoute; var __frame = { name: "__105", line: 2262 }; return __func(_, this, arguments, __105, 2, __frame, function __$__105() {





      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;

        networkResourceProviderClient = getNetworkResourceProviderClient(options);
        expressRoute = new ExpressRoute(cli, networkResourceProviderClient);
        return expressRoute.list(resourceGroup, options, __cb(_, __frame, 5, 19, function __$__105() { _(); }, true)); }, true)); }); });


  expressRoute.command("show [resource-group] [name]").description($("Create express route circuit")).usage("[options] <resource-group> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the express route circuit")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __106(resourceGroup, name, location, options, _) { var networkResourceProviderClient, expressRoute; var __frame = { name: "__106", line: 2276 }; return __func(_, this, arguments, __106, 4, __frame, function __$__106() {






      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Express route name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;

          networkResourceProviderClient = getNetworkResourceProviderClient(options);
          expressRoute = new ExpressRoute(cli, networkResourceProviderClient);
          return expressRoute.show(resourceGroup, name, options, __cb(_, __frame, 6, 19, function __$__106() { _(); }, true)); }, true)); }, true)); }); });


  expressRoute.command("delete [resource-group] [name]").description($("Delete an express route circuit")).usage("[options] <resource-group> <name>").option("-g, --resource-group <resource-group>", $("the name of the resource group")).option("-n, --name <name>", $("the name of the express route circuit")).option("-q, --quiet", $("quiet mode, do not ask for delete confirmation")).option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __107(resourceGroup, name, options, _) { var networkResourceProviderClient, expressRoute; var __frame = { name: "__107", line: 2292 }; return __func(_, this, arguments, __107, 3, __frame, function __$__107() {







      return cli.interaction.promptIfNotGiven($("Resource group name: "), resourceGroup, __cb(_, __frame, 1, 38, function ___(__0, __1) { resourceGroup = __1;
        return cli.interaction.promptIfNotGiven($("Express route name: "), name, __cb(_, __frame, 2, 29, function ___(__0, __2) { name = __2;

          networkResourceProviderClient = getNetworkResourceProviderClient(options);
          expressRoute = new ExpressRoute(cli, networkResourceProviderClient);
          return expressRoute.delete(resourceGroup, name, options, __cb(_, __frame, 6, 19, function __$__107() { _(); }, true)); }, true)); }, true)); }); });


  var expressRouteProvider = expressRoute.category("provider").description($("Commands to manage express route service providers"));


  expressRouteProvider.command("list").description($("List express route service providers")).usage("[options]").option("-s, --subscription <subscription>", $("the subscription identifier")).execute(function __108(options, _) { var networkResourceProviderClient, expressRoute; var __frame = { name: "__108", line: 2308 }; return __func(_, this, arguments, __108, 1, __frame, function __$__108() {




      networkResourceProviderClient = getNetworkResourceProviderClient(options);
      expressRoute = new ExpressRoute(cli, networkResourceProviderClient);
      return expressRoute.listProviders(options, __cb(_, __frame, 3, 19, function __$__108() { _(); }, true)); }); });


  function getServiceClients(options) {
    return {
      computeManagementClient: getComputeManagementClient(options),
      networkResourceProviderClient: getNetworkResourceProviderClient(options),
      trafficManagerProviderClient: getTrafficManagementClient(options) }; };



  function getNetworkResourceProviderClient(options) {
    var subscription = profile.current.getSubscription(options.subscription);
    return utils.createNetworkResourceProviderClient(subscription); };


  function getComputeManagementClient(options) {
    var subscription = profile.current.getSubscription(options.subscription);
    return utils.createComputeResourceProviderClient(subscription); };


  function getTrafficManagementClient(options) {
    var subscription = profile.current.getSubscription(options.subscription);
    return utils.createTrafficManagerResourceProviderClient(subscription); };


  function getDnsManagementClient(options) {
    var subscription = profile.current.getSubscription(options.subscription);
    return utils.createDnsResourceProviderClient(subscription); };};
