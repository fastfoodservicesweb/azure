/*** Generated by streamline 0.10.17 (callbacks) - DO NOT EDIT ***/ var __rt=require('streamline/lib/callbacks/runtime').runtime(__filename, false),__func=__rt.__func,__cb=__rt.__cb,__catch=__rt.__catch,__tryCatch=__rt.__tryCatch; var __ = require("underscore");















var util = require("util");
var utils = require("../../../util/utils");
var $ = utils.getLocaleString;
var resourceUtils = require("../resource/resourceUtils");
var tagUtils = require("../tag/tagUtils");
var Subnet = require("./subnet");
var LoadBalancer = require("./loadBalancer");
var Nsg = require("./nsg");
var PublicIp = require("./publicIp");
var VNetUtil = require("../../../util/vnet.util");

function Nic(cli, serviceClients) {
  this.networkResourceProviderClient = serviceClients.networkResourceProviderClient;
  this.subnetCrud = new Subnet(cli, serviceClients.networkResourceProviderClient);
  this.loadBalancerCrud = new LoadBalancer(cli, serviceClients.networkResourceProviderClient);
  this.nsgCrud = new Nsg(cli, serviceClients.networkResourceProviderClient);
  this.publicIpCrud = new PublicIp(cli, serviceClients.networkResourceProviderClient);
  this.vnetUtil = new VNetUtil();
  this.output = cli.output;
  this.interaction = cli.interaction;};


__.extend(Nic.prototype, {
  create: function create__1(resourceGroupName, nicName, options, _) { var self, nic, nicProfile, progress, __this = this; var __frame = { name: "create__1", line: 40 }; return __func(_, this, arguments, create__1, 3, __frame, function __$create__1() { self = __this; return (function __$create__1(__then) {

        if ((options.subnetId || ((options.subnetName && options.subnetVnetName)))) {
          return self.get(resourceGroupName, nicName, __cb(_, __frame, 3, 21, function ___(__0, __1) { nic = __1;
            if (nic) {
              return _(new Error(util.format($("A network interface with name \"%s\" already exists in the resource group \"%s\""), nicName, resourceGroupName))); } ;


            return self._parseNic(resourceGroupName, nicName, options, __cb(_, __frame, 8, 28, function ___(__0, __2) { nicProfile = __2;
              progress = self.interaction.progress(util.format($("Creating network interface \"%s\""), nicName)); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$create__1() {

                    return self.networkResourceProviderClient.networkInterfaces.createOrUpdate(resourceGroupName, nicName, nicProfile, __cb(_, __frame, 11, 61, function __$create__1() { _(null, null, true); }, true)); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$create__1() {

                      progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$create__1() {

                  return self.show(resourceGroupName, nicName, options, __cb(_, __frame, 15, 11, __then, true)); }); }); }, true)); }, true)); } else {

          return _(new Error($("--subnet-id or --subnet-name, --subnet-vnet-name parameters must be provided"))); } ; })(_); }); },



  set: function set__2(resourceGroupName, nicName, options, _) { var self, nic, nicProfile, optionalNsgId, optionalPublicipId, ipConfig, internalDnsNameLabel, __this = this; var __frame = { name: "set__2", line: 61 }; return __func(_, this, arguments, set__2, 3, __frame, function __$set__2() { self = __this;

      return self.get(resourceGroupName, nicName, __cb(_, __frame, 2, 19, function ___(__0, __1) { nic = __1;
        if (!nic) {
          return _(new Error(util.format($("A network interface with name \"%s\" not found in the resource group \"%s\""), nicName, resourceGroupName))); } ;


        return self._parseNic(resourceGroupName, nicName, options, __cb(_, __frame, 7, 26, function ___(__0, __2) { nicProfile = __2;

          if (options.privateIpAddress) {
            nic.ipConfigurations[0].privateIpAddress = options.privateIpAddress;
            nic.ipConfigurations[0].privateIpAllocationMethod = "Static"; } ;


          if ((options.subnetId || ((options.subnetName && options.subnetVnetName)))) {
            nic.ipConfigurations[0].subnet = nicProfile.ipConfigurations[0].subnet; } ;


          optionalNsgId = utils.getOptionalArg(options.networkSecurityGroupId);
          if (optionalNsgId.hasValue) {
            if ((optionalNsgId.value !== null)) {
              nic.networkSecurityGroup = nicProfile.networkSecurityGroup; }
             else {
              delete nic.networkSecurityGroup; } ; } else {

            if (options.networkSecurityGroupName) {
              nic.networkSecurityGroup = nicProfile.networkSecurityGroup; } ; } ;


          optionalPublicipId = utils.getOptionalArg(options.publicIpId);
          if (optionalPublicipId.hasValue) {
            if ((optionalPublicipId.value !== null)) {
              nic.ipConfigurations[0].publicIpAddress = nicProfile.ipConfigurations[0].publicIpAddress; }
             else {
              delete nic.ipConfigurations[0].publicIpAddress; } ; } else {

            if (options.publicIpName) {
              nic.ipConfigurations[0].publicIpAddress = nicProfile.ipConfigurations[0].publicIpAddress; } ; } ;


          if ((nicProfile.ipConfigurations && (nicProfile.ipConfigurations.length > 0))) {
            ipConfig = nicProfile.ipConfigurations[0];
            if (ipConfig.loadBalancerBackendAddressPools) {
              nic.ipConfigurations[0].loadBalancerBackendAddressPools = ipConfig.loadBalancerBackendAddressPools; } ;


            if (ipConfig.loadBalancerInboundNatRules) {
              nic.ipConfigurations[0].loadBalancerInboundNatRules = ipConfig.loadBalancerInboundNatRules; } ; } ;



          internalDnsNameLabel = utils.getOptionalArg(options.internalDnsNameLabel);
          if (internalDnsNameLabel.hasValue) {
            if ((internalDnsNameLabel.value !== null)) {
              nic.dnsSettings.internalDnsNameLabel = nicProfile.dnsSettings.internalDnsNameLabel; }
             else {
              delete nic.dnsSettings.internalDnsNameLabel; } ; } ;



          if (options.enableIpForwarding) {
            nic.enableIPForwarding = nicProfile.enableIPForwarding; } ;


          if (options.tags) {
            tagUtils.appendTags(nic, nicProfile.tags); } ;


          if ((options.tags === false)) {
            nic.tags = { }; } ;


          return self.update(resourceGroupName, nicName, nic, __cb(_, __frame, 72, 9, function __$set__2() {
            return self.show(resourceGroupName, nicName, options, __cb(_, __frame, 73, 9, function __$set__2() { _(); }, true)); }, true)); }, true)); }, true)); }); },


  list: function list__3(resourceGroupName, options, _) { var self, progress, nics, __this = this; var __frame = { name: "list__3", line: 137 }; return __func(_, this, arguments, list__3, 2, __frame, function __$list__3() { self = __this;

      progress = self.interaction.progress($("Getting the network interfaces"));

      nics = null; return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$list__3() { return (function __$list__3(__then) {

              if (options.virtualMachineScaleSet) {
                return self.networkResourceProviderClient.networkInterfaces.listVirtualMachineScaleSetNetworkInterfaces(resourceGroupName, options.virtualMachineScaleSet, __cb(_, __frame, 7, 68, function ___(__0, __1) { nics = __1; __then(); }, true)); } else {

                return self.networkResourceProviderClient.networkInterfaces.list(resourceGroupName, __cb(_, __frame, 9, 68, function ___(__0, __2) { nics = __2; __then(); }, true)); } ; })(function __$list__3() { _(null, null, true); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$list__3() {


              progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$list__3() {


          self.interaction.formatOutput(nics.networkInterfaces, function(data) {
            if ((data.length === 0)) {
              self.output.warn($("No network interfaces found")); }
             else {
              self.output.table(data, function(row, nic) {
                row.cell($("Name"), nic.name);
                row.cell($("Location"), (nic.location || ""));
                row.cell($("MAC Address"), (nic.macAddress || ""));
                row.cell($("Internal DNS name"), (nic.dnsSettings.internalDnsNameLabel || ""));
                row.cell($("Internal FQDN"), (nic.dnsSettings.internalFqdn || ""));
                row.cell($("Enable IP forwarding"), (nic.enableIPForwarding || false)); }); } ; }); _(); }); }); }); },





  show: function show__4(resourceGroupName, nicName, options, _) { var self, nic, __this = this; var __frame = { name: "show__4", line: 168 }; return __func(_, this, arguments, show__4, 3, __frame, function __$show__4() { self = __this;

      nic = null; return (function __$show__4(__then) {

        if ((options.virtualMachineScaleSet || options.virtualMachineIndex)) {
          if (!((options.virtualMachineScaleSet && options.virtualMachineIndex))) {
            return _(new Error(util.format($("--virtual-machine-scale-set and --virtual-machine-index must be specified")))); } ;

          return self.getFromVMSS(resourceGroupName, options.virtualMachineScaleSet, options.virtualMachineIndex, nicName, __cb(_, __frame, 8, 17, function ___(__0, __1) { nic = __1; __then(); }, true)); } else {

          return self.get(resourceGroupName, nicName, __cb(_, __frame, 10, 17, function ___(__0, __2) { nic = __2; __then(); }, true)); } ; })(function __$show__4() {


        self.interaction.formatOutput(nic, function(nic) {
          if ((nic === null)) {
            self.output.warn(util.format($("A network interface with name \"%s\" not found in the resource group \"%s\""), nicName, resourceGroupName)); }
           else {
            var resourceInfo = resourceUtils.getResourceInformation(nic.id);
            self.output.nameValue($("Id"), nic.id);
            self.output.nameValue($("Name"), nic.name);
            self.output.nameValue($("Type"), resourceInfo.resourceType);
            self.output.nameValue($("Location"), nic.location);
            self.output.nameValue($("Provisioning state"), nic.provisioningState);
            self.output.nameValue($("MAC address"), nic.macAddress);
            self.output.nameValue($("Internal DNS name label"), nic.dnsSettings.internalDnsNameLabel);
            self.output.nameValue($("Internal FQDN"), nic.dnsSettings.internalFqdn);
            self.output.nameValue($("Enable IP forwarding"), nic.enableIPForwarding);
            self.output.nameValue($("Tags"), tagUtils.getTagsInfo(nic.tags));
            if (nic.networkSecurityGroup) {
              self.output.nameValue($("Network security group"), nic.networkSecurityGroup.id); } ;

            if (nic.virtualMachine) {
              self.output.nameValue($("Virtual machine"), nic.virtualMachine.id); } ;


            self.output.header($("IP configurations"));
            nic.ipConfigurations.forEach(function(config) {
              self.output.nameValue($("Name"), config.name, 2);
              self.output.nameValue($("Provisioning state"), config.provisioningState, 2);
              if (config.publicIpAddress) {
                self.output.nameValue($("Public IP address"), config.publicIpAddress.id, 2); } ;

              self.output.nameValue($("Private IP address"), config.privateIpAddress, 2);
              self.output.nameValue($("Private IP Allocation Method"), config.privateIpAllocationMethod, 2);
              self.output.nameValue($("Subnet"), config.subnet.id, 2);

              if ((config.loadBalancerBackendAddressPools.length > 0)) {
                self.output.header($("Load balancer backend address pools"), 2);
                config.loadBalancerBackendAddressPools.forEach(function(pool) {
                  self.output.nameValue($("Id"), pool.id, 4); }); } ;



              if ((config.loadBalancerInboundNatRules.length > 0)) {
                self.output.header($("Load balancer inbound NAT rules"), 2);
                config.loadBalancerInboundNatRules.forEach(function(rule) {
                  self.output.nameValue($("Id"), rule.id, 4); }); } ;



              self.output.data($(""), ""); }); } ; }); _(); }); }); },





  get: function get__5(resourceGroupName, nicName, _) { var self, progress, nic, __this = this; var __frame = { name: "get__5", line: 234 }; return __func(_, this, arguments, get__5, 2, __frame, function __$get__5() { self = __this;

      progress = self.interaction.progress(util.format($("Looking up the network interface \"%s\""), nicName)); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$get__5() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$get__5() {

                  return self.networkResourceProviderClient.networkInterfaces.get(resourceGroupName, nicName, __cb(_, __frame, 4, 69, function ___(__0, __1) { nic = __1;
                    return _(null, nic.networkInterface); }, true)); }); })(function ___(e, __result) { __catch(function __$get__5() { if (e) {

                    if ((e.statusCode === 404)) {
                      return _(null, null); } ;

                    return _(e); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$get__5() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$get__5() {

              progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$get__5() { _(); }); }); }); },



  getFromVMSS: function getFromVMSS__6(resourceGroupName, vmssName, vmssIndex, nicName, _) { var self, progress, nic, __this = this; var __frame = { name: "getFromVMSS__6", line: 250 }; return __func(_, this, arguments, getFromVMSS__6, 4, __frame, function __$getFromVMSS__6() { self = __this;

      progress = self.interaction.progress(util.format($("Looking up the network interface \"%s\" in scale set \"%s\""), nicName, vmssName)); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$getFromVMSS__6() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$getFromVMSS__6() {

                  return self.networkResourceProviderClient.networkInterfaces.getVirtualMachineScaleSetNetworkInterface(resourceGroupName, vmssName, vmssIndex, nicName, __cb(_, __frame, 4, 69, function ___(__0, __1) { nic = __1;
                    return _(null, nic.networkInterface); }, true)); }); })(function ___(e, __result) { __catch(function __$getFromVMSS__6() { if (e) {

                    if ((e.statusCode === 404)) {
                      return _(null, null); } ;

                    return _(e); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$getFromVMSS__6() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$getFromVMSS__6() {

              progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$getFromVMSS__6() { _(); }); }); }); },



  delete: function delete__7(resourceGroupName, nicName, options, _) { var self, nic, progress, __this = this; var __frame = { name: "delete__7", line: 266 }; return __func(_, this, arguments, delete__7, 3, __frame, function __$delete__7() { self = __this;

      return self.get(resourceGroupName, nicName, __cb(_, __frame, 2, 19, function ___(__0, __2) { nic = __2;

        if (!nic) {
          return _(new Error(util.format($("A network interface with name \"%s\" not found in the resource group \"%s\""), nicName, resourceGroupName))); } ; return (function __$delete__7(_) {


          var __1 = !options.quiet; if (!__1) { return _(null, __1); } ; return self.interaction.confirm(util.format($("Delete network interface \"%s\"? [y/n] "), nicName), __cb(_, __frame, 8, 44, function ___(__0, __3) { var __2 = !__3; return _(null, __2); }, true)); })(__cb(_, __frame, -265, 17, function ___(__0, __3) { return (function __$delete__7(__then) { if (__3) { return _(null); } else { __then(); } ; })(function __$delete__7() {



            progress = self.interaction.progress(util.format($("Deleting network interface \"%s\""), nicName)); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$delete__7() {

                  return self.networkResourceProviderClient.networkInterfaces.deleteMethod(resourceGroupName, nicName, __cb(_, __frame, 14, 59, function __$delete__7() { _(null, null, true); }, true)); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$delete__7() {

                    progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$delete__7() { _(); }); }); }); }, true)); }, true)); }); },



  update: function update__8(resourceGroupName, nicName, nicProfile, _) { var self, progress, __this = this; var __frame = { name: "update__8", line: 286 }; return __func(_, this, arguments, update__8, 3, __frame, function __$update__8() { self = __this;

      progress = self.interaction.progress(util.format($("Updating network interface \"%s\""), nicName)); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$update__8() {

            return self.networkResourceProviderClient.networkInterfaces.createOrUpdate(resourceGroupName, nicName, nicProfile, __cb(_, __frame, 4, 59, function __$update__8() { _(null, null, true); }, true)); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$update__8() {

              progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$update__8() { _(); }); }); }); },



  addAddressPool: function addAddressPool__9(resourceGroupName, nicName, options, _) { var __this = this; var __frame = { name: "addAddressPool__9", line: 296 }; return __func(_, this, arguments, addAddressPool__9, 3, __frame, function __$addAddressPool__9() {
      return __this._updateAddressPool(resourceGroupName, nicName, options, true, __cb(_, __frame, 1, 9, function __$addAddressPool__9() { _(); }, true)); }); },


  removeAddressPool: function removeAddressPool__10(resourceGroupName, nicName, options, _) { var __this = this; var __frame = { name: "removeAddressPool__10", line: 300 }; return __func(_, this, arguments, removeAddressPool__10, 3, __frame, function __$removeAddressPool__10() {
      return __this._updateAddressPool(resourceGroupName, nicName, options, false, __cb(_, __frame, 1, 9, function __$removeAddressPool__10() { _(); }, true)); }); },


  addInboundRule: function addInboundRule__11(resourceGroupName, nicName, options, _) { var __this = this; var __frame = { name: "addInboundRule__11", line: 304 }; return __func(_, this, arguments, addInboundRule__11, 3, __frame, function __$addInboundRule__11() {
      return __this._updateInboundRule(resourceGroupName, nicName, options, true, __cb(_, __frame, 1, 9, function __$addInboundRule__11() { _(); }, true)); }); },


  removeInboundRule: function removeInboundRule__12(resourceGroupName, nicName, options, _) { var __this = this; var __frame = { name: "removeInboundRule__12", line: 308 }; return __func(_, this, arguments, removeInboundRule__12, 3, __frame, function __$removeInboundRule__12() {
      return __this._updateInboundRule(resourceGroupName, nicName, options, false, __cb(_, __frame, 1, 9, function __$removeInboundRule__12() { _(); }, true)); }); },


  _updateAddressPool: function _updateAddressPool__13(resourceGroupName, nicName, options, isAdding, _) { var self, nic, poolId, ipConfiguration, lb, addressPool, index, __this = this; var __frame = { name: "_updateAddressPool__13", line: 312 }; return __func(_, this, arguments, _updateAddressPool__13, 4, __frame, function __$_updateAddressPool__13() { self = __this;

      return self.get(resourceGroupName, nicName, __cb(_, __frame, 2, 19, function ___(__0, __1) { nic = __1;

        if (!nic) {
          return _(new Error(util.format($("A network interface with name \"%s\" not found in the resource group \"%s\""), nicName, resourceGroupName))); } ;


        poolId = null;

        ipConfiguration = nic.ipConfigurations[0];

        if (!ipConfiguration.loadBalancerBackendAddressPools) {
          ipConfiguration.loadBalancerBackendAddressPools = []; } ; return (function __$_updateAddressPool__13(__then) {


          if (options.lbAddressPoolId) {
            if (options.lbName) {
              self.output.warn("--lb-name parameter will be ignored"); } ;


            if (options.addressPoolName) {
              self.output.warn("--address-pool-name parameter will be ignored"); } ;


            poolId = options.lbAddressPoolId; __then(); } else { return (function __$_updateAddressPool__13(__then) {
              if ((options.lbName || options.addressPoolName)) {
                if (!options.lbName) {
                  return _(new Error($("You must specify --lb-name parameter if --address-pool-name is specified"))); } ;


                if (!options.addressPoolName) {
                  return _(new Error($("You must specify --address-pool-name parameter if --lb-name is specified"))); } ;

                return self.loadBalancerCrud.get(resourceGroupName, options.lbName, __cb(_, __frame, 34, 37, function ___(__0, __2) { lb = __2;
                  if (!lb) {
                    return _(new Error(util.format($("A load balancer with name \"%s\" not found in the resource group \"%s"), options.lbName, resourceGroupName))); } ;


                  addressPool = utils.findFirstCaseIgnore(lb.backendAddressPools, { name: options.addressPoolName });

                  if (!addressPool) {
                    return _(new Error(util.format($("A backend address pool with name \"%s\" not found in the load balancer \"%s\" resource group \"%s\""), options.addressPoolName, options.lbName, resourceGroupName))); }
                   else {
                    poolId = addressPool.id; } ; __then(); }, true)); } else {


                return _(new Error($("You must specify --lb-address-pool-id or (--lb-name and --address-pool-name) parameters"))); } ; })(__then); } ; })(function __$_updateAddressPool__13() {


          if (isAdding) {
            if (!utils.findFirstCaseIgnore(ipConfiguration.loadBalancerBackendAddressPools, { id: poolId })) {
              ipConfiguration.loadBalancerBackendAddressPools.push({ id: poolId }); }
             else {
              return _(new Error(util.format($("Specified backend address pool already attached to NIC \"%s\" in the resource group \"%s\""), nicName, resourceGroupName))); } ; }

           else {
            index = utils.indexOfCaseIgnore(ipConfiguration.loadBalancerBackendAddressPools, { id: poolId });
            if ((index !== -1)) {
              ipConfiguration.loadBalancerBackendAddressPools.splice(index, 1); }
             else {
              return _(new Error(util.format($("Specified backend address pool is not attached to NIC \"%s\" in the resource group \"%s\""), nicName, resourceGroupName))); } ; } ;



          return self.update(resourceGroupName, nicName, nic, __cb(_, __frame, 65, 9, function __$_updateAddressPool__13() { _(); }, true)); }); }, true)); }); },


  _updateInboundRule: function _updateInboundRule__14(resourceGroupName, nicName, options, isAdding, _) { var self, nic, ruleId, ipConfiguration, lb, inboundNatRule, index, __this = this; var __frame = { name: "_updateInboundRule__14", line: 380 }; return __func(_, this, arguments, _updateInboundRule__14, 4, __frame, function __$_updateInboundRule__14() { self = __this;

      return self.get(resourceGroupName, nicName, __cb(_, __frame, 2, 19, function ___(__0, __1) { nic = __1;

        if (!nic) {
          return _(new Error(util.format($("A network interface with name \"%s\" not found in the resource group \"%s\""), nicName, resourceGroupName))); } ;


        ruleId = null;

        ipConfiguration = nic.ipConfigurations[0];

        if (!ipConfiguration.loadBalancerInboundNatRules) {
          ipConfiguration.loadBalancerInboundNatRules = []; } ; return (function __$_updateInboundRule__14(__then) {


          if (options.inboundNatRuleId) {
            if (options.lbName) {
              self.output.warn("--lb-name parameter will be ignored"); } ;


            if (options.inboundNatRuleName) {
              self.output.warn("--inbound-nat-rule-name parameter will be ignored"); } ;


            ruleId = options.inboundNatRuleId; __then(); } else { return (function __$_updateInboundRule__14(__then) {
              if ((options.lbName || options.inboundNatRuleName)) {
                if (!options.lbName) {
                  return _(new Error($("You must specify --lb-name parameter if --inbound-nat-rule-name is specified"))); } ;


                if (!options.inboundNatRuleName) {
                  return _(new Error($("You must specify --inbound-nat-rule-name parameter if --lb-name is specified"))); } ;

                return self.loadBalancerCrud.get(resourceGroupName, options.lbName, __cb(_, __frame, 34, 37, function ___(__0, __2) { lb = __2;
                  if (!lb) {
                    return _(new Error(util.format($("A load balancer with name \"%s\" not found in the resource group \"%s"), options.lbName, resourceGroupName))); } ;


                  inboundNatRule = utils.findFirstCaseIgnore(lb.inboundNatRules, { name: options.inboundNatRuleName });
                  if (!inboundNatRule) {
                    return _(new Error(util.format($("An inbound NAT rule with name \"%s\" not found in the load balancer \"%s\""), options.inboundNatRuleName, options.lbName))); }
                   else {
                    ruleId = inboundNatRule.id; } ; __then(); }, true)); } else {


                return _(new Error($("You must specify --inbound-nat-rule-id or (--lb-name and --inbound-nat-rule-name) parameters"))); } ; })(__then); } ; })(function __$_updateInboundRule__14() {


          if (isAdding) {
            if (!utils.findFirstCaseIgnore(ipConfiguration.loadBalancerInboundNatRules, { id: ruleId })) {
              ipConfiguration.loadBalancerInboundNatRules.push({ id: ruleId }); }
             else {
              return _(new Error(util.format($("Specified inbound NAT rule already attached to NIC \"%s\" in the resource group \"%s\""), nicName, resourceGroupName))); } ; }

           else {
            index = utils.indexOfCaseIgnore(ipConfiguration.loadBalancerInboundNatRules, { id: ruleId });
            if ((index !== -1)) {
              ipConfiguration.loadBalancerInboundNatRules.splice(index, 1); }
             else {
              return _(new Error(util.format($("Specified inbound NAT rule is not attached to NIC \"%s\" in the resource group \"%s\""), nicName, resourceGroupName))); } ; } ;



          return self.update(resourceGroupName, nicName, nic, __cb(_, __frame, 64, 9, function __$_updateInboundRule__14() { _(); }, true)); }); }, true)); }); },


  _parseNic: function _parseNic__15(resourceGroupName, nicName, options, _) { var self, nicProfile, ipValidationResult, subnet, nsg, publicip, lbAddressPoolIdsOpt, lbAddressPoolIds, lbInboundNatRuleIdsOpt, lbInboundNatRuleIds, __this = this; var __frame = { name: "_parseNic__15", line: 447 }; return __func(_, this, arguments, _parseNic__15, 3, __frame, function __$_parseNic__15() { self = __this;


      nicProfile = {
        ipConfigurations: [{

          name: "NIC-config" },] };




      if (options.privateIpAddress) {
        ipValidationResult = self.vnetUtil.parseIPv4(options.privateIpAddress);
        if (ipValidationResult.error) {
          return _(new Error($("public ip address parameter is in invalid format"))); } ;

        nicProfile.ipConfigurations[0].privateIpAllocationMethod = "Static";
        nicProfile.ipConfigurations[0].privateIpAddress = options.privateIpAddress; } ; return (function __$_parseNic__15(__then) {


        if (options.subnetId) {
          if ((options.subnetName || options.subnetVnetName)) {
            self.output.warn($("--subnet-name, --subnet-vnet-name parameters will be ignored because --subnet-name, --subnet-vnet-name and --subnet-id are mutually exclusive")); } ;

          nicProfile.ipConfigurations[0].subnet = {
            id: options.subnetId }; __then(); } else { return (function __$_parseNic__15(__then) {


            if ((options.subnetName && options.subnetVnetName)) {
              return self.subnetCrud.get(resourceGroupName, options.subnetVnetName, options.subnetName, __cb(_, __frame, 29, 37, function ___(__0, __1) { subnet = __1;
                if (!subnet) {
                  return _(new Error(util.format($("A subnet with name \"%s\" not found in the resource group \"%s\""), options.subnetName, resourceGroupName))); } ;

                nicProfile.ipConfigurations[0].subnet = {
                  id: subnet.id }; __then(); }, true)); } else { __then(); } ; })(__then); } ; })(function __$_parseNic__15() { return (function __$_parseNic__15(__then) {




          if (options.networkSecurityGroupId) {
            if (options.networkSecurityGroupName) { self.output.warn($("--network-security-group-name parameter will be ignored because --network-security-group-id and --network-security-group-name are mutually exclusive")); } ;
            nicProfile.networkSecurityGroup = {
              id: options.networkSecurityGroupId }; __then(); } else { return (function __$_parseNic__15(__then) {


              if (options.networkSecurityGroupName) {
                return self.nsgCrud.get(resourceGroupName, options.networkSecurityGroupName, __cb(_, __frame, 46, 31, function ___(__0, __2) { nsg = __2;
                  if (!nsg) {
                    return _(new Error(util.format($("A network security group with name \"%s\" not found in the resource group \"%s\""), options.networkSecurityGroupName, resourceGroupName))); } ;

                  nicProfile.networkSecurityGroup = {
                    id: nsg.id }; __then(); }, true)); } else { __then(); } ; })(__then); } ; })(function __$_parseNic__15() { return (function __$_parseNic__15(__then) {




            if (options.publicIpId) {
              if (options.publicIpName) { self.output.warn($("--public-ip-name parameter will be ignored because --public-ip-id and --public-ip-name are mutually exclusive")); } ;
              nicProfile.ipConfigurations[0].publicIpAddress = {
                id: options.publicIpId }; __then(); } else { return (function __$_parseNic__15(__then) {


                if (options.publicIpName) {
                  return self.publicIpCrud.get(resourceGroupName, options.publicIpName, __cb(_, __frame, 63, 41, function ___(__0, __3) { publicip = __3;
                    if (!publicip) {
                      return _(new Error(util.format($("A public ip address  with name \"%s\" not found in the resource group \"%s\""), options.publicIpName, resourceGroupName))); } ;

                    nicProfile.ipConfigurations[0].publicIpAddress = {
                      id: publicip.id }; __then(); }, true)); } else { __then(); } ; })(__then); } ; })(function __$_parseNic__15() {




            lbAddressPoolIdsOpt = utils.getOptionalArg(options.lbAddressPoolIds);
            if (lbAddressPoolIdsOpt.hasValue) {

              nicProfile.ipConfigurations[0].loadBalancerBackendAddressPools = [];
              if (lbAddressPoolIdsOpt.value) {
                lbAddressPoolIds = lbAddressPoolIdsOpt.value.split(",");
                lbAddressPoolIds.forEach(function(lbAddressPoolId) {
                  lbAddressPoolId = lbAddressPoolId.replace(/'|''$/gm, "");
                  var loadBalancerBackendAddressPool = {
                    id: lbAddressPoolId };


                  if (!utils.findFirstCaseIgnore(nicProfile.ipConfigurations[0].loadBalancerBackendAddressPools, loadBalancerBackendAddressPool)) {
                    nicProfile.ipConfigurations[0].loadBalancerBackendAddressPools.push(loadBalancerBackendAddressPool); } ; }); } ; } ;





            lbInboundNatRuleIdsOpt = utils.getOptionalArg(options.lbInboundNatRuleIds);
            if (lbInboundNatRuleIdsOpt.hasValue) {

              nicProfile.ipConfigurations[0].loadBalancerInboundNatRules = [];
              if (lbInboundNatRuleIdsOpt.value) {
                lbInboundNatRuleIds = lbInboundNatRuleIdsOpt.value.split(",");
                lbInboundNatRuleIds.forEach(function(lbInboundNatRuleId) {
                  lbInboundNatRuleId = lbInboundNatRuleId.replace(/'|''$/gm, "");
                  var loadBalancerInboundNatRule = {
                    id: lbInboundNatRuleId };


                  if (!utils.findFirstCaseIgnore(nicProfile.ipConfigurations[0].loadBalancerInboundNatRules, loadBalancerInboundNatRule)) {
                    nicProfile.ipConfigurations[0].loadBalancerInboundNatRules.push(loadBalancerInboundNatRule); } ; }); } ; } ;





            if (options.internalDnsNameLabel) {
              nicProfile.dnsSettings = { };
              nicProfile.dnsSettings.internalDnsNameLabel = options.internalDnsNameLabel; } ;


            if (options.enableIpForwarding) {
              if ((!utils.ignoreCaseEquals(options.enableIpForwarding, "true") && !utils.ignoreCaseEquals(options.enableIpForwarding, "false"))) {
                return _(new Error($("enable-ip-forwarding parameter must be boolean"))); } ;

              nicProfile.enableIPForwarding = options.enableIpForwarding; } ;


            if (options.location) {
              nicProfile.location = options.location; } ;


            if (options.tags) {
              nicProfile.tags = tagUtils.buildTagsParameter(null, options); } ;


            return _(null, nicProfile); }); }); }); }); }});



module.exports = Nic;
