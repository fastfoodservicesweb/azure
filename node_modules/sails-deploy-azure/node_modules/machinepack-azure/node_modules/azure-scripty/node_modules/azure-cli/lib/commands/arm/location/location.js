/*** Generated by streamline 0.10.17 (callbacks) - DO NOT EDIT ***/ "use strict"; var __rt=require('streamline/lib/callbacks/runtime').runtime(__filename, false),__func=__rt.__func,__cb=__rt.__cb; var profile = require("../../../util/profile");

















var providerUtils = require("../providers/providerUtils");
var utils = require("../../../util/utils");

var $ = utils.getLocaleString;

exports.init = function(cli) {
  var log = cli.output;

  var group = cli.category("location").description($("Commands to get the available locations for all resource types"));


  group.command("list").description($("list the available locations")).option("--subscription <subscription>", $("the subscription identifier")).execute(function __1(resourceTypes, resourceGroup, options, _) { var subscription, client, allProviders, allResources; var __frame = { name: "__1", line: 33 }; return __func(_, this, arguments, __1, 3, __frame, function __$__1() {




      subscription = profile.current.getSubscription(options.subscription);
      client = utils.createResourceClient(subscription);


      return cli.interaction.withProgress($("Getting Resource Providers"), function __1(log, _) { var __frame = { name: "__1", line: 40 }; return __func(_, this, arguments, __1, 1, __frame, function __$__1() {

          return providerUtils.getAllProviders(client, __cb(_, __frame, 1, 39, function ___(__0, __1) { allProviders = __1; _(); }, true)); }); }, __cb(_, __frame, 6, 22, function __$__1() {


        allResources = buildResourceListWithLocation(allProviders);

        cli.interaction.formatOutput(allResources, function(data) {
          if ((data.length === 0)) {
            log.info($("No resources found")); }
           else {
            log.table(data, function(row, resource) {
              row.cell($("Name"), resource.name);
              row.cell($("Location"), resource.location); }); } ; }); _(); }, true)); }); });





  function buildResourceListWithLocation(allProviders) {
    var allResources = [];

    var locationList;
    var currentLocation;
    for (var i = 0; (i < allProviders.length); i++) {
      var provider = allProviders[i];
      for (var j = 0; (j < provider.resourceTypes.length); j++) {
        locationList = "";
        var resourceType = provider.resourceTypes[j];
        for (var k = 0; (k < resourceType.locations.length); k++) {
          currentLocation = resourceType.locations[k];
          if (currentLocation) {
            locationList = (locationList ? ((locationList + ",") + currentLocation) : currentLocation); } ; };


        if (locationList) {
          allResources.push({
            name: ((provider.namespace + "/") + resourceType.name),
            location: locationList }); } ; }; };




    return allResources; };};
