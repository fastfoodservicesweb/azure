/*** Generated by streamline 0.10.17 (callbacks) - DO NOT EDIT ***/ var __rt=require('streamline/lib/callbacks/runtime').runtime(__filename, false),__func=__rt.__func,__cb=__rt.__cb,__catch=__rt.__catch,__tryCatch=__rt.__tryCatch; var __ = require("underscore");















var util = require("util");
var utils = require("../../../util/utils");
var $ = utils.getLocaleString;
var vnetShowUtil = require("./vnetShowUtil");
var tagUtils = require("../tag/tagUtils");
var VNetUtil = require("../../../util/vnet.util");

function VirtualNetwork(cli, networkResourceProviderClient) {
  this.networkResourceProviderClient = networkResourceProviderClient;
  this.vnetUtil = new VNetUtil();
  this.output = cli.output;
  this.interaction = cli.interaction;};


__.extend(VirtualNetwork.prototype, {
  create: function create__1(resourceGroupName, name, location, options, _) { var self, vnet, requestBody, defaultAddressPrefix, tags, progress, __this = this; var __frame = { name: "create__1", line: 32 }; return __func(_, this, arguments, create__1, 4, __frame, function __$create__1() { self = __this;

      return self.get(resourceGroupName, name, null, __cb(_, __frame, 2, 20, function ___(__0, __1) { vnet = __1;

        if (vnet) {
          return _(new Error(util.format($("Virtual network \"%s\" already exists in resource group \"%s\""), name, resourceGroupName))); } ;


        requestBody = {
          name: name,
          location: location,
          addressSpace: {
            addressPrefixes: [] },

          dhcpOptions: {
            dnsServers: [] } };



        if (options.addressPrefixes) {
          self._addAddressPrefixes(options, requestBody); }
         else {
          defaultAddressPrefix = self.vnetUtil.defaultAddressSpaceInfo().ipv4Cidr;
          self.output.verbose(util.format($("Using default address prefix: %s"), defaultAddressPrefix));
          requestBody.addressSpace.addressPrefixes.push(defaultAddressPrefix); } ;


        if (options.dnsServers) {
          self._addDnsServers(options, requestBody); }
         else {
          self.output.verbose($("No DNS server specified")); } ;


        if (options.tags) {
          tags = tagUtils.buildTagsParameter(null, options);
          requestBody.tags = tags; }
         else {
          self.output.verbose($("No tags specified")); } ;


        progress = self.interaction.progress(util.format($("Creating virtual network \"%s\""), name)); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$create__1() {

              return self.networkResourceProviderClient.virtualNetworks.createOrUpdate(resourceGroupName, name, requestBody, __cb(_, __frame, 42, 57, function __$create__1() { _(null, null, true); }, true)); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$create__1() {

                progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$create__1() {

            return self.show(resourceGroupName, name, "Loading virtual network state", __cb(_, __frame, 46, 9, function __$create__1() { _(); }, true)); }); }); }, true)); }); },


  set: function set__2(resourceGroupName, name, options, _) { var self, vnet, optionalDnsServers, tags, key, progress, __this = this; var __frame = { name: "set__2", line: 81 }; return __func(_, this, arguments, set__2, 3, __frame, function __$set__2() { self = __this;

      return self.get(resourceGroupName, name, null, __cb(_, __frame, 2, 20, function ___(__0, __1) { vnet = __1;

        if (!vnet) {
          return _(new Error(util.format($("Virtual network \"%s\" not found in resource group \"%s\""), name, resourceGroupName))); } ;


        if (options.addressPrefixes) {
          vnet.addressSpace.addressPrefixes = [];
          self._addAddressPrefixes(options, vnet); } ;


        optionalDnsServers = utils.getOptionalArg(options.dnsServers);
        if (optionalDnsServers.hasValue) {
          if ((optionalDnsServers.value !== null)) {
            self._addDnsServers(options, vnet); }
           else {
            self.output.verbose($("Clearing DNS servers"));
            vnet.dhcpOptions.dnsServers = []; } ; } ;



        if ((options.tags === false)) {
          vnet.tags = { }; } ;


        if (options.tags) {
          tags = tagUtils.buildTagsParameter(vnet.tags, options);
          for (key in tags) {
            vnet.tags[key] = tags[key]; }; } ;



        progress = self.interaction.progress(util.format($("Updating virtual network \"%s\""), name)); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$set__2() {

              return self.networkResourceProviderClient.virtualNetworks.createOrUpdate(resourceGroupName, name, vnet, __cb(_, __frame, 36, 57, function __$set__2() { _(null, null, true); }, true)); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$set__2() {

                progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$set__2() {

            return self.show(resourceGroupName, name, "Loading virtual network state", __cb(_, __frame, 40, 9, function __$set__2() { _(); }, true)); }); }); }, true)); }); },


  list: function list__3(resourceGroupName, _) { var self, progress, vnets, __this = this; var __frame = { name: "list__3", line: 124 }; return __func(_, this, arguments, list__3, 1, __frame, function __$list__3() { self = __this;

      progress = self.interaction.progress("Listing virtual networks");

      vnets = null; return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$list__3() {

            return self.networkResourceProviderClient.virtualNetworks.list(resourceGroupName, __cb(_, __frame, 6, 65, function ___(__0, __1) { vnets = __1; _(null, null, true); }, true)); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$list__3() {

              progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$list__3() {


          self.interaction.formatOutput(vnets.virtualNetworks, function(outputData) {
            if ((outputData.length === 0)) {
              self.output.warn($("No virtual networks found")); }
             else {
              self.output.table(outputData, function(row, vnet) {
                row.cell($("ID"), vnet.id);
                row.cell($("Name"), vnet.name);
                row.cell($("Location"), vnet.location);
                row.cell($("Address prefixes"), vnet.addressSpace.addressPrefixes);
                var dnsServers = "";
                if (vnet.dhcpOptions) {
                  dnsServers = vnet.dhcpOptions.dnsServers; } ;

                row.cell($("DNS servers"), dnsServers); }); } ; }); _(); }); }); }); },





  show: function show__4(resourceGroupName, name, message, _) { var self, vnet, __this = this; var __frame = { name: "show__4", line: 154 }; return __func(_, this, arguments, show__4, 3, __frame, function __$show__4() { self = __this;

      return self.get(resourceGroupName, name, message, __cb(_, __frame, 2, 20, function ___(__0, __1) { vnet = __1;

        self.interaction.formatOutput(vnet, function(vnet) {
          if ((vnet === null)) {
            self.output.warn(util.format($("Virtual network \"%s\" not found"), name)); }
           else {
            vnetShowUtil.show(vnet, self.output); } ; }); _(); }, true)); }); },




  delete: function delete__5(resourceGroupName, name, options, _) { var self, vnet, progress, __this = this; var __frame = { name: "delete__5", line: 167 }; return __func(_, this, arguments, delete__5, 3, __frame, function __$delete__5() { self = __this;

      return self.get(resourceGroupName, name, null, __cb(_, __frame, 2, 20, function ___(__0, __2) { vnet = __2;

        if (!vnet) {
          self.output.error(util.format("Virtual network \"%s\" not found", name)); return _(null); } ; return (function __$delete__5(_) {



          var __1 = !options.quiet; if (!__1) { return _(null, __1); } ; return self.interaction.confirm(util.format($("Delete virtual network %s? [y/n] "), name), __cb(_, __frame, 9, 44, function ___(__0, __3) { var __2 = !__3; return _(null, __2); }, true)); })(__cb(_, __frame, -166, 17, function ___(__0, __3) { return (function __$delete__5(__then) { if (__3) { return _(null); } else { __then(); } ; })(function __$delete__5() {



            progress = self.interaction.progress(util.format($("Deleting virtual network \"%s\""), name)); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$delete__5() {

                  return self.networkResourceProviderClient.virtualNetworks.deleteMethod(resourceGroupName, name, __cb(_, __frame, 15, 57, function __$delete__5() { _(null, null, true); }, true)); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$delete__5() {

                    progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$delete__5() { _(); }); }); }); }, true)); }, true)); }); },



  get: function get__6(resourceGroupName, name, message, _) { var self, progress, vnet, __this = this; var __frame = { name: "get__6", line: 188 }; return __func(_, this, arguments, get__6, 3, __frame, function __$get__6() { self = __this;


      message = (message || util.format($("Looking up virtual network \"%s\""), name));
      progress = self.interaction.progress(message);

      vnet = null; return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$get__6() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$get__6() {

                  return self.networkResourceProviderClient.virtualNetworks.get(resourceGroupName, name, __cb(_, __frame, 8, 64, function ___(__0, __1) { vnet = __1; __then(); }, true)); }); })(function ___(e, __result) { __catch(function __$get__6() { if (e) {

                    if ((e.statusCode === 404)) {
                      return _(null, null); } ;

                    return _(e); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$get__6() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$get__6() {

              progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$get__6() {


          return _(null, vnet.virtualNetwork); }); }); }); },


  _addDnsServers: function(options, vnet) {
    var self = this;
    var dnsServers = options.dnsServers.split(",");

    for (var dnsNum in dnsServers) {
      var dnsServer = dnsServers[dnsNum];
      var dnsIndex = vnet.dhcpOptions.dnsServers.indexOf(dnsServer);
      if ((dnsIndex >= 0)) {
        continue; } ;


      var parsedDnsIp = self.vnetUtil.parseIPv4(dnsServer);
      if (parsedDnsIp.error) {
        throw new Error(parsedDnsIp.error); } ;


      vnet.dhcpOptions.dnsServers.push(dnsServer); }; },



  _addAddressPrefixes: function(options, vnet) {
    var self = this;
    var addressPrefixes = options.addressPrefixes.split(",");

    for (var addNum in addressPrefixes) {
      var addressPrefix = addressPrefixes[addNum];
      var parsedAddressPrefix = self.vnetUtil.parseIPv4Cidr(addressPrefix);
      if (parsedAddressPrefix.error) {
        throw new Error(parsedAddressPrefix.error); } ;


      vnet.addressSpace.addressPrefixes.push(addressPrefix); };


    for (var i = 0; (i < addressPrefixes.length); i++) {
      var addPrefixToCheck = addressPrefixes[i];
      for (var j = 0; (j < addressPrefixes.length); j++) {
        var addPrefixToCompare = addressPrefixes[j];
        if ((i === j)) {
          continue; } ;


        var overlapped = self.vnetUtil.isCidrsOverlapping(addPrefixToCheck, addPrefixToCompare);
        if (overlapped) {
          throw new Error(util.format($("Address prefix \"%s\" overlaps address prefix \"%s\""), addPrefixToCheck, addPrefixToCompare)); } ; }; }; }});






module.exports = VirtualNetwork;
