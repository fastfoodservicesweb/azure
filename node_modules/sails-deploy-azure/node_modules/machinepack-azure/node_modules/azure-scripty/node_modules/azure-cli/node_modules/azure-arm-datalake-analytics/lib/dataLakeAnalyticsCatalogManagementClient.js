/* jshint latedef:false */
/* jshint forin:false */
/* jshint noempty:false */

// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

'use strict';

var util = require('util');
var azureCommon = require('azure-common');
var Service = azureCommon.Service;
var WebResource = azureCommon.WebResource;

var DataLakeAnalyticsCatalogManagementClient = ( /** @lends DataLakeAnalyticsCatalogManagementClient */ function() {
  /**
   * @class
   * Creates an Azure Data Lake Analytics catalog management client.
   * Initializes a new instance of the DataLakeAnalyticsCatalogManagementClient
   * class.
   * @constructor
   * 
   * @param {SubscriptionCloudCredentials} credentials Gets subscription
   * credentials which uniquely identify Microsoft Azure subscription. The
   * subscription ID forms part of the URI for every service call.
   * 
   * @param {string} [credentials.subscriptionId]
   * 
   * @param {string} [catalogServiceUri] Gets the URI used as the base for all
   * cloud service requests.
   * 
   * @param {Array} filters
   */
  function DataLakeAnalyticsCatalogManagementClient(credentials, catalogServiceUri, filters) {
    if (credentials === null || credentials === undefined) {
      throw new Error('credentials cannot be null.');
    }
    
    DataLakeAnalyticsCatalogManagementClient['super_'].call(this, credentials, filters);
    
    this.credentials = credentials;
    this.catalogServiceUri = catalogServiceUri;
    if (this.userAgentSuffix === null || this.userAgentSuffix === undefined) {
      this.userAgentSuffix = '';
    }
    if (this.apiVersion === null || this.apiVersion === undefined) {
      this.apiVersion = '2015-10-01-preview';
    }
    if (this.longRunningOperationInitialTimeout === null || this.longRunningOperationInitialTimeout === undefined) {
      this.longRunningOperationInitialTimeout = -1;
    }
    if (this.longRunningOperationRetryTimeout === null || this.longRunningOperationRetryTimeout === undefined) {
      this.longRunningOperationRetryTimeout = -1;
    }
    /**
     * Provides an instance of the [CatalogOperations](-CatalogOperations.html)
     * object.
     * @type {object}
     */
    this.catalog = new CatalogOperations(this);
  }
  
  util.inherits(DataLakeAnalyticsCatalogManagementClient, Service);
  
  
  return DataLakeAnalyticsCatalogManagementClient;
})();
exports.DataLakeAnalyticsCatalogManagementClient = DataLakeAnalyticsCatalogManagementClient;

var CatalogOperations = ( /** @lends CatalogOperations */ function() {
  /**
   * @class
   * Operations for managing the Data Lake Analytics catalog
   * __NOTE__: An instance of this class is automatically created for an
   * instance of the [DataLakeAnalyticsCatalogManagementClient] {@link
   * DataLakeAnalyticsCatalogManagementClient~DataLakeAnalyticsCatalogManagementClient}.
   * See [catalog] {@link
   * DataLakeAnalyticsCatalogManagementClient~DataLakeAnalyticsCatalogManagementClient#catalog}.
   * Initializes a new instance of the CatalogOperations class.
   * @constructor
   * 
   * @param {DataLakeAnalyticsCatalogManagementClient} client Reference to the
   * service client.
   */
  function CatalogOperations(client) {
    this.client = client;
  }
  
  /**
   * Creates the specified secret for use with external data sources in the
   * specified database
   * 
   * @param {string} resourceGroupName The name of the resourceGroup the Data
   * Lake Analytics account is in
   * 
   * @param {string} accountName The name of the account to use
   * 
   * @param {string} databaseName The name of the database to create the secret
   * in.
   * 
   * @param {DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters} parameters
   * The parameters required to create the secret (name and password)
   * 
   * @param {string} parameters.secretName Gets or sets the name of the secret
   * to create.
   * 
   * @param {string} parameters.password Gets or sets the password for the
   * secret to pass in
   * 
   * @param {string} [parameters.uri] Gets or sets the URI identifier for the
   * secret in the format https://<hostname>:<port>
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  CatalogOperations.prototype.createSecret = function(resourceGroupName, accountName, databaseName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (accountName === null || accountName === undefined) {
      return callback(new Error('accountName cannot be null.'));
    }
    if (databaseName === null || databaseName === undefined) {
      return callback(new Error('databaseName cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    if (parameters.password === null || parameters.password === undefined) {
      return callback(new Error('parameters.password cannot be null.'));
    }
    if (parameters.secretName === null || parameters.secretName === undefined) {
      return callback(new Error('parameters.secretName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + 'https://';
    url2 = url2 + encodeURIComponent(accountName);
    url2 = url2 + '.';
    if (this.client.catalogServiceUri !== null && this.client.catalogServiceUri !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.catalogServiceUri);
    }
    url2 = url2 + '/catalog/usql/databases/';
    url2 = url2 + encodeURIComponent(databaseName);
    url2 = url2 + '/secrets/';
    url2 = url2 + encodeURIComponent(parameters.secretName);
    var queryParameters = [];
    queryParameters.push('api-version=2015-10-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PUT';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.2-preview' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.2-preview' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['useragent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.2-preview' + this.client.userAgentSuffix;
    }
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.2-preview' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.2-preview' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['User-Agent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.2-preview' + this.client.userAgentSuffix;
    }
    if (resourceGroupName !== null && resourceGroupName !== undefined) {
      httpRequest.headers['x-ms-client-resource-group-name'] = resourceGroupName;
    }
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      httpRequest.headers['x-ms-client-subscription-id'] = this.client.credentials.subscriptionId;
    }
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = null;
    
    var dataLakeAnalyticsCatalogSecretCreateOrUpdateParametersValue = {};
    requestDoc = dataLakeAnalyticsCatalogSecretCreateOrUpdateParametersValue;
    
    dataLakeAnalyticsCatalogSecretCreateOrUpdateParametersValue['password'] = parameters.password;
    
    if (parameters.uri !== null && parameters.uri !== undefined) {
      dataLakeAnalyticsCatalogSecretCreateOrUpdateParametersValue['uri'] = parameters.uri;
    }
    
    requestContent = JSON.stringify(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.isBuffer(requestContent) ? requestContent.length : Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var secretInstance = {};
          result.secret = secretInstance;
          
          var databaseNameValue = responseDoc['databaseName'];
          if (databaseNameValue !== null && databaseNameValue !== undefined) {
            var databaseNameInstance = databaseNameValue;
            secretInstance.databaseName = databaseNameInstance;
          }
          
          var credentialNameValue = responseDoc['credentialName'];
          if (credentialNameValue !== null && credentialNameValue !== undefined) {
            var credentialNameInstance = credentialNameValue;
            secretInstance.name = credentialNameInstance;
          }
          
          var userNameValue = responseDoc['userName'];
          if (userNameValue !== null && userNameValue !== undefined) {
            var userNameInstance = userNameValue;
            secretInstance.userName = userNameInstance;
          }
          
          var identityValue = responseDoc['identity'];
          if (identityValue !== null && identityValue !== undefined) {
            var identityInstance = identityValue;
            secretInstance.identity = identityInstance;
          }
          
          var computeAccountNameValue = responseDoc['computeAccountName'];
          if (computeAccountNameValue !== null && computeAccountNameValue !== undefined) {
            var computeAccountNameInstance = computeAccountNameValue;
            secretInstance.computeAccountName = computeAccountNameInstance;
          }
          
          var versionValue = responseDoc['version'];
          if (versionValue !== null && versionValue !== undefined) {
            var versionInstance = versionValue;
            secretInstance.version = versionInstance;
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Deletes the specified secret in the specified database
   * 
   * @param {string} resourceGroupName The name of the resourceGroup the Data
   * Lake Analytics account is in
   * 
   * @param {string} accountName The name of the account to use
   * 
   * @param {string} databaseName The name of the database to delete the secret
   * from.
   * 
   * @param {string} [secretName] The name of the secret to delete
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  CatalogOperations.prototype.deleteSecret = function(resourceGroupName, accountName, databaseName, secretName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (accountName === null || accountName === undefined) {
      return callback(new Error('accountName cannot be null.'));
    }
    if (databaseName === null || databaseName === undefined) {
      return callback(new Error('databaseName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + 'https://';
    url2 = url2 + encodeURIComponent(accountName);
    url2 = url2 + '.';
    if (this.client.catalogServiceUri !== null && this.client.catalogServiceUri !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.catalogServiceUri);
    }
    url2 = url2 + '/catalog/usql/databases/';
    url2 = url2 + encodeURIComponent(databaseName);
    url2 = url2 + '/secrets';
    if (secretName !== null && secretName !== undefined) {
      url2 = url2 + '/' + encodeURIComponent(secretName);
    }
    var queryParameters = [];
    queryParameters.push('api-version=2015-10-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'DELETE';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.2-preview' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.2-preview' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['useragent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.2-preview' + this.client.userAgentSuffix;
    }
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.2-preview' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.2-preview' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['User-Agent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.2-preview' + this.client.userAgentSuffix;
    }
    if (resourceGroupName !== null && resourceGroupName !== undefined) {
      httpRequest.headers['x-ms-client-resource-group-name'] = resourceGroupName;
    }
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      httpRequest.headers['x-ms-client-subscription-id'] = this.client.credentials.subscriptionId;
    }
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Retrieves the specified assembly from the current DataLakeAnalytics catalog
   * 
   * @param {string} resourceGroupName The name of the resourceGroup the Data
   * Lake Analytics account is in
   * 
   * @param {string} accountName The name of the account to use
   * 
   * @param {string} databaseName The name of the database to find the assembly
   * in.
   * 
   * @param {string} assemblyName The name of the assembly to find.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  CatalogOperations.prototype.getAssembly = function(resourceGroupName, accountName, databaseName, assemblyName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (accountName === null || accountName === undefined) {
      return callback(new Error('accountName cannot be null.'));
    }
    if (databaseName === null || databaseName === undefined) {
      return callback(new Error('databaseName cannot be null.'));
    }
    if (assemblyName === null || assemblyName === undefined) {
      return callback(new Error('assemblyName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + 'https://';
    url2 = url2 + encodeURIComponent(accountName);
    url2 = url2 + '.';
    if (this.client.catalogServiceUri !== null && this.client.catalogServiceUri !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.catalogServiceUri);
    }
    url2 = url2 + '/catalog/usql/databases/';
    url2 = url2 + encodeURIComponent(databaseName);
    url2 = url2 + '/assemblies/';
    url2 = url2 + encodeURIComponent(assemblyName);
    var queryParameters = [];
    queryParameters.push('api-version=2015-10-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.2-preview' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.2-preview' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['useragent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.2-preview' + this.client.userAgentSuffix;
    }
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.2-preview' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.2-preview' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['User-Agent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.2-preview' + this.client.userAgentSuffix;
    }
    if (resourceGroupName !== null && resourceGroupName !== undefined) {
      httpRequest.headers['x-ms-client-resource-group-name'] = resourceGroupName;
    }
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      httpRequest.headers['x-ms-client-subscription-id'] = this.client.credentials.subscriptionId;
    }
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var assemblyInstance = { dependencies: [], files: [] };
          result.assembly = assemblyInstance;
          
          var databaseNameValue = responseDoc['databaseName'];
          if (databaseNameValue !== null && databaseNameValue !== undefined) {
            var databaseNameInstance = databaseNameValue;
            assemblyInstance.databaseName = databaseNameInstance;
          }
          
          var assemblyNameValue = responseDoc['assemblyName'];
          if (assemblyNameValue !== null && assemblyNameValue !== undefined) {
            var assemblyNameInstance = assemblyNameValue;
            assemblyInstance.name = assemblyNameInstance;
          }
          
          var clrNameValue = responseDoc['clrName'];
          if (clrNameValue !== null && clrNameValue !== undefined) {
            var clrNameInstance = clrNameValue;
            assemblyInstance.clrName = clrNameInstance;
          }
          
          var isVisibleValue = responseDoc['isVisible'];
          if (isVisibleValue !== null && isVisibleValue !== undefined) {
            var isVisibleInstance = isVisibleValue;
            assemblyInstance.isVisible = isVisibleInstance;
          }
          
          var isUserDefinedValue = responseDoc['isUserDefined'];
          if (isUserDefinedValue !== null && isUserDefinedValue !== undefined) {
            var isUserDefinedInstance = isUserDefinedValue;
            assemblyInstance.isUserDefined = isUserDefinedInstance;
          }
          
          var filesArray = responseDoc['files'];
          if (filesArray !== null && filesArray !== undefined) {
            for (var loweredIndex1 = 0; loweredIndex1 < filesArray.length; loweredIndex1 = loweredIndex1 + 1) {
              var filesValue = filesArray[loweredIndex1];
              var uSqlAssemblyFileInfoInstance = {};
              assemblyInstance.files.push(uSqlAssemblyFileInfoInstance);
              
              var typeValue = filesValue['type'];
              if (typeValue !== null && typeValue !== undefined) {
                var typeInstance = typeValue;
                uSqlAssemblyFileInfoInstance.type = typeInstance;
              }
              
              var originalPathValue = filesValue['originalPath'];
              if (originalPathValue !== null && originalPathValue !== undefined) {
                var originalPathInstance = originalPathValue;
                uSqlAssemblyFileInfoInstance.originalPath = originalPathInstance;
              }
              
              var contentPathValue = filesValue['contentPath'];
              if (contentPathValue !== null && contentPathValue !== undefined) {
                var contentPathInstance = contentPathValue;
                uSqlAssemblyFileInfoInstance.contentPath = contentPathInstance;
              }
            }
          }
          
          var dependenciesArray = responseDoc['dependencies'];
          if (dependenciesArray !== null && dependenciesArray !== undefined) {
            for (var loweredIndex2 = 0; loweredIndex2 < dependenciesArray.length; loweredIndex2 = loweredIndex2 + 1) {
              var dependenciesValue = dependenciesArray[loweredIndex2];
              var uSqlAssemblyDependencyInfoInstance = {};
              assemblyInstance.dependencies.push(uSqlAssemblyDependencyInfoInstance);
              
              var entityIdValue = dependenciesValue['entityId'];
              if (entityIdValue !== null && entityIdValue !== undefined) {
                var entityIdInstance = {};
                uSqlAssemblyDependencyInfoInstance.entityId = entityIdInstance;
                
                var nameValue = entityIdValue['name'];
                if (nameValue !== null && nameValue !== undefined) {
                  var nameInstance = {};
                  entityIdInstance.name = nameInstance;
                  
                  var firstPartValue = nameValue['firstPart'];
                  if (firstPartValue !== null && firstPartValue !== undefined) {
                    var firstPartInstance = firstPartValue;
                    nameInstance.firstPart = firstPartInstance;
                  }
                  
                  var secondPartValue = nameValue['secondPart'];
                  if (secondPartValue !== null && secondPartValue !== undefined) {
                    var secondPartInstance = secondPartValue;
                    nameInstance.secondPart = secondPartInstance;
                  }
                  
                  var thirdPartValue = nameValue['thirdPart'];
                  if (thirdPartValue !== null && thirdPartValue !== undefined) {
                    var thirdPartInstance = thirdPartValue;
                    nameInstance.thirdPart = thirdPartInstance;
                  }
                  
                  var serverValue = nameValue['server'];
                  if (serverValue !== null && serverValue !== undefined) {
                    var serverInstance = serverValue;
                    nameInstance.server = serverInstance;
                  }
                }
                
                var versionValue = entityIdValue['version'];
                if (versionValue !== null && versionValue !== undefined) {
                  var versionInstance = versionValue;
                  entityIdInstance.version = versionInstance;
                }
              }
            }
          }
          
          var computeAccountNameValue = responseDoc['computeAccountName'];
          if (computeAccountNameValue !== null && computeAccountNameValue !== undefined) {
            var computeAccountNameInstance = computeAccountNameValue;
            assemblyInstance.computeAccountName = computeAccountNameInstance;
          }
          
          var versionValue2 = responseDoc['version'];
          if (versionValue2 !== null && versionValue2 !== undefined) {
            var versionInstance2 = versionValue2;
            assemblyInstance.version = versionInstance2;
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Retrieves the specified database from the current DataLakeAnalytics catalog
   * 
   * @param {string} resourceGroupName The name of the resourceGroup the Data
   * Lake Analytics account is in
   * 
   * @param {string} accountName The name of the account to use
   * 
   * @param {string} databaseName The path to the file to create.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  CatalogOperations.prototype.getDatabase = function(resourceGroupName, accountName, databaseName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (accountName === null || accountName === undefined) {
      return callback(new Error('accountName cannot be null.'));
    }
    if (databaseName === null || databaseName === undefined) {
      return callback(new Error('databaseName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + 'https://';
    url2 = url2 + encodeURIComponent(accountName);
    url2 = url2 + '.';
    if (this.client.catalogServiceUri !== null && this.client.catalogServiceUri !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.catalogServiceUri);
    }
    url2 = url2 + '/catalog/usql/databases/';
    url2 = url2 + encodeURIComponent(databaseName);
    var queryParameters = [];
    queryParameters.push('api-version=2015-10-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.2-preview' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.2-preview' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['useragent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.2-preview' + this.client.userAgentSuffix;
    }
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.2-preview' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.2-preview' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['User-Agent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.2-preview' + this.client.userAgentSuffix;
    }
    if (resourceGroupName !== null && resourceGroupName !== undefined) {
      httpRequest.headers['x-ms-client-resource-group-name'] = resourceGroupName;
    }
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      httpRequest.headers['x-ms-client-subscription-id'] = this.client.credentials.subscriptionId;
    }
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var databaseInstance = {};
          result.database = databaseInstance;
          
          var databaseNameValue = responseDoc['databaseName'];
          if (databaseNameValue !== null && databaseNameValue !== undefined) {
            var databaseNameInstance = databaseNameValue;
            databaseInstance.name = databaseNameInstance;
          }
          
          var computeAccountNameValue = responseDoc['computeAccountName'];
          if (computeAccountNameValue !== null && computeAccountNameValue !== undefined) {
            var computeAccountNameInstance = computeAccountNameValue;
            databaseInstance.computeAccountName = computeAccountNameInstance;
          }
          
          var versionValue = responseDoc['version'];
          if (versionValue !== null && versionValue !== undefined) {
            var versionInstance = versionValue;
            databaseInstance.version = versionInstance;
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Retrieves the specified external data source from the current
   * DataLakeAnalytics catalog
   * 
   * @param {string} resourceGroupName The name of the resourceGroup the Data
   * Lake Analytics account is in
   * 
   * @param {string} accountName The name of the account to use
   * 
   * @param {string} databaseName The name of the database to find the external
   * Data Source in.
   * 
   * @param {string} externalDataSourceName The name of the external Data
   * Source to find.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  CatalogOperations.prototype.getExternalDataSource = function(resourceGroupName, accountName, databaseName, externalDataSourceName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (accountName === null || accountName === undefined) {
      return callback(new Error('accountName cannot be null.'));
    }
    if (databaseName === null || databaseName === undefined) {
      return callback(new Error('databaseName cannot be null.'));
    }
    if (externalDataSourceName === null || externalDataSourceName === undefined) {
      return callback(new Error('externalDataSourceName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + 'https://';
    url2 = url2 + encodeURIComponent(accountName);
    url2 = url2 + '.';
    if (this.client.catalogServiceUri !== null && this.client.catalogServiceUri !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.catalogServiceUri);
    }
    url2 = url2 + '/catalog/usql/databases/';
    url2 = url2 + encodeURIComponent(databaseName);
    url2 = url2 + '/externaldatasources/';
    url2 = url2 + encodeURIComponent(externalDataSourceName);
    var queryParameters = [];
    queryParameters.push('api-version=2015-10-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.2-preview' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.2-preview' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['useragent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.2-preview' + this.client.userAgentSuffix;
    }
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.2-preview' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.2-preview' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['User-Agent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.2-preview' + this.client.userAgentSuffix;
    }
    if (resourceGroupName !== null && resourceGroupName !== undefined) {
      httpRequest.headers['x-ms-client-resource-group-name'] = resourceGroupName;
    }
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      httpRequest.headers['x-ms-client-subscription-id'] = this.client.credentials.subscriptionId;
    }
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var externalDataSourceInstance = { pushdownTypes: [] };
          result.externalDataSource = externalDataSourceInstance;
          
          var databaseNameValue = responseDoc['databaseName'];
          if (databaseNameValue !== null && databaseNameValue !== undefined) {
            var databaseNameInstance = databaseNameValue;
            externalDataSourceInstance.databaseName = databaseNameInstance;
          }
          
          var externalDataSourceNameValue = responseDoc['externalDataSourceName'];
          if (externalDataSourceNameValue !== null && externalDataSourceNameValue !== undefined) {
            var externalDataSourceNameInstance = externalDataSourceNameValue;
            externalDataSourceInstance.name = externalDataSourceNameInstance;
          }
          
          var providerValue = responseDoc['provider'];
          if (providerValue !== null && providerValue !== undefined) {
            var providerInstance = providerValue;
            externalDataSourceInstance.provider = providerInstance;
          }
          
          var providerStringValue = responseDoc['providerString'];
          if (providerStringValue !== null && providerStringValue !== undefined) {
            var providerStringInstance = providerStringValue;
            externalDataSourceInstance.providerString = providerStringInstance;
          }
          
          var pushdownTypesArray = responseDoc['pushdownTypes'];
          if (pushdownTypesArray !== null && pushdownTypesArray !== undefined) {
            for (var loweredIndex1 = 0; loweredIndex1 < pushdownTypesArray.length; loweredIndex1 = loweredIndex1 + 1) {
              var pushdownTypesValue = pushdownTypesArray[loweredIndex1];
              externalDataSourceInstance.pushdownTypes.push(pushdownTypesValue);
            }
          }
          
          var computeAccountNameValue = responseDoc['computeAccountName'];
          if (computeAccountNameValue !== null && computeAccountNameValue !== undefined) {
            var computeAccountNameInstance = computeAccountNameValue;
            externalDataSourceInstance.computeAccountName = computeAccountNameInstance;
          }
          
          var versionValue = responseDoc['version'];
          if (versionValue !== null && versionValue !== undefined) {
            var versionInstance = versionValue;
            externalDataSourceInstance.version = versionInstance;
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Retrieves the specified schema from the current DataLakeAnalytics catalog
   * 
   * @param {string} resourceGroupName The name of the resourceGroup the Data
   * Lake Analytics account is in
   * 
   * @param {string} accountName The name of the account to use
   * 
   * @param {string} databaseName The name of the database to find the schema
   * in.
   * 
   * @param {string} schemaName The name of the schema to find.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  CatalogOperations.prototype.getSchema = function(resourceGroupName, accountName, databaseName, schemaName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (accountName === null || accountName === undefined) {
      return callback(new Error('accountName cannot be null.'));
    }
    if (databaseName === null || databaseName === undefined) {
      return callback(new Error('databaseName cannot be null.'));
    }
    if (schemaName === null || schemaName === undefined) {
      return callback(new Error('schemaName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + 'https://';
    url2 = url2 + encodeURIComponent(accountName);
    url2 = url2 + '.';
    if (this.client.catalogServiceUri !== null && this.client.catalogServiceUri !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.catalogServiceUri);
    }
    url2 = url2 + '/catalog/usql/databases/';
    url2 = url2 + encodeURIComponent(databaseName);
    url2 = url2 + '/schemas/';
    url2 = url2 + encodeURIComponent(schemaName);
    var queryParameters = [];
    queryParameters.push('api-version=2015-10-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.2-preview' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.2-preview' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['useragent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.2-preview' + this.client.userAgentSuffix;
    }
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.2-preview' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.2-preview' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['User-Agent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.2-preview' + this.client.userAgentSuffix;
    }
    if (resourceGroupName !== null && resourceGroupName !== undefined) {
      httpRequest.headers['x-ms-client-resource-group-name'] = resourceGroupName;
    }
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      httpRequest.headers['x-ms-client-subscription-id'] = this.client.credentials.subscriptionId;
    }
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var schemaInstance = {};
          result.schema = schemaInstance;
          
          var databaseNameValue = responseDoc['databaseName'];
          if (databaseNameValue !== null && databaseNameValue !== undefined) {
            var databaseNameInstance = databaseNameValue;
            schemaInstance.databaseName = databaseNameInstance;
          }
          
          var schemaNameValue = responseDoc['schemaName'];
          if (schemaNameValue !== null && schemaNameValue !== undefined) {
            var schemaNameInstance = schemaNameValue;
            schemaInstance.name = schemaNameInstance;
          }
          
          var computeAccountNameValue = responseDoc['computeAccountName'];
          if (computeAccountNameValue !== null && computeAccountNameValue !== undefined) {
            var computeAccountNameInstance = computeAccountNameValue;
            schemaInstance.computeAccountName = computeAccountNameInstance;
          }
          
          var versionValue = responseDoc['version'];
          if (versionValue !== null && versionValue !== undefined) {
            var versionInstance = versionValue;
            schemaInstance.version = versionInstance;
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Retrieves the specified table from the current DataLakeAnalytics catalog
   * 
   * @param {string} resourceGroupName The name of the resourceGroup the Data
   * Lake Analytics account is in
   * 
   * @param {string} accountName The name of the account to use
   * 
   * @param {string} databaseName The name of the database to find the table in.
   * 
   * @param {string} schemaName The name of the schema to find the table in.
   * 
   * @param {string} tableName The name of the table to find.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  CatalogOperations.prototype.getTable = function(resourceGroupName, accountName, databaseName, schemaName, tableName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (accountName === null || accountName === undefined) {
      return callback(new Error('accountName cannot be null.'));
    }
    if (databaseName === null || databaseName === undefined) {
      return callback(new Error('databaseName cannot be null.'));
    }
    if (schemaName === null || schemaName === undefined) {
      return callback(new Error('schemaName cannot be null.'));
    }
    if (tableName === null || tableName === undefined) {
      return callback(new Error('tableName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + 'https://';
    url2 = url2 + encodeURIComponent(accountName);
    url2 = url2 + '.';
    if (this.client.catalogServiceUri !== null && this.client.catalogServiceUri !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.catalogServiceUri);
    }
    url2 = url2 + '/catalog/usql/databases/';
    url2 = url2 + encodeURIComponent(databaseName);
    url2 = url2 + '/schemas/';
    url2 = url2 + encodeURIComponent(schemaName);
    url2 = url2 + '/tables/';
    url2 = url2 + encodeURIComponent(tableName);
    var queryParameters = [];
    queryParameters.push('api-version=2015-10-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.2-preview' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.2-preview' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['useragent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.2-preview' + this.client.userAgentSuffix;
    }
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.2-preview' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.2-preview' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['User-Agent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.2-preview' + this.client.userAgentSuffix;
    }
    if (resourceGroupName !== null && resourceGroupName !== undefined) {
      httpRequest.headers['x-ms-client-resource-group-name'] = resourceGroupName;
    }
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      httpRequest.headers['x-ms-client-subscription-id'] = this.client.credentials.subscriptionId;
    }
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var tableInstance = { columnList: [], indexList: [], partitionKeyList: [] };
          result.table = tableInstance;
          
          var databaseNameValue = responseDoc['databaseName'];
          if (databaseNameValue !== null && databaseNameValue !== undefined) {
            var databaseNameInstance = databaseNameValue;
            tableInstance.databaseName = databaseNameInstance;
          }
          
          var schemaNameValue = responseDoc['schemaName'];
          if (schemaNameValue !== null && schemaNameValue !== undefined) {
            var schemaNameInstance = schemaNameValue;
            tableInstance.schemaName = schemaNameInstance;
          }
          
          var tableNameValue = responseDoc['tableName'];
          if (tableNameValue !== null && tableNameValue !== undefined) {
            var tableNameInstance = tableNameValue;
            tableInstance.name = tableNameInstance;
          }
          
          var columnListArray = responseDoc['columnList'];
          if (columnListArray !== null && columnListArray !== undefined) {
            for (var loweredIndex1 = 0; loweredIndex1 < columnListArray.length; loweredIndex1 = loweredIndex1 + 1) {
              var columnListValue = columnListArray[loweredIndex1];
              var uSqlTableColumnInstance = {};
              tableInstance.columnList.push(uSqlTableColumnInstance);
              
              var nameValue = columnListValue['name'];
              if (nameValue !== null && nameValue !== undefined) {
                var nameInstance = nameValue;
                uSqlTableColumnInstance.name = nameInstance;
              }
              
              var typeValue = columnListValue['type'];
              if (typeValue !== null && typeValue !== undefined) {
                var typeInstance = typeValue;
                uSqlTableColumnInstance.type = typeInstance;
              }
            }
          }
          
          var indexListArray = responseDoc['indexList'];
          if (indexListArray !== null && indexListArray !== undefined) {
            for (var loweredIndex2 = 0; loweredIndex2 < indexListArray.length; loweredIndex2 = loweredIndex2 + 1) {
              var indexListValue = indexListArray[loweredIndex2];
              var uSqlIndexInstance = { columns: [], indexKeys: [], partitionKeyList: [], streamNames: [] };
              tableInstance.indexList.push(uSqlIndexInstance);
              
              var nameValue2 = indexListValue['name'];
              if (nameValue2 !== null && nameValue2 !== undefined) {
                var nameInstance2 = nameValue2;
                uSqlIndexInstance.name = nameInstance2;
              }
              
              var indexKeysArray = indexListValue['indexKeys'];
              if (indexKeysArray !== null && indexKeysArray !== undefined) {
                for (var loweredIndex3 = 0; loweredIndex3 < indexKeysArray.length; loweredIndex3 = loweredIndex3 + 1) {
                  var indexKeysValue = indexKeysArray[loweredIndex3];
                  var uSqlDirectedColumnInstance = {};
                  uSqlIndexInstance.indexKeys.push(uSqlDirectedColumnInstance);
                  
                  var nameValue3 = indexKeysValue['name'];
                  if (nameValue3 !== null && nameValue3 !== undefined) {
                    var nameInstance3 = nameValue3;
                    uSqlDirectedColumnInstance.name = nameInstance3;
                  }
                  
                  var descendingValue = indexKeysValue['descending'];
                  if (descendingValue !== null && descendingValue !== undefined) {
                    var descendingInstance = descendingValue;
                    uSqlDirectedColumnInstance.descending = descendingInstance;
                  }
                }
              }
              
              var columnsArray = indexListValue['columns'];
              if (columnsArray !== null && columnsArray !== undefined) {
                for (var loweredIndex4 = 0; loweredIndex4 < columnsArray.length; loweredIndex4 = loweredIndex4 + 1) {
                  var columnsValue = columnsArray[loweredIndex4];
                  uSqlIndexInstance.columns.push(columnsValue);
                }
              }
              
              var distributionInfoValue = indexListValue['distributionInfo'];
              if (distributionInfoValue !== null && distributionInfoValue !== undefined) {
                var distributionInfoInstance = { keys: [] };
                uSqlIndexInstance.distributionInfo = distributionInfoInstance;
                
                var typeValue2 = distributionInfoValue['type'];
                if (typeValue2 !== null && typeValue2 !== undefined) {
                  var typeInstance2 = typeValue2;
                  distributionInfoInstance.type = typeInstance2;
                }
                
                var keysArray = distributionInfoValue['keys'];
                if (keysArray !== null && keysArray !== undefined) {
                  for (var loweredIndex5 = 0; loweredIndex5 < keysArray.length; loweredIndex5 = loweredIndex5 + 1) {
                    var keysValue = keysArray[loweredIndex5];
                    var uSqlDirectedColumnInstance2 = {};
                    distributionInfoInstance.keys.push(uSqlDirectedColumnInstance2);
                    
                    var nameValue4 = keysValue['name'];
                    if (nameValue4 !== null && nameValue4 !== undefined) {
                      var nameInstance4 = nameValue4;
                      uSqlDirectedColumnInstance2.name = nameInstance4;
                    }
                    
                    var descendingValue2 = keysValue['descending'];
                    if (descendingValue2 !== null && descendingValue2 !== undefined) {
                      var descendingInstance2 = descendingValue2;
                      uSqlDirectedColumnInstance2.descending = descendingInstance2;
                    }
                  }
                }
                
                var countValue = distributionInfoValue['count'];
                if (countValue !== null && countValue !== undefined) {
                  var countInstance = countValue;
                  distributionInfoInstance.count = countInstance;
                }
              }
              
              var partitionFunctionValue = indexListValue['partitionFunction'];
              if (partitionFunctionValue !== null && partitionFunctionValue !== undefined) {
                var partitionFunctionInstance = partitionFunctionValue;
                uSqlIndexInstance.partitionFunction = partitionFunctionInstance;
              }
              
              var partitionKeyListArray = indexListValue['partitionKeyList'];
              if (partitionKeyListArray !== null && partitionKeyListArray !== undefined) {
                for (var loweredIndex6 = 0; loweredIndex6 < partitionKeyListArray.length; loweredIndex6 = loweredIndex6 + 1) {
                  var partitionKeyListValue = partitionKeyListArray[loweredIndex6];
                  uSqlIndexInstance.partitionKeyList.push(partitionKeyListValue);
                }
              }
              
              var streamNamesArray = indexListValue['streamNames'];
              if (streamNamesArray !== null && streamNamesArray !== undefined) {
                for (var loweredIndex7 = 0; loweredIndex7 < streamNamesArray.length; loweredIndex7 = loweredIndex7 + 1) {
                  var streamNamesValue = streamNamesArray[loweredIndex7];
                  uSqlIndexInstance.streamNames.push(streamNamesValue);
                }
              }
              
              var isColumnstoreValue = indexListValue['isColumnstore'];
              if (isColumnstoreValue !== null && isColumnstoreValue !== undefined) {
                var isColumnstoreInstance = isColumnstoreValue;
                uSqlIndexInstance.isColumnstore = isColumnstoreInstance;
              }
              
              var indexIdValue = indexListValue['indexId'];
              if (indexIdValue !== null && indexIdValue !== undefined) {
                var indexIdInstance = indexIdValue;
                uSqlIndexInstance.indexId = indexIdInstance;
              }
              
              var isUniqueValue = indexListValue['isUnique'];
              if (isUniqueValue !== null && isUniqueValue !== undefined) {
                var isUniqueInstance = isUniqueValue;
                uSqlIndexInstance.isCoIsUniquelumnstore = isUniqueInstance;
              }
            }
          }
          
          var partitionKeyListArray2 = responseDoc['partitionKeyList'];
          if (partitionKeyListArray2 !== null && partitionKeyListArray2 !== undefined) {
            for (var loweredIndex8 = 0; loweredIndex8 < partitionKeyListArray2.length; loweredIndex8 = loweredIndex8 + 1) {
              var partitionKeyListValue2 = partitionKeyListArray2[loweredIndex8];
              tableInstance.partitionKeyList.push(partitionKeyListValue2);
            }
          }
          
          var externalTableValue = responseDoc['externalTable'];
          if (externalTableValue !== null && externalTableValue !== undefined) {
            var externalTableInstance = {};
            tableInstance.externalTable = externalTableInstance;
            
            var tableNameValue2 = externalTableValue['tableName'];
            if (tableNameValue2 !== null && tableNameValue2 !== undefined) {
              var tableNameInstance2 = tableNameValue2;
              externalTableInstance.tableName = tableNameInstance2;
            }
            
            var dataSourceValue = externalTableValue['dataSource'];
            if (dataSourceValue !== null && dataSourceValue !== undefined) {
              var dataSourceInstance = {};
              externalTableInstance.dataSource = dataSourceInstance;
              
              var nameValue5 = dataSourceValue['name'];
              if (nameValue5 !== null && nameValue5 !== undefined) {
                var nameInstance5 = {};
                dataSourceInstance.name = nameInstance5;
                
                var firstPartValue = nameValue5['firstPart'];
                if (firstPartValue !== null && firstPartValue !== undefined) {
                  var firstPartInstance = firstPartValue;
                  nameInstance5.firstPart = firstPartInstance;
                }
                
                var secondPartValue = nameValue5['secondPart'];
                if (secondPartValue !== null && secondPartValue !== undefined) {
                  var secondPartInstance = secondPartValue;
                  nameInstance5.secondPart = secondPartInstance;
                }
                
                var thirdPartValue = nameValue5['thirdPart'];
                if (thirdPartValue !== null && thirdPartValue !== undefined) {
                  var thirdPartInstance = thirdPartValue;
                  nameInstance5.thirdPart = thirdPartInstance;
                }
                
                var serverValue = nameValue5['server'];
                if (serverValue !== null && serverValue !== undefined) {
                  var serverInstance = serverValue;
                  nameInstance5.server = serverInstance;
                }
              }
              
              var versionValue = dataSourceValue['version'];
              if (versionValue !== null && versionValue !== undefined) {
                var versionInstance = versionValue;
                dataSourceInstance.version = versionInstance;
              }
            }
          }
          
          var computeAccountNameValue = responseDoc['computeAccountName'];
          if (computeAccountNameValue !== null && computeAccountNameValue !== undefined) {
            var computeAccountNameInstance = computeAccountNameValue;
            tableInstance.computeAccountName = computeAccountNameInstance;
          }
          
          var versionValue2 = responseDoc['version'];
          if (versionValue2 !== null && versionValue2 !== undefined) {
            var versionInstance2 = versionValue2;
            tableInstance.version = versionInstance2;
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Retrieves the specified table from the current DataLakeAnalytics catalog
   * 
   * @param {string} resourceGroupName The name of the resourceGroup the Data
   * Lake Analytics account is in
   * 
   * @param {string} accountName The name of the account to use
   * 
   * @param {string} databaseName The name of the database to find the
   * statistics in.
   * 
   * @param {string} schemaName The name of the schema to find the statistics
   * in.
   * 
   * @param {string} tableName The name of the table to find the statistics in.
   * 
   * @param {string} statisticsName The name of the table statistics to find.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  CatalogOperations.prototype.getTableStatistic = function(resourceGroupName, accountName, databaseName, schemaName, tableName, statisticsName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (accountName === null || accountName === undefined) {
      return callback(new Error('accountName cannot be null.'));
    }
    if (databaseName === null || databaseName === undefined) {
      return callback(new Error('databaseName cannot be null.'));
    }
    if (schemaName === null || schemaName === undefined) {
      return callback(new Error('schemaName cannot be null.'));
    }
    if (tableName === null || tableName === undefined) {
      return callback(new Error('tableName cannot be null.'));
    }
    if (statisticsName === null || statisticsName === undefined) {
      return callback(new Error('statisticsName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + 'https://';
    url2 = url2 + encodeURIComponent(accountName);
    url2 = url2 + '.';
    if (this.client.catalogServiceUri !== null && this.client.catalogServiceUri !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.catalogServiceUri);
    }
    url2 = url2 + '/catalog/usql/databases/';
    url2 = url2 + encodeURIComponent(databaseName);
    url2 = url2 + '/schemas/';
    url2 = url2 + encodeURIComponent(schemaName);
    url2 = url2 + '/tables/';
    url2 = url2 + encodeURIComponent(tableName);
    url2 = url2 + '/statistics/';
    url2 = url2 + encodeURIComponent(statisticsName);
    var queryParameters = [];
    queryParameters.push('api-version=2015-10-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.2-preview' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.2-preview' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['useragent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.2-preview' + this.client.userAgentSuffix;
    }
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.2-preview' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.2-preview' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['User-Agent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.2-preview' + this.client.userAgentSuffix;
    }
    if (resourceGroupName !== null && resourceGroupName !== undefined) {
      httpRequest.headers['x-ms-client-resource-group-name'] = resourceGroupName;
    }
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      httpRequest.headers['x-ms-client-subscription-id'] = this.client.credentials.subscriptionId;
    }
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var statisticsInstance = { colNames: [] };
          result.statistics = statisticsInstance;
          
          var databaseNameValue = responseDoc['databaseName'];
          if (databaseNameValue !== null && databaseNameValue !== undefined) {
            var databaseNameInstance = databaseNameValue;
            statisticsInstance.databaseName = databaseNameInstance;
          }
          
          var schemaNameValue = responseDoc['schemaName'];
          if (schemaNameValue !== null && schemaNameValue !== undefined) {
            var schemaNameInstance = schemaNameValue;
            statisticsInstance.schemaName = schemaNameInstance;
          }
          
          var tableNameValue = responseDoc['tableName'];
          if (tableNameValue !== null && tableNameValue !== undefined) {
            var tableNameInstance = tableNameValue;
            statisticsInstance.tableName = tableNameInstance;
          }
          
          var statisticsNameValue = responseDoc['statisticsName'];
          if (statisticsNameValue !== null && statisticsNameValue !== undefined) {
            var statisticsNameInstance = statisticsNameValue;
            statisticsInstance.name = statisticsNameInstance;
          }
          
          var userStatNameValue = responseDoc['userStatName'];
          if (userStatNameValue !== null && userStatNameValue !== undefined) {
            var userStatNameInstance = userStatNameValue;
            statisticsInstance.userStatName = userStatNameInstance;
          }
          
          var statDataPathValue = responseDoc['statDataPath'];
          if (statDataPathValue !== null && statDataPathValue !== undefined) {
            var statDataPathInstance = statDataPathValue;
            statisticsInstance.statDataPath = statDataPathInstance;
          }
          
          var createTimeValue = responseDoc['createTime'];
          if (createTimeValue !== null && createTimeValue !== undefined) {
            var createTimeInstance = createTimeValue;
            statisticsInstance.createTime = createTimeInstance;
          }
          
          var updateTimeValue = responseDoc['updateTime'];
          if (updateTimeValue !== null && updateTimeValue !== undefined) {
            var updateTimeInstance = updateTimeValue;
            statisticsInstance.updateTime = updateTimeInstance;
          }
          
          var isUserCreatedValue = responseDoc['isUserCreated'];
          if (isUserCreatedValue !== null && isUserCreatedValue !== undefined) {
            var isUserCreatedInstance = isUserCreatedValue;
            statisticsInstance.isUserCreated = isUserCreatedInstance;
          }
          
          var isAutoCreatedValue = responseDoc['isAutoCreated'];
          if (isAutoCreatedValue !== null && isAutoCreatedValue !== undefined) {
            var isAutoCreatedInstance = isAutoCreatedValue;
            statisticsInstance.isAutoCreated = isAutoCreatedInstance;
          }
          
          var hasFilterValue = responseDoc['hasFilter'];
          if (hasFilterValue !== null && hasFilterValue !== undefined) {
            var hasFilterInstance = hasFilterValue;
            statisticsInstance.hasFilter = hasFilterInstance;
          }
          
          var filterDefinitionValue = responseDoc['filterDefinition'];
          if (filterDefinitionValue !== null && filterDefinitionValue !== undefined) {
            var filterDefinitionInstance = filterDefinitionValue;
            statisticsInstance.filterDefinition = filterDefinitionInstance;
          }
          
          var colNamesArray = responseDoc['colNames'];
          if (colNamesArray !== null && colNamesArray !== undefined) {
            for (var loweredIndex1 = 0; loweredIndex1 < colNamesArray.length; loweredIndex1 = loweredIndex1 + 1) {
              var colNamesValue = colNamesArray[loweredIndex1];
              statisticsInstance.colNames.push(colNamesValue);
            }
          }
          
          var computeAccountNameValue = responseDoc['computeAccountName'];
          if (computeAccountNameValue !== null && computeAccountNameValue !== undefined) {
            var computeAccountNameInstance = computeAccountNameValue;
            statisticsInstance.computeAccountName = computeAccountNameInstance;
          }
          
          var versionValue = responseDoc['version'];
          if (versionValue !== null && versionValue !== undefined) {
            var versionInstance = versionValue;
            statisticsInstance.version = versionInstance;
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Retrieves the specified table valued function from the current
   * DataLakeAnalytics catalog
   * 
   * @param {string} resourceGroupName The name of the resourceGroup the Data
   * Lake Analytics account is in
   * 
   * @param {string} accountName The name of the account to use
   * 
   * @param {string} databaseName The name of the database to find the table
   * valued function in.
   * 
   * @param {string} schemaName The name of the schema to find the table valued
   * function in.
   * 
   * @param {string} tableValuedFunctionName The name of the
   * tableValuedFunction to find.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  CatalogOperations.prototype.getTableValuedFunction = function(resourceGroupName, accountName, databaseName, schemaName, tableValuedFunctionName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (accountName === null || accountName === undefined) {
      return callback(new Error('accountName cannot be null.'));
    }
    if (databaseName === null || databaseName === undefined) {
      return callback(new Error('databaseName cannot be null.'));
    }
    if (schemaName === null || schemaName === undefined) {
      return callback(new Error('schemaName cannot be null.'));
    }
    if (tableValuedFunctionName === null || tableValuedFunctionName === undefined) {
      return callback(new Error('tableValuedFunctionName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + 'https://';
    url2 = url2 + encodeURIComponent(accountName);
    url2 = url2 + '.';
    if (this.client.catalogServiceUri !== null && this.client.catalogServiceUri !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.catalogServiceUri);
    }
    url2 = url2 + '/catalog/usql/databases/';
    url2 = url2 + encodeURIComponent(databaseName);
    url2 = url2 + '/schemas/';
    url2 = url2 + encodeURIComponent(schemaName);
    url2 = url2 + '/tablevaluedfunctions/';
    url2 = url2 + encodeURIComponent(tableValuedFunctionName);
    var queryParameters = [];
    queryParameters.push('api-version=2015-10-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.2-preview' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.2-preview' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['useragent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.2-preview' + this.client.userAgentSuffix;
    }
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.2-preview' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.2-preview' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['User-Agent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.2-preview' + this.client.userAgentSuffix;
    }
    if (resourceGroupName !== null && resourceGroupName !== undefined) {
      httpRequest.headers['x-ms-client-resource-group-name'] = resourceGroupName;
    }
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      httpRequest.headers['x-ms-client-subscription-id'] = this.client.credentials.subscriptionId;
    }
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var tableValuedFunctionInstance = {};
          result.tableValuedFunction = tableValuedFunctionInstance;
          
          var databaseNameValue = responseDoc['databaseName'];
          if (databaseNameValue !== null && databaseNameValue !== undefined) {
            var databaseNameInstance = databaseNameValue;
            tableValuedFunctionInstance.databaseName = databaseNameInstance;
          }
          
          var schemaNameValue = responseDoc['schemaName'];
          if (schemaNameValue !== null && schemaNameValue !== undefined) {
            var schemaNameInstance = schemaNameValue;
            tableValuedFunctionInstance.schemaName = schemaNameInstance;
          }
          
          var tvfNameValue = responseDoc['tvfName'];
          if (tvfNameValue !== null && tvfNameValue !== undefined) {
            var tvfNameInstance = tvfNameValue;
            tableValuedFunctionInstance.name = tvfNameInstance;
          }
          
          var definitionValue = responseDoc['definition'];
          if (definitionValue !== null && definitionValue !== undefined) {
            var definitionInstance = definitionValue;
            tableValuedFunctionInstance.definition = definitionInstance;
          }
          
          var computeAccountNameValue = responseDoc['computeAccountName'];
          if (computeAccountNameValue !== null && computeAccountNameValue !== undefined) {
            var computeAccountNameInstance = computeAccountNameValue;
            tableValuedFunctionInstance.computeAccountName = computeAccountNameInstance;
          }
          
          var versionValue = responseDoc['version'];
          if (versionValue !== null && versionValue !== undefined) {
            var versionInstance = versionValue;
            tableValuedFunctionInstance.version = versionInstance;
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Retrieves the list of assemblies from the current DataLakeAnalytics catalog
   * 
   * @param {string} resourceGroupName The name of the resourceGroup the Data
   * Lake Analytics account is in
   * 
   * @param {string} accountName The name of the account to use
   * 
   * @param {string} databaseName The name of the database to find the assembly
   * in.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  CatalogOperations.prototype.listAssemblies = function(resourceGroupName, accountName, databaseName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (accountName === null || accountName === undefined) {
      return callback(new Error('accountName cannot be null.'));
    }
    if (databaseName === null || databaseName === undefined) {
      return callback(new Error('databaseName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + 'https://';
    url2 = url2 + encodeURIComponent(accountName);
    url2 = url2 + '.';
    if (this.client.catalogServiceUri !== null && this.client.catalogServiceUri !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.catalogServiceUri);
    }
    url2 = url2 + '/catalog/usql/databases/';
    url2 = url2 + encodeURIComponent(databaseName);
    url2 = url2 + '/assemblies';
    var queryParameters = [];
    queryParameters.push('api-version=2015-10-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.2-preview' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.2-preview' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['useragent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.2-preview' + this.client.userAgentSuffix;
    }
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.2-preview' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.2-preview' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['User-Agent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.2-preview' + this.client.userAgentSuffix;
    }
    if (resourceGroupName !== null && resourceGroupName !== undefined) {
      httpRequest.headers['x-ms-client-resource-group-name'] = resourceGroupName;
    }
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      httpRequest.headers['x-ms-client-subscription-id'] = this.client.credentials.subscriptionId;
    }
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var assemblyListInstance = { value: [] };
          result.assemblyList = assemblyListInstance;
          
          var valueArray = responseDoc['value'];
          if (valueArray !== null && valueArray !== undefined) {
            for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
              var valueValue = valueArray[loweredIndex1];
              var uSqlAssemblyClrInstance = {};
              assemblyListInstance.value.push(uSqlAssemblyClrInstance);
              
              var databaseNameValue = valueValue['databaseName'];
              if (databaseNameValue !== null && databaseNameValue !== undefined) {
                var databaseNameInstance = databaseNameValue;
                uSqlAssemblyClrInstance.databaseName = databaseNameInstance;
              }
              
              var assemblyClrNameValue = valueValue['assemblyClrName'];
              if (assemblyClrNameValue !== null && assemblyClrNameValue !== undefined) {
                var assemblyClrNameInstance = assemblyClrNameValue;
                uSqlAssemblyClrInstance.name = assemblyClrNameInstance;
              }
              
              var clrNameValue = valueValue['clrName'];
              if (clrNameValue !== null && clrNameValue !== undefined) {
                var clrNameInstance = clrNameValue;
                uSqlAssemblyClrInstance.clrName = clrNameInstance;
              }
              
              var computeAccountNameValue = valueValue['computeAccountName'];
              if (computeAccountNameValue !== null && computeAccountNameValue !== undefined) {
                var computeAccountNameInstance = computeAccountNameValue;
                uSqlAssemblyClrInstance.computeAccountName = computeAccountNameInstance;
              }
              
              var versionValue = valueValue['version'];
              if (versionValue !== null && versionValue !== undefined) {
                var versionInstance = versionValue;
                uSqlAssemblyClrInstance.version = versionInstance;
              }
            }
          }
          
          var itemTypeValue = responseDoc['itemType'];
          if (itemTypeValue !== null && itemTypeValue !== undefined) {
            var itemTypeInstance = itemTypeValue;
            assemblyListInstance.itemType = itemTypeInstance;
          }
          
          var countValue = responseDoc['count'];
          if (countValue !== null && countValue !== undefined) {
            var countInstance = countValue;
            assemblyListInstance.count = countInstance;
          }
          
          var nextLinkValue = responseDoc['nextLink'];
          if (nextLinkValue !== null && nextLinkValue !== undefined) {
            var nextLinkInstance = nextLinkValue;
            assemblyListInstance.nextLink = nextLinkInstance;
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Retrieves the list of databases from the current DataLakeAnalytics catalog
   * 
   * @param {string} resourceGroupName The name of the resourceGroup the Data
   * Lake Analytics account is in
   * 
   * @param {string} accountName The name of the account to use
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  CatalogOperations.prototype.listDatabases = function(resourceGroupName, accountName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (accountName === null || accountName === undefined) {
      return callback(new Error('accountName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + 'https://';
    url2 = url2 + encodeURIComponent(accountName);
    url2 = url2 + '.';
    if (this.client.catalogServiceUri !== null && this.client.catalogServiceUri !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.catalogServiceUri);
    }
    url2 = url2 + '/catalog/usql/databases';
    var queryParameters = [];
    queryParameters.push('api-version=2015-10-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.2-preview' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.2-preview' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['useragent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.2-preview' + this.client.userAgentSuffix;
    }
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.2-preview' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.2-preview' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['User-Agent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.2-preview' + this.client.userAgentSuffix;
    }
    if (resourceGroupName !== null && resourceGroupName !== undefined) {
      httpRequest.headers['x-ms-client-resource-group-name'] = resourceGroupName;
    }
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      httpRequest.headers['x-ms-client-subscription-id'] = this.client.credentials.subscriptionId;
    }
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var databaseListInstance = { value: [] };
          result.databaseList = databaseListInstance;
          
          var valueArray = responseDoc['value'];
          if (valueArray !== null && valueArray !== undefined) {
            for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
              var valueValue = valueArray[loweredIndex1];
              var uSqlDatabaseInstance = {};
              databaseListInstance.value.push(uSqlDatabaseInstance);
              
              var databaseNameValue = valueValue['databaseName'];
              if (databaseNameValue !== null && databaseNameValue !== undefined) {
                var databaseNameInstance = databaseNameValue;
                uSqlDatabaseInstance.name = databaseNameInstance;
              }
              
              var computeAccountNameValue = valueValue['computeAccountName'];
              if (computeAccountNameValue !== null && computeAccountNameValue !== undefined) {
                var computeAccountNameInstance = computeAccountNameValue;
                uSqlDatabaseInstance.computeAccountName = computeAccountNameInstance;
              }
              
              var versionValue = valueValue['version'];
              if (versionValue !== null && versionValue !== undefined) {
                var versionInstance = versionValue;
                uSqlDatabaseInstance.version = versionInstance;
              }
            }
          }
          
          var itemTypeValue = responseDoc['itemType'];
          if (itemTypeValue !== null && itemTypeValue !== undefined) {
            var itemTypeInstance = itemTypeValue;
            databaseListInstance.itemType = itemTypeInstance;
          }
          
          var countValue = responseDoc['count'];
          if (countValue !== null && countValue !== undefined) {
            var countInstance = countValue;
            databaseListInstance.count = countInstance;
          }
          
          var nextLinkValue = responseDoc['nextLink'];
          if (nextLinkValue !== null && nextLinkValue !== undefined) {
            var nextLinkInstance = nextLinkValue;
            databaseListInstance.nextLink = nextLinkInstance;
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Retrieves the list of external data sources from the current
   * DataLakeAnalytics catalog
   * 
   * @param {string} resourceGroupName The name of the resourceGroup the Data
   * Lake Analytics account is in
   * 
   * @param {string} accountName The name of the account to use
   * 
   * @param {string} databaseName The name of the database to find the external
   * Data Source in.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  CatalogOperations.prototype.listExternalDataSources = function(resourceGroupName, accountName, databaseName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (accountName === null || accountName === undefined) {
      return callback(new Error('accountName cannot be null.'));
    }
    if (databaseName === null || databaseName === undefined) {
      return callback(new Error('databaseName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + 'https://';
    url2 = url2 + encodeURIComponent(accountName);
    url2 = url2 + '.';
    if (this.client.catalogServiceUri !== null && this.client.catalogServiceUri !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.catalogServiceUri);
    }
    url2 = url2 + '/catalog/usql/databases/';
    url2 = url2 + encodeURIComponent(databaseName);
    url2 = url2 + '/externaldatasources';
    var queryParameters = [];
    queryParameters.push('api-version=2015-10-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.2-preview' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.2-preview' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['useragent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.2-preview' + this.client.userAgentSuffix;
    }
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.2-preview' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.2-preview' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['User-Agent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.2-preview' + this.client.userAgentSuffix;
    }
    if (resourceGroupName !== null && resourceGroupName !== undefined) {
      httpRequest.headers['x-ms-client-resource-group-name'] = resourceGroupName;
    }
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      httpRequest.headers['x-ms-client-subscription-id'] = this.client.credentials.subscriptionId;
    }
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var externalDataSourceListInstance = { value: [] };
          result.externalDataSourceList = externalDataSourceListInstance;
          
          var valueArray = responseDoc['value'];
          if (valueArray !== null && valueArray !== undefined) {
            for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
              var valueValue = valueArray[loweredIndex1];
              var uSqlExternalDataSourceInstance = { pushdownTypes: [] };
              externalDataSourceListInstance.value.push(uSqlExternalDataSourceInstance);
              
              var databaseNameValue = valueValue['databaseName'];
              if (databaseNameValue !== null && databaseNameValue !== undefined) {
                var databaseNameInstance = databaseNameValue;
                uSqlExternalDataSourceInstance.databaseName = databaseNameInstance;
              }
              
              var externalDataSourceNameValue = valueValue['externalDataSourceName'];
              if (externalDataSourceNameValue !== null && externalDataSourceNameValue !== undefined) {
                var externalDataSourceNameInstance = externalDataSourceNameValue;
                uSqlExternalDataSourceInstance.name = externalDataSourceNameInstance;
              }
              
              var providerValue = valueValue['provider'];
              if (providerValue !== null && providerValue !== undefined) {
                var providerInstance = providerValue;
                uSqlExternalDataSourceInstance.provider = providerInstance;
              }
              
              var providerStringValue = valueValue['providerString'];
              if (providerStringValue !== null && providerStringValue !== undefined) {
                var providerStringInstance = providerStringValue;
                uSqlExternalDataSourceInstance.providerString = providerStringInstance;
              }
              
              var pushdownTypesArray = valueValue['pushdownTypes'];
              if (pushdownTypesArray !== null && pushdownTypesArray !== undefined) {
                for (var loweredIndex2 = 0; loweredIndex2 < pushdownTypesArray.length; loweredIndex2 = loweredIndex2 + 1) {
                  var pushdownTypesValue = pushdownTypesArray[loweredIndex2];
                  uSqlExternalDataSourceInstance.pushdownTypes.push(pushdownTypesValue);
                }
              }
              
              var computeAccountNameValue = valueValue['computeAccountName'];
              if (computeAccountNameValue !== null && computeAccountNameValue !== undefined) {
                var computeAccountNameInstance = computeAccountNameValue;
                uSqlExternalDataSourceInstance.computeAccountName = computeAccountNameInstance;
              }
              
              var versionValue = valueValue['version'];
              if (versionValue !== null && versionValue !== undefined) {
                var versionInstance = versionValue;
                uSqlExternalDataSourceInstance.version = versionInstance;
              }
            }
          }
          
          var itemTypeValue = responseDoc['itemType'];
          if (itemTypeValue !== null && itemTypeValue !== undefined) {
            var itemTypeInstance = itemTypeValue;
            externalDataSourceListInstance.itemType = itemTypeInstance;
          }
          
          var countValue = responseDoc['count'];
          if (countValue !== null && countValue !== undefined) {
            var countInstance = countValue;
            externalDataSourceListInstance.count = countInstance;
          }
          
          var nextLinkValue = responseDoc['nextLink'];
          if (nextLinkValue !== null && nextLinkValue !== undefined) {
            var nextLinkInstance = nextLinkValue;
            externalDataSourceListInstance.nextLink = nextLinkInstance;
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Retrieves the list of schemas from the current DataLakeAnalytics catalog
   * 
   * @param {string} resourceGroupName The name of the resourceGroup the Data
   * Lake Analytics account is in
   * 
   * @param {string} accountName The name of the account to use
   * 
   * @param {string} databaseName The name of the database to find the schema
   * in.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  CatalogOperations.prototype.listSchemas = function(resourceGroupName, accountName, databaseName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (accountName === null || accountName === undefined) {
      return callback(new Error('accountName cannot be null.'));
    }
    if (databaseName === null || databaseName === undefined) {
      return callback(new Error('databaseName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + 'https://';
    url2 = url2 + encodeURIComponent(accountName);
    url2 = url2 + '.';
    if (this.client.catalogServiceUri !== null && this.client.catalogServiceUri !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.catalogServiceUri);
    }
    url2 = url2 + '/catalog/usql/databases/';
    url2 = url2 + encodeURIComponent(databaseName);
    url2 = url2 + '/schemas';
    var queryParameters = [];
    queryParameters.push('api-version=2015-10-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.2-preview' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.2-preview' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['useragent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.2-preview' + this.client.userAgentSuffix;
    }
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.2-preview' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.2-preview' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['User-Agent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.2-preview' + this.client.userAgentSuffix;
    }
    if (resourceGroupName !== null && resourceGroupName !== undefined) {
      httpRequest.headers['x-ms-client-resource-group-name'] = resourceGroupName;
    }
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      httpRequest.headers['x-ms-client-subscription-id'] = this.client.credentials.subscriptionId;
    }
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var schemaListInstance = { value: [] };
          result.schemaList = schemaListInstance;
          
          var valueArray = responseDoc['value'];
          if (valueArray !== null && valueArray !== undefined) {
            for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
              var valueValue = valueArray[loweredIndex1];
              var uSqlSchemaInstance = {};
              schemaListInstance.value.push(uSqlSchemaInstance);
              
              var databaseNameValue = valueValue['databaseName'];
              if (databaseNameValue !== null && databaseNameValue !== undefined) {
                var databaseNameInstance = databaseNameValue;
                uSqlSchemaInstance.databaseName = databaseNameInstance;
              }
              
              var schemaNameValue = valueValue['schemaName'];
              if (schemaNameValue !== null && schemaNameValue !== undefined) {
                var schemaNameInstance = schemaNameValue;
                uSqlSchemaInstance.name = schemaNameInstance;
              }
              
              var computeAccountNameValue = valueValue['computeAccountName'];
              if (computeAccountNameValue !== null && computeAccountNameValue !== undefined) {
                var computeAccountNameInstance = computeAccountNameValue;
                uSqlSchemaInstance.computeAccountName = computeAccountNameInstance;
              }
              
              var versionValue = valueValue['version'];
              if (versionValue !== null && versionValue !== undefined) {
                var versionInstance = versionValue;
                uSqlSchemaInstance.version = versionInstance;
              }
            }
          }
          
          var itemTypeValue = responseDoc['itemType'];
          if (itemTypeValue !== null && itemTypeValue !== undefined) {
            var itemTypeInstance = itemTypeValue;
            schemaListInstance.itemType = itemTypeInstance;
          }
          
          var countValue = responseDoc['count'];
          if (countValue !== null && countValue !== undefined) {
            var countInstance = countValue;
            schemaListInstance.count = countInstance;
          }
          
          var nextLinkValue = responseDoc['nextLink'];
          if (nextLinkValue !== null && nextLinkValue !== undefined) {
            var nextLinkInstance = nextLinkValue;
            schemaListInstance.nextLink = nextLinkInstance;
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Retrieves the list of tables from the current DataLakeAnalytics catalog
   * 
   * @param {string} resourceGroupName The name of the resourceGroup the Data
   * Lake Analytics account is in
   * 
   * @param {string} accountName The name of the account to use
   * 
   * @param {string} databaseName The name of the database to find the tables
   * in.
   * 
   * @param {string} schemaName The name of the schema to find the tables in.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  CatalogOperations.prototype.listTables = function(resourceGroupName, accountName, databaseName, schemaName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (accountName === null || accountName === undefined) {
      return callback(new Error('accountName cannot be null.'));
    }
    if (databaseName === null || databaseName === undefined) {
      return callback(new Error('databaseName cannot be null.'));
    }
    if (schemaName === null || schemaName === undefined) {
      return callback(new Error('schemaName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + 'https://';
    url2 = url2 + encodeURIComponent(accountName);
    url2 = url2 + '.';
    if (this.client.catalogServiceUri !== null && this.client.catalogServiceUri !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.catalogServiceUri);
    }
    url2 = url2 + '/catalog/usql/databases/';
    url2 = url2 + encodeURIComponent(databaseName);
    url2 = url2 + '/schemas/';
    url2 = url2 + encodeURIComponent(schemaName);
    url2 = url2 + '/tables';
    var queryParameters = [];
    queryParameters.push('api-version=2015-10-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.2-preview' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.2-preview' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['useragent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.2-preview' + this.client.userAgentSuffix;
    }
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.2-preview' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.2-preview' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['User-Agent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.2-preview' + this.client.userAgentSuffix;
    }
    if (resourceGroupName !== null && resourceGroupName !== undefined) {
      httpRequest.headers['x-ms-client-resource-group-name'] = resourceGroupName;
    }
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      httpRequest.headers['x-ms-client-subscription-id'] = this.client.credentials.subscriptionId;
    }
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var tableListInstance = { value: [] };
          result.tableList = tableListInstance;
          
          var valueArray = responseDoc['value'];
          if (valueArray !== null && valueArray !== undefined) {
            for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
              var valueValue = valueArray[loweredIndex1];
              var uSqlTableInstance = { columnList: [], indexList: [], partitionKeyList: [] };
              tableListInstance.value.push(uSqlTableInstance);
              
              var databaseNameValue = valueValue['databaseName'];
              if (databaseNameValue !== null && databaseNameValue !== undefined) {
                var databaseNameInstance = databaseNameValue;
                uSqlTableInstance.databaseName = databaseNameInstance;
              }
              
              var schemaNameValue = valueValue['schemaName'];
              if (schemaNameValue !== null && schemaNameValue !== undefined) {
                var schemaNameInstance = schemaNameValue;
                uSqlTableInstance.schemaName = schemaNameInstance;
              }
              
              var tableNameValue = valueValue['tableName'];
              if (tableNameValue !== null && tableNameValue !== undefined) {
                var tableNameInstance = tableNameValue;
                uSqlTableInstance.name = tableNameInstance;
              }
              
              var columnListArray = valueValue['columnList'];
              if (columnListArray !== null && columnListArray !== undefined) {
                for (var loweredIndex2 = 0; loweredIndex2 < columnListArray.length; loweredIndex2 = loweredIndex2 + 1) {
                  var columnListValue = columnListArray[loweredIndex2];
                  var uSqlTableColumnInstance = {};
                  uSqlTableInstance.columnList.push(uSqlTableColumnInstance);
                  
                  var nameValue = columnListValue['name'];
                  if (nameValue !== null && nameValue !== undefined) {
                    var nameInstance = nameValue;
                    uSqlTableColumnInstance.name = nameInstance;
                  }
                  
                  var typeValue = columnListValue['type'];
                  if (typeValue !== null && typeValue !== undefined) {
                    var typeInstance = typeValue;
                    uSqlTableColumnInstance.type = typeInstance;
                  }
                }
              }
              
              var indexListArray = valueValue['indexList'];
              if (indexListArray !== null && indexListArray !== undefined) {
                for (var loweredIndex3 = 0; loweredIndex3 < indexListArray.length; loweredIndex3 = loweredIndex3 + 1) {
                  var indexListValue = indexListArray[loweredIndex3];
                  var uSqlIndexInstance = { columns: [], indexKeys: [], partitionKeyList: [], streamNames: [] };
                  uSqlTableInstance.indexList.push(uSqlIndexInstance);
                  
                  var nameValue2 = indexListValue['name'];
                  if (nameValue2 !== null && nameValue2 !== undefined) {
                    var nameInstance2 = nameValue2;
                    uSqlIndexInstance.name = nameInstance2;
                  }
                  
                  var indexKeysArray = indexListValue['indexKeys'];
                  if (indexKeysArray !== null && indexKeysArray !== undefined) {
                    for (var loweredIndex4 = 0; loweredIndex4 < indexKeysArray.length; loweredIndex4 = loweredIndex4 + 1) {
                      var indexKeysValue = indexKeysArray[loweredIndex4];
                      var uSqlDirectedColumnInstance = {};
                      uSqlIndexInstance.indexKeys.push(uSqlDirectedColumnInstance);
                      
                      var nameValue3 = indexKeysValue['name'];
                      if (nameValue3 !== null && nameValue3 !== undefined) {
                        var nameInstance3 = nameValue3;
                        uSqlDirectedColumnInstance.name = nameInstance3;
                      }
                      
                      var descendingValue = indexKeysValue['descending'];
                      if (descendingValue !== null && descendingValue !== undefined) {
                        var descendingInstance = descendingValue;
                        uSqlDirectedColumnInstance.descending = descendingInstance;
                      }
                    }
                  }
                  
                  var columnsArray = indexListValue['columns'];
                  if (columnsArray !== null && columnsArray !== undefined) {
                    for (var loweredIndex5 = 0; loweredIndex5 < columnsArray.length; loweredIndex5 = loweredIndex5 + 1) {
                      var columnsValue = columnsArray[loweredIndex5];
                      uSqlIndexInstance.columns.push(columnsValue);
                    }
                  }
                  
                  var distributionInfoValue = indexListValue['distributionInfo'];
                  if (distributionInfoValue !== null && distributionInfoValue !== undefined) {
                    var distributionInfoInstance = { keys: [] };
                    uSqlIndexInstance.distributionInfo = distributionInfoInstance;
                    
                    var typeValue2 = distributionInfoValue['type'];
                    if (typeValue2 !== null && typeValue2 !== undefined) {
                      var typeInstance2 = typeValue2;
                      distributionInfoInstance.type = typeInstance2;
                    }
                    
                    var keysArray = distributionInfoValue['keys'];
                    if (keysArray !== null && keysArray !== undefined) {
                      for (var loweredIndex6 = 0; loweredIndex6 < keysArray.length; loweredIndex6 = loweredIndex6 + 1) {
                        var keysValue = keysArray[loweredIndex6];
                        var uSqlDirectedColumnInstance2 = {};
                        distributionInfoInstance.keys.push(uSqlDirectedColumnInstance2);
                        
                        var nameValue4 = keysValue['name'];
                        if (nameValue4 !== null && nameValue4 !== undefined) {
                          var nameInstance4 = nameValue4;
                          uSqlDirectedColumnInstance2.name = nameInstance4;
                        }
                        
                        var descendingValue2 = keysValue['descending'];
                        if (descendingValue2 !== null && descendingValue2 !== undefined) {
                          var descendingInstance2 = descendingValue2;
                          uSqlDirectedColumnInstance2.descending = descendingInstance2;
                        }
                      }
                    }
                    
                    var countValue = distributionInfoValue['count'];
                    if (countValue !== null && countValue !== undefined) {
                      var countInstance = countValue;
                      distributionInfoInstance.count = countInstance;
                    }
                  }
                  
                  var partitionFunctionValue = indexListValue['partitionFunction'];
                  if (partitionFunctionValue !== null && partitionFunctionValue !== undefined) {
                    var partitionFunctionInstance = partitionFunctionValue;
                    uSqlIndexInstance.partitionFunction = partitionFunctionInstance;
                  }
                  
                  var partitionKeyListArray = indexListValue['partitionKeyList'];
                  if (partitionKeyListArray !== null && partitionKeyListArray !== undefined) {
                    for (var loweredIndex7 = 0; loweredIndex7 < partitionKeyListArray.length; loweredIndex7 = loweredIndex7 + 1) {
                      var partitionKeyListValue = partitionKeyListArray[loweredIndex7];
                      uSqlIndexInstance.partitionKeyList.push(partitionKeyListValue);
                    }
                  }
                  
                  var streamNamesArray = indexListValue['streamNames'];
                  if (streamNamesArray !== null && streamNamesArray !== undefined) {
                    for (var loweredIndex8 = 0; loweredIndex8 < streamNamesArray.length; loweredIndex8 = loweredIndex8 + 1) {
                      var streamNamesValue = streamNamesArray[loweredIndex8];
                      uSqlIndexInstance.streamNames.push(streamNamesValue);
                    }
                  }
                  
                  var isColumnstoreValue = indexListValue['isColumnstore'];
                  if (isColumnstoreValue !== null && isColumnstoreValue !== undefined) {
                    var isColumnstoreInstance = isColumnstoreValue;
                    uSqlIndexInstance.isColumnstore = isColumnstoreInstance;
                  }
                  
                  var indexIdValue = indexListValue['indexId'];
                  if (indexIdValue !== null && indexIdValue !== undefined) {
                    var indexIdInstance = indexIdValue;
                    uSqlIndexInstance.indexId = indexIdInstance;
                  }
                  
                  var isUniqueValue = indexListValue['isUnique'];
                  if (isUniqueValue !== null && isUniqueValue !== undefined) {
                    var isUniqueInstance = isUniqueValue;
                    uSqlIndexInstance.isCoIsUniquelumnstore = isUniqueInstance;
                  }
                }
              }
              
              var partitionKeyListArray2 = valueValue['partitionKeyList'];
              if (partitionKeyListArray2 !== null && partitionKeyListArray2 !== undefined) {
                for (var loweredIndex9 = 0; loweredIndex9 < partitionKeyListArray2.length; loweredIndex9 = loweredIndex9 + 1) {
                  var partitionKeyListValue2 = partitionKeyListArray2[loweredIndex9];
                  uSqlTableInstance.partitionKeyList.push(partitionKeyListValue2);
                }
              }
              
              var externalTableValue = valueValue['externalTable'];
              if (externalTableValue !== null && externalTableValue !== undefined) {
                var externalTableInstance = {};
                uSqlTableInstance.externalTable = externalTableInstance;
                
                var tableNameValue2 = externalTableValue['tableName'];
                if (tableNameValue2 !== null && tableNameValue2 !== undefined) {
                  var tableNameInstance2 = tableNameValue2;
                  externalTableInstance.tableName = tableNameInstance2;
                }
                
                var dataSourceValue = externalTableValue['dataSource'];
                if (dataSourceValue !== null && dataSourceValue !== undefined) {
                  var dataSourceInstance = {};
                  externalTableInstance.dataSource = dataSourceInstance;
                  
                  var nameValue5 = dataSourceValue['name'];
                  if (nameValue5 !== null && nameValue5 !== undefined) {
                    var nameInstance5 = {};
                    dataSourceInstance.name = nameInstance5;
                    
                    var firstPartValue = nameValue5['firstPart'];
                    if (firstPartValue !== null && firstPartValue !== undefined) {
                      var firstPartInstance = firstPartValue;
                      nameInstance5.firstPart = firstPartInstance;
                    }
                    
                    var secondPartValue = nameValue5['secondPart'];
                    if (secondPartValue !== null && secondPartValue !== undefined) {
                      var secondPartInstance = secondPartValue;
                      nameInstance5.secondPart = secondPartInstance;
                    }
                    
                    var thirdPartValue = nameValue5['thirdPart'];
                    if (thirdPartValue !== null && thirdPartValue !== undefined) {
                      var thirdPartInstance = thirdPartValue;
                      nameInstance5.thirdPart = thirdPartInstance;
                    }
                    
                    var serverValue = nameValue5['server'];
                    if (serverValue !== null && serverValue !== undefined) {
                      var serverInstance = serverValue;
                      nameInstance5.server = serverInstance;
                    }
                  }
                  
                  var versionValue = dataSourceValue['version'];
                  if (versionValue !== null && versionValue !== undefined) {
                    var versionInstance = versionValue;
                    dataSourceInstance.version = versionInstance;
                  }
                }
              }
              
              var computeAccountNameValue = valueValue['computeAccountName'];
              if (computeAccountNameValue !== null && computeAccountNameValue !== undefined) {
                var computeAccountNameInstance = computeAccountNameValue;
                uSqlTableInstance.computeAccountName = computeAccountNameInstance;
              }
              
              var versionValue2 = valueValue['version'];
              if (versionValue2 !== null && versionValue2 !== undefined) {
                var versionInstance2 = versionValue2;
                uSqlTableInstance.version = versionInstance2;
              }
            }
          }
          
          var itemTypeValue = responseDoc['itemType'];
          if (itemTypeValue !== null && itemTypeValue !== undefined) {
            var itemTypeInstance = itemTypeValue;
            tableListInstance.itemType = itemTypeInstance;
          }
          
          var countValue2 = responseDoc['count'];
          if (countValue2 !== null && countValue2 !== undefined) {
            var countInstance2 = countValue2;
            tableListInstance.count = countInstance2;
          }
          
          var nextLinkValue = responseDoc['nextLink'];
          if (nextLinkValue !== null && nextLinkValue !== undefined) {
            var nextLinkInstance = nextLinkValue;
            tableListInstance.nextLink = nextLinkInstance;
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Retrieves the list of tables from the current DataLakeAnalytics catalog
   * 
   * @param {string} resourceGroupName The name of the resourceGroup the Data
   * Lake Analytics account is in
   * 
   * @param {string} accountName The name of the account to use
   * 
   * @param {string} databaseName The name of the database to find the
   * statistics in.
   * 
   * @param {string} schemaName The name of the schema to find the statistics
   * in.
   * 
   * @param {string} tableName The name of the table to find the statistics in.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  CatalogOperations.prototype.listTableStatistics = function(resourceGroupName, accountName, databaseName, schemaName, tableName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (accountName === null || accountName === undefined) {
      return callback(new Error('accountName cannot be null.'));
    }
    if (databaseName === null || databaseName === undefined) {
      return callback(new Error('databaseName cannot be null.'));
    }
    if (schemaName === null || schemaName === undefined) {
      return callback(new Error('schemaName cannot be null.'));
    }
    if (tableName === null || tableName === undefined) {
      return callback(new Error('tableName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + 'https://';
    url2 = url2 + encodeURIComponent(accountName);
    url2 = url2 + '.';
    if (this.client.catalogServiceUri !== null && this.client.catalogServiceUri !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.catalogServiceUri);
    }
    url2 = url2 + '/catalog/usql/databases/';
    url2 = url2 + encodeURIComponent(databaseName);
    url2 = url2 + '/schemas/';
    url2 = url2 + encodeURIComponent(schemaName);
    url2 = url2 + '/tables/';
    url2 = url2 + encodeURIComponent(tableName);
    url2 = url2 + '/statistics';
    var queryParameters = [];
    queryParameters.push('api-version=2015-10-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.2-preview' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.2-preview' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['useragent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.2-preview' + this.client.userAgentSuffix;
    }
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.2-preview' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.2-preview' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['User-Agent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.2-preview' + this.client.userAgentSuffix;
    }
    if (resourceGroupName !== null && resourceGroupName !== undefined) {
      httpRequest.headers['x-ms-client-resource-group-name'] = resourceGroupName;
    }
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      httpRequest.headers['x-ms-client-subscription-id'] = this.client.credentials.subscriptionId;
    }
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var statisticsListInstance = { value: [] };
          result.statisticsList = statisticsListInstance;
          
          var valueArray = responseDoc['value'];
          if (valueArray !== null && valueArray !== undefined) {
            for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
              var valueValue = valueArray[loweredIndex1];
              var uSqlTableStatisticsInstance = { colNames: [] };
              statisticsListInstance.value.push(uSqlTableStatisticsInstance);
              
              var databaseNameValue = valueValue['databaseName'];
              if (databaseNameValue !== null && databaseNameValue !== undefined) {
                var databaseNameInstance = databaseNameValue;
                uSqlTableStatisticsInstance.databaseName = databaseNameInstance;
              }
              
              var schemaNameValue = valueValue['schemaName'];
              if (schemaNameValue !== null && schemaNameValue !== undefined) {
                var schemaNameInstance = schemaNameValue;
                uSqlTableStatisticsInstance.schemaName = schemaNameInstance;
              }
              
              var tableNameValue = valueValue['tableName'];
              if (tableNameValue !== null && tableNameValue !== undefined) {
                var tableNameInstance = tableNameValue;
                uSqlTableStatisticsInstance.tableName = tableNameInstance;
              }
              
              var statisticsNameValue = valueValue['statisticsName'];
              if (statisticsNameValue !== null && statisticsNameValue !== undefined) {
                var statisticsNameInstance = statisticsNameValue;
                uSqlTableStatisticsInstance.name = statisticsNameInstance;
              }
              
              var userStatNameValue = valueValue['userStatName'];
              if (userStatNameValue !== null && userStatNameValue !== undefined) {
                var userStatNameInstance = userStatNameValue;
                uSqlTableStatisticsInstance.userStatName = userStatNameInstance;
              }
              
              var statDataPathValue = valueValue['statDataPath'];
              if (statDataPathValue !== null && statDataPathValue !== undefined) {
                var statDataPathInstance = statDataPathValue;
                uSqlTableStatisticsInstance.statDataPath = statDataPathInstance;
              }
              
              var createTimeValue = valueValue['createTime'];
              if (createTimeValue !== null && createTimeValue !== undefined) {
                var createTimeInstance = createTimeValue;
                uSqlTableStatisticsInstance.createTime = createTimeInstance;
              }
              
              var updateTimeValue = valueValue['updateTime'];
              if (updateTimeValue !== null && updateTimeValue !== undefined) {
                var updateTimeInstance = updateTimeValue;
                uSqlTableStatisticsInstance.updateTime = updateTimeInstance;
              }
              
              var isUserCreatedValue = valueValue['isUserCreated'];
              if (isUserCreatedValue !== null && isUserCreatedValue !== undefined) {
                var isUserCreatedInstance = isUserCreatedValue;
                uSqlTableStatisticsInstance.isUserCreated = isUserCreatedInstance;
              }
              
              var isAutoCreatedValue = valueValue['isAutoCreated'];
              if (isAutoCreatedValue !== null && isAutoCreatedValue !== undefined) {
                var isAutoCreatedInstance = isAutoCreatedValue;
                uSqlTableStatisticsInstance.isAutoCreated = isAutoCreatedInstance;
              }
              
              var hasFilterValue = valueValue['hasFilter'];
              if (hasFilterValue !== null && hasFilterValue !== undefined) {
                var hasFilterInstance = hasFilterValue;
                uSqlTableStatisticsInstance.hasFilter = hasFilterInstance;
              }
              
              var filterDefinitionValue = valueValue['filterDefinition'];
              if (filterDefinitionValue !== null && filterDefinitionValue !== undefined) {
                var filterDefinitionInstance = filterDefinitionValue;
                uSqlTableStatisticsInstance.filterDefinition = filterDefinitionInstance;
              }
              
              var colNamesArray = valueValue['colNames'];
              if (colNamesArray !== null && colNamesArray !== undefined) {
                for (var loweredIndex2 = 0; loweredIndex2 < colNamesArray.length; loweredIndex2 = loweredIndex2 + 1) {
                  var colNamesValue = colNamesArray[loweredIndex2];
                  uSqlTableStatisticsInstance.colNames.push(colNamesValue);
                }
              }
              
              var computeAccountNameValue = valueValue['computeAccountName'];
              if (computeAccountNameValue !== null && computeAccountNameValue !== undefined) {
                var computeAccountNameInstance = computeAccountNameValue;
                uSqlTableStatisticsInstance.computeAccountName = computeAccountNameInstance;
              }
              
              var versionValue = valueValue['version'];
              if (versionValue !== null && versionValue !== undefined) {
                var versionInstance = versionValue;
                uSqlTableStatisticsInstance.version = versionInstance;
              }
            }
          }
          
          var itemTypeValue = responseDoc['itemType'];
          if (itemTypeValue !== null && itemTypeValue !== undefined) {
            var itemTypeInstance = itemTypeValue;
            statisticsListInstance.itemType = itemTypeInstance;
          }
          
          var countValue = responseDoc['count'];
          if (countValue !== null && countValue !== undefined) {
            var countInstance = countValue;
            statisticsListInstance.count = countInstance;
          }
          
          var nextLinkValue = responseDoc['nextLink'];
          if (nextLinkValue !== null && nextLinkValue !== undefined) {
            var nextLinkInstance = nextLinkValue;
            statisticsListInstance.nextLink = nextLinkInstance;
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Retrieves the list of table valued functions from the current
   * DataLakeAnalytics catalog
   * 
   * @param {string} resourceGroupName The name of the resourceGroup the Data
   * Lake Analytics account is in
   * 
   * @param {string} accountName The name of the account to use
   * 
   * @param {string} databaseName The name of the database to find the table
   * valued functions in.
   * 
   * @param {string} schemaName The name of the schema to find the table valued
   * functions in.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  CatalogOperations.prototype.listTableValuedFunctions = function(resourceGroupName, accountName, databaseName, schemaName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (accountName === null || accountName === undefined) {
      return callback(new Error('accountName cannot be null.'));
    }
    if (databaseName === null || databaseName === undefined) {
      return callback(new Error('databaseName cannot be null.'));
    }
    if (schemaName === null || schemaName === undefined) {
      return callback(new Error('schemaName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + 'https://';
    url2 = url2 + encodeURIComponent(accountName);
    url2 = url2 + '.';
    if (this.client.catalogServiceUri !== null && this.client.catalogServiceUri !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.catalogServiceUri);
    }
    url2 = url2 + '/catalog/usql/databases/';
    url2 = url2 + encodeURIComponent(databaseName);
    url2 = url2 + '/schemas/';
    url2 = url2 + encodeURIComponent(schemaName);
    url2 = url2 + '/tablevaluedfunctions';
    var queryParameters = [];
    queryParameters.push('api-version=2015-10-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.2-preview' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.2-preview' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['useragent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.2-preview' + this.client.userAgentSuffix;
    }
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.2-preview' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.2-preview' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['User-Agent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.2-preview' + this.client.userAgentSuffix;
    }
    if (resourceGroupName !== null && resourceGroupName !== undefined) {
      httpRequest.headers['x-ms-client-resource-group-name'] = resourceGroupName;
    }
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      httpRequest.headers['x-ms-client-subscription-id'] = this.client.credentials.subscriptionId;
    }
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var tableValuedFunctionListInstance = { value: [] };
          result.tableValuedFunctionList = tableValuedFunctionListInstance;
          
          var valueArray = responseDoc['value'];
          if (valueArray !== null && valueArray !== undefined) {
            for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
              var valueValue = valueArray[loweredIndex1];
              var uSqlTableValuedFunctionInstance = {};
              tableValuedFunctionListInstance.value.push(uSqlTableValuedFunctionInstance);
              
              var databaseNameValue = valueValue['databaseName'];
              if (databaseNameValue !== null && databaseNameValue !== undefined) {
                var databaseNameInstance = databaseNameValue;
                uSqlTableValuedFunctionInstance.databaseName = databaseNameInstance;
              }
              
              var schemaNameValue = valueValue['schemaName'];
              if (schemaNameValue !== null && schemaNameValue !== undefined) {
                var schemaNameInstance = schemaNameValue;
                uSqlTableValuedFunctionInstance.schemaName = schemaNameInstance;
              }
              
              var tvfNameValue = valueValue['tvfName'];
              if (tvfNameValue !== null && tvfNameValue !== undefined) {
                var tvfNameInstance = tvfNameValue;
                uSqlTableValuedFunctionInstance.name = tvfNameInstance;
              }
              
              var definitionValue = valueValue['definition'];
              if (definitionValue !== null && definitionValue !== undefined) {
                var definitionInstance = definitionValue;
                uSqlTableValuedFunctionInstance.definition = definitionInstance;
              }
              
              var computeAccountNameValue = valueValue['computeAccountName'];
              if (computeAccountNameValue !== null && computeAccountNameValue !== undefined) {
                var computeAccountNameInstance = computeAccountNameValue;
                uSqlTableValuedFunctionInstance.computeAccountName = computeAccountNameInstance;
              }
              
              var versionValue = valueValue['version'];
              if (versionValue !== null && versionValue !== undefined) {
                var versionInstance = versionValue;
                uSqlTableValuedFunctionInstance.version = versionInstance;
              }
            }
          }
          
          var itemTypeValue = responseDoc['itemType'];
          if (itemTypeValue !== null && itemTypeValue !== undefined) {
            var itemTypeInstance = itemTypeValue;
            tableValuedFunctionListInstance.itemType = itemTypeInstance;
          }
          
          var countValue = responseDoc['count'];
          if (countValue !== null && countValue !== undefined) {
            var countInstance = countValue;
            tableValuedFunctionListInstance.count = countInstance;
          }
          
          var nextLinkValue = responseDoc['nextLink'];
          if (nextLinkValue !== null && nextLinkValue !== undefined) {
            var nextLinkInstance = nextLinkValue;
            tableValuedFunctionListInstance.nextLink = nextLinkInstance;
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Modifies the specified secret for use with external data sources in the
   * specified database
   * 
   * @param {string} accountName The name of the account to use
   * 
   * @param {string} resourceGroupName The name of the resourceGroup the Data
   * Lake Analytics account is in
   * 
   * @param {string} databaseName The name of the database to modify the secret
   * in.
   * 
   * @param {DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters} parameters
   * The parameters required to modify the secret (name and password)
   * 
   * @param {string} parameters.secretName Gets or sets the name of the secret
   * to create.
   * 
   * @param {string} parameters.password Gets or sets the password for the
   * secret to pass in
   * 
   * @param {string} [parameters.uri] Gets or sets the URI identifier for the
   * secret in the format https://<hostname>:<port>
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  CatalogOperations.prototype.updateSecret = function(accountName, resourceGroupName, databaseName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (accountName === null || accountName === undefined) {
      return callback(new Error('accountName cannot be null.'));
    }
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (databaseName === null || databaseName === undefined) {
      return callback(new Error('databaseName cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    if (parameters.password === null || parameters.password === undefined) {
      return callback(new Error('parameters.password cannot be null.'));
    }
    if (parameters.secretName === null || parameters.secretName === undefined) {
      return callback(new Error('parameters.secretName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + 'https://';
    url2 = url2 + encodeURIComponent(accountName);
    url2 = url2 + '.';
    if (this.client.catalogServiceUri !== null && this.client.catalogServiceUri !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.catalogServiceUri);
    }
    url2 = url2 + '/catalog/usql/databases/';
    url2 = url2 + encodeURIComponent(databaseName);
    url2 = url2 + '/secrets/';
    url2 = url2 + encodeURIComponent(parameters.secretName);
    var queryParameters = [];
    queryParameters.push('api-version=2015-10-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PATCH';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.2-preview' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.2-preview' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['useragent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.2-preview' + this.client.userAgentSuffix;
    }
    if ('Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.2-preview' + this.client.userAgentSuffix !== null && 'Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.2-preview' + this.client.userAgentSuffix !== undefined) {
      httpRequest.headers['User-Agent'] = 'Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.2-preview' + this.client.userAgentSuffix;
    }
    if (resourceGroupName !== null && resourceGroupName !== undefined) {
      httpRequest.headers['x-ms-client-resource-group-name'] = resourceGroupName;
    }
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      httpRequest.headers['x-ms-client-subscription-id'] = this.client.credentials.subscriptionId;
    }
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = null;
    
    var dataLakeAnalyticsCatalogSecretCreateOrUpdateParametersValue = {};
    requestDoc = dataLakeAnalyticsCatalogSecretCreateOrUpdateParametersValue;
    
    dataLakeAnalyticsCatalogSecretCreateOrUpdateParametersValue['password'] = parameters.password;
    
    if (parameters.uri !== null && parameters.uri !== undefined) {
      dataLakeAnalyticsCatalogSecretCreateOrUpdateParametersValue['uri'] = parameters.uri;
    }
    
    requestContent = JSON.stringify(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.isBuffer(requestContent) ? requestContent.length : Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var secretInstance = {};
          result.secret = secretInstance;
          
          var databaseNameValue = responseDoc['databaseName'];
          if (databaseNameValue !== null && databaseNameValue !== undefined) {
            var databaseNameInstance = databaseNameValue;
            secretInstance.databaseName = databaseNameInstance;
          }
          
          var credentialNameValue = responseDoc['credentialName'];
          if (credentialNameValue !== null && credentialNameValue !== undefined) {
            var credentialNameInstance = credentialNameValue;
            secretInstance.name = credentialNameInstance;
          }
          
          var userNameValue = responseDoc['userName'];
          if (userNameValue !== null && userNameValue !== undefined) {
            var userNameInstance = userNameValue;
            secretInstance.userName = userNameInstance;
          }
          
          var identityValue = responseDoc['identity'];
          if (identityValue !== null && identityValue !== undefined) {
            var identityInstance = identityValue;
            secretInstance.identity = identityInstance;
          }
          
          var computeAccountNameValue = responseDoc['computeAccountName'];
          if (computeAccountNameValue !== null && computeAccountNameValue !== undefined) {
            var computeAccountNameInstance = computeAccountNameValue;
            secretInstance.computeAccountName = computeAccountNameInstance;
          }
          
          var versionValue = responseDoc['version'];
          if (versionValue !== null && versionValue !== undefined) {
            var versionInstance = versionValue;
            secretInstance.version = versionInstance;
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  return CatalogOperations;
})();
