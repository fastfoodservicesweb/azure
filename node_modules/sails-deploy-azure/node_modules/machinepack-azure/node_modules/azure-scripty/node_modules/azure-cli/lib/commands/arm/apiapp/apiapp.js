/*** Generated by streamline 0.10.17 (callbacks) - DO NOT EDIT ***/ "use strict"; var __rt=require('streamline/lib/callbacks/runtime').runtime(__filename, false),__func=__rt.__func,__cb=__rt.__cb,__catch=__rt.__catch,__tryCatch=__rt.__tryCatch; var __ = require("underscore");

















var fs = require("fs");
var util = require("util");

var azureSdkStream = require("./lib/azureSdkStream");
var deployLib = require("./lib/deployLib");
var deployTracker = require("./lib/deployTracker");
var propertyPrompts = require("./lib/propertyPrompts");
var profile = require("../../../util/profile");
var utils = require("../../../util/utils");
var validation = require("../../../util/validation");

var $ = utils.getLocaleString;

exports.init = function initApiAppCommands(cli) {
  var log = cli.output;

  var apiapp = cli.category("apiapp").description($("Commands to manage ApiApps"));


  apiapp.command("list [resource-group]").description($("List currently deployed ApiApps in a subscription or resource group")).option("-g --resource-group <resource-group>", $("the resource group name, if not given list all ApiApps in subscription")).option("-s --subscription <subscription>", $("The subscription identifier")).option("-d --detailed", $("Include ApiApp package version and auth setting (call will be slower)")).execute(function __1(resourceGroup, options, _) { var subscription, client, resourceClient, apiApps; var __frame = { name: "__1", line: 43 }; return __func(_, this, arguments, __1, 2, __frame, function __$__1() {





      options = (options || { });
      subscription = profile.current.getSubscription(options.subscription);
      client = createApiAppClient(subscription);
      resourceClient = createResourceClient(subscription);

      return cli.interaction.withProgress($("Listing ApiApps"), function __1(log, _) { var groups; var __frame = { name: "__1", line: 50 }; return __func(_, this, arguments, __1, 1, __frame, function __$__1() {

          groups = []; return (function __$__1(__then) {
            if (!resourceGroup) {
              return azureSdkStream.toArray(resourceClient.resourceGroups.listStream(), __cb(_, __frame, 3, 36, function ___(__0, __2) { groups = __2.map(function(g) {
                  return g.name; }); __then(); }, true)); } else {

              groups = [resourceGroup,]; __then(); } ; })(function __$__1() {

            return groups.map_(__cb(_, __frame, 8, 35, function ___(__0, __4) { var __3 = __.flatten(__4); return _(null, __3); }, true), function __1(_, group) { var __frame = { name: "__1", line: 58 }; return __func(_, this, arguments, __1, 0, __frame, function __$__1() {
                return azureSdkStream.toArray(client.apiApps.listStream(group, (options.detailed ? "detail" : "basic")), __cb(_, __frame, 1, 34, _, true)); }); }); }); }); }, __cb(_, __frame, 6, 36, function ___(__0, __2) { apiApps = __2;




        cli.interaction.formatOutput(apiApps, function(data) {
          if ((data.length > 0)) {
            log.table(data, function(row, item) {
              row.cell($("Resource Group"), resourceGroupFromId(item.id));
              row.cell($("Name"), item.name);
              row.cell($("Package Id"), item.package.id);
              if (options.detailed) {
                row.cell($("Version"), item.package.version);
                row.cell($("Auth"), item.accessLevel); } ;

              row.cell($("Url"), (item.api.endpoint || $("[Codeless]"))); }); }

           else {
            log.info($("No ApiApps found.")); } ; }); _(); }, true)); }); });




  apiapp.command("show [resource-group] [name]").description($("Get detailed information about a deployed ApiApp")).option("-g --resource-group <resource-group>", $("Name of the resource group containing the ApiApp")).option("-n --name <name>", $("Name of the ApiApp")).option("-s --subscription <subscription>", $("The subscription identifier")).execute(function __2(resourceGroup, name, options, _) { var subscription, client, response, apiAppReportFormat; var __frame = { name: "__2", line: 87 }; return __func(_, this, arguments, __2, 3, __frame, function __$__2() {





      options = (options || { });
      subscription = profile.current.getSubscription(options.subscription);

      client = createApiAppClient(subscription);
      return cli.interaction.withProgress($("Getting ApiApp"), function __1(log, _) { var __frame = { name: "__1", line: 93 }; return __func(_, this, arguments, __1, 1, __frame, function __$__1() {

          return client.apiApps.get(resourceGroup, name, __cb(_, __frame, 1, 32, _, true)); }); }, __cb(_, __frame, 5, 37, function ___(__0, __2) { response = __2;


        apiAppReportFormat = [[$("Name"),"name",],[$("Location"),"location",],[$("Resource Group"),"id",function() {


          return resourceGroup;
        },],[$("Package Id"),"package.id",],[$("Package Version"),"package.version",],[$("Update Policy"),"updatePolicy",],[$("Access Level"),"accessLevel",],[$("Hosting site name"),"host.resourceName",],[$("Gateway name"),"gateway.resourceName",],];







        cli.interaction.formatOutput(response.apiApp, function(data) {
          log.report(apiAppReportFormat, data); }); _(); }, true)); }); });



  apiapp.command("create [resource-group] [name] [plan]").description($("Create a new ApiApp instance")).option("-n --name <name>", $("Name of the ApiApp instance")).option("-g --resource-group <resource-group>", $("Name of the resource group")).option("-p --plan <plan>", $("Name or Resource Id of the App Service Plan to use")).option("-u --nuget-package <package>", $("Package name and version to deploy (optional)")).option("--parameters <parameters>", $("A JSON-formatted string containing parameters")).option("--parameters-file <parametersFile>", $("A file containing parameters in JSON format")).option("-s --subscription <subscription>", $("The subscription identifier")).option("--nowait", $("Do not wait for the deployment to complete")).execute(function __3(resourceGroup, name, plan, options, _) { var normalizedParameters, message, subscription, packageInfo, resourceClient, prompter, deployer, deployment, finalResult; var __frame = { name: "__3", line: 124 }; return __func(_, this, arguments, __3, 4, __frame, function __$__3() {










      options = (options || { });


      normalizedParameters = utils.normalizeParameters({
        resourceGroup: [resourceGroup,options.resourceGroup,],
        name: [name,options.name,],
        plan: [plan,options.plan,] });


      if (normalizedParameters.err) {
        return _(normalizedParameters.err); } ;


      __.extend(options, normalizedParameters.values);

      validation.validateArgs("apiapp create", function(v) {
        v.string(options.resourceGroup, "resourceGroup");
        v.string(options.plan, "plan"); });


      if (options.name) {
        message = deployLib.validateApiAppName(options.name);
        if (!!message) {
          return _(new Error(util.format($("Invalid ApiApp Name: %s"), message))); } ; } ;



      if (!options.nugetPackage) {
        options.nugetPackage = "Microsoft.ApiApp"; } ;


      subscription = profile.current.getSubscription(options.subscription);
      packageInfo = parsePackageName(options.nugetPackage);
      resourceClient = utils.createResourceClient(subscription);

      return cli.interaction.withProgress($("Checking resource group and app service plan"), function __1(log, _) { var hostingPlanResource; var __frame = { name: "__1", line: 161 }; return __func(_, this, arguments, __1, 1, __frame, function __$__1() {


          return resourceClient.resourceGroups.checkExistence(options.resourceGroup, __cb(_, __frame, 2, 45, function ___(__0, __2) { var __1 = !__2; return (function __$__1(__then) { if (__1) {
                return _(new Error(util.format($("The resource group %s does not exist"), options.resourceGroup))); } else { __then(); } ; })(function __$__1() {


              return getHostingPlanResource(resourceClient, options.resourceGroup, options.plan, __cb(_, __frame, 6, 36, function ___(__0, __3) { hostingPlanResource = __3;
                if (!hostingPlanResource) {
                  return _(new Error(util.format($("The app service plan '%s' does not exist"), options.plan))); } ;


                options.location = hostingPlanResource.location;
                options.plan = hostingPlanResource.id; _(); }, true)); }); }, true)); }); }, __cb(_, __frame, 36, 22, function __$__3() { return (function __$__3(_) { return (function __$__3(_) {



            var __4 = objectPrompter(options); if (__4) { return _(null, __4); } ;
            return filePrompter(options, __cb(_, __frame, 54, 8, _, true)); })(__cb(_, __frame, -123, 17, function ___(__0, __3) { var __5 = __3; return (function __$__3(__then) { if (__5) { var __6 = __3; return _(null, __6); } else { __then(); } ; })(function __$__3() {
              return _(null, interactivePrompter(options, cli.interaction)); }); }, true)); })(__cb(_, __frame, -123, 17, function ___(__0, __4) { prompter = __4;

          deployer = new deployLib.ApiAppDeployer({
            subscription: subscription,
            name: options.name,
            resourceGroup: options.resourceGroup,
            location: options.location,
            package: packageInfo,
            tags: options.tags,
            hostingPlanId: options.plan,
            valueProvider: prompter,
            withProgress: cli.interaction.withProgress.bind(cli.interaction) });


          return deployer.doDeployment(__cb(_, __frame, 69, 32, function ___(__0, __5) { deployment = __5; return (function __$__3(__then) {

              if (!options.noWait) {
                return cli.interaction.withProgress($("Waiting for deployment completion"), function __2(l, _) { var progress, finalResult, tracker, __this = this; var __frame = { name: "__2", line: 197 }; return __func(_, this, arguments, __2, 1, __frame, function __$__2() { progress = __this;


                    finalResult = {
                      operations: [] };


                    tracker = deployTracker.create(resourceClient, options.resourceGroup, deployment.name);
                    tracker.on("start", function(err, deployment) {
                      finalResult.startDeployment = deployment;
                      if (!log.format().json) {
                        progress.write(function() {
                          log.info($("Deployment started:"));
                          log.report([[$("Subscription Id"),"subscription",],[$("Resource Group"),"resourceGroup",],[$("Deployment Name"),"name",],[$("Correlation Id"),"correlationId",],[$("Timestamp"),"timestamp",],], {






                            subscription: subscription.id,
                            resourceGroup: options.resourceGroup,
                            name: deployment.name,
                            correlationId: deployment.properties.correlationId,
                            timestamp: deployment.properties.timestamp });


                          log.data("");
                          log.data(util.format($("%s %s %s %s"), padRight($("Operation"), 19), padRight($("State"), 13), padRight($("Status"), 13), padRight($("Resource"), 50)));




                          log.data(util.format("%s %s %s %s", fill("-", 19), fill("-", 13), fill("-", 13), fill("-", 50))); }); } ; });




                    tracker.on("operation", function(err, op) {
                      finalResult.operations.push(op);
                      if (!log.format().json) {
                        progress.write(function() {
                          log.data(util.format($("%s %s %s %s"), padRight(op.operationId, 19), padRight(op.properties.provisioningState, 13), padRight(op.properties.statusCode, 13), op.properties.targetResource.id)); }); } ; });








                    return waitForDeploymentDone(tracker, __cb(_, __frame, 50, 42, function ___(__0, __1) { finalResult.finalDeployment = __1;
                      return _(null, finalResult); }, true)); }); }, __cb(_, __frame, 72, 42, function ___(__0, __6) { finalResult = __6;


                  cli.interaction.formatOutput(finalResult, function(data) {
                    log.info("Deployment complete with status:", data.finalDeployment.properties.provisioningState); });


                  if ((finalResult.finalDeployment.properties.provisioningState !== "Succeeded")) {
                    return _(new Error(util.format($("Deployment id %s failed with status %s"), finalResult.finalDeployment.id, finalResult.finalDeployment.properties.provisioningState))); } ; __then(); }, true)); } else {





                cli.interaction.formatOutput(deployment, function(data) {
                  log.info(util.format($("Created apiapp deployment in resource group %s using deployment named %s"), options.resourceGroup, data.name));
                  log.info(util.format($("use 'azure group deployment show %s %s' to monitor the deployment status"), options.resourceGroup, data.name)); }); __then(); } ; })(_); }, true)); }, true)); }, true)); }); });};





function waitForDeploymentDone(tracker, done) {
  var doneOnce = __.once(done);
  tracker.on("error", doneOnce);
  tracker.on("done", doneOnce);};


function resourceGroupFromId(id) {
  var re = /^\/subscriptions\/[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\/resourcegroups\/([^/]+)\//;
  var match = id.match(re);
  if (match) {
    return match[1]; } ;


  return "Unknown";};


function parsePackageName(packageName) {
  if (utils.stringIsNullOrEmpty(packageName)) {
    return null; } ;


  var result = {
    fullName: packageName,
    id: packageName };


  var versionStartRe = /\.\d+\./;
  var match = packageName.match(versionStartRe);
  if ((match !== null)) {

    result.version = packageName.slice((match.index + 1));
    result.id = packageName.slice(0, match.index); } ;

  return result;};


function objectPrompter(options) {
  if (options.parameters) {
    var parameterValues = JSON.parse(options.parameters);
    if (options.name) {
      parameterValues.$apiAppName = options.name; } ;

    return propertyPrompts.object(parameterValues); } ;

  return null;};


function filePrompter(options, _) { var buffer, parameterValues; var __frame = { name: "filePrompter", line: 317 }; return __func(_, this, arguments, filePrompter, 1, __frame, function __$filePrompter() { return (function __$filePrompter(__then) {
      if (options.parametersFile) {
        return fs.readFile(options.parametersFile, __cb(_, __frame, 2, 20, function ___(__0, __1) { buffer = __1;
          parameterValues = JSON.parse(buffer.toString().trim());
          if (options.name) {
            parameterValues.$apiAppName = options.name; } ;

          return _(null, propertyPrompts.object(parameterValues)); }, true)); } else { __then(); } ; })(function __$filePrompter() {

      return _(null, null); }); });};


function interactivePrompter(options, interaction) {
  var corePrompter = propertyPrompts.interactive(interaction);
  if (options.name) {
    return function(parameterInfo, done) {
      if ((parameterInfo.name === "$apiAppName")) {
        return done(null, options.name); } ;

      return corePrompter(parameterInfo, done); }; } ;


  return corePrompter;};


function getHostingPlanResource(client, resourceGroup, planId, _) { var planName, idRe, match, response; var __frame = { name: "getHostingPlanResource", line: 342 }; return __func(_, this, arguments, getHostingPlanResource, 3, __frame, function __$getHostingPlanResource() {


    idRe = /\/resourceGroups\/([^\/]+)\/providers\/Microsoft.Web\/serverFarms\/(.+)$/i;
    match = planId.match(idRe);
    if (!match) {
      planName = planId; }
     else {
      resourceGroup = match[1];
      planName = match[2]; } ; return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$getHostingPlanResource() {



          return client.resources.get(resourceGroup, {
            resourceName: planName,
            resourceType: "serverFarms",
            resourceProviderNamespace: "Microsoft.Web",
            resourceProviderApiVersion: "2014-06-01" }, __cb(_, __frame, 13, 36, function ___(__0, __1) { response = __1;

            return _(null, response.resource); }, true)); }); })(function ___(ex, __result) { __catch(function __$getHostingPlanResource() { if (ex) {

            if ((ex.statusCode && (ex.statusCode === 404))) {
              return _(null, null); } ;

            return _(ex); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$getHostingPlanResource() { _(); }); }); });};



function padRight(s, len) {
  s = (s || "");
  if ((s.length > len)) { return s; } ;
  return ((s + new Array((len + 1)).join(" "))).slice(0, len);};


function fill(ch, num) {
  return new Array((num + 1)).join(ch);};


function createResourceClient(subscription) {
  var client = utils.createResourceClient(subscription);
  azureSdkStream.streamify(client.resourceGroups, "list", "listNext", "resourceGroups");
  return client;};


function createApiAppClient(subscription) {
  var client = utils.createApiAppManagementClient(subscription);
  azureSdkStream.streamify(client.apiApps, "list", "listNext", "apiApps");
  azureSdkStream.streamify(client.apiApps, "listAll", "listNext", "apiApps");
  return client;};
