/*** Generated by streamline 0.10.17 (callbacks) - DO NOT EDIT ***/ var __rt=require('streamline/lib/callbacks/runtime').runtime(__filename, false),__func=__rt.__func,__cb=__rt.__cb,__catch=__rt.__catch,__tryCatch=__rt.__tryCatch; var __ = require("underscore");















var util = require("util");
var utils = require("../../../util/utils");
var constants = require("./constants");
var $ = utils.getLocaleString;
var tagUtils = require("../tag/tagUtils");
var resourceUtils = require("../resource/resourceUtils");
var VNetUtil = require("../../../util/vnet.util");

function RouteTable(cli, networkResourceProviderClient) {
  this.networkResourceProviderClient = networkResourceProviderClient;
  this.vnetUtil = new VNetUtil();
  this.output = cli.output;
  this.interaction = cli.interaction;};


__.extend(RouteTable.prototype, {
  create: function create__1(resourceGroupName, routeTableName, location, options, _) { var self, routeTable, parameters, progress, __this = this; var __frame = { name: "create__1", line: 33 }; return __func(_, this, arguments, create__1, 4, __frame, function __$create__1() { self = __this;

      return self.get(resourceGroupName, routeTableName, __cb(_, __frame, 2, 26, function ___(__0, __1) { routeTable = __1;

        if (routeTable) {
          return _(new Error(util.format($("A route table with name \"%s\" already exists in the resource group \"%s\""), routeTableName, resourceGroupName))); } ;


        parameters = self._parseRouteTable(location, options);

        progress = self.interaction.progress(util.format($("Creating route table \"%s\""), routeTableName)); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$create__1() {

              return self.networkResourceProviderClient.routeTables.createOrUpdate(resourceGroupName, routeTableName, parameters, __cb(_, __frame, 12, 53, function __$create__1() { _(null, null, true); }, true)); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$create__1() {

                progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$create__1() {

            return self.show(resourceGroupName, routeTableName, options, __cb(_, __frame, 16, 9, function __$create__1() { _(); }, true)); }); }); }, true)); }); },


  show: function show__2(resourceGroupName, routeTableName, options, _) { var self, routeTable, __this = this; var __frame = { name: "show__2", line: 52 }; return __func(_, this, arguments, show__2, 3, __frame, function __$show__2() { self = __this;

      return self.get(resourceGroupName, routeTableName, __cb(_, __frame, 2, 26, function ___(__0, __1) { routeTable = __1;

        self.interaction.formatOutput(routeTable, function(routeTable) {
          if (!routeTable) {
            self.output.warn(util.format($("A route table with name \"%s\" not found"), routeTableName)); }
           else {
            var resourceInfo = resourceUtils.getResourceInformation(routeTable.id);
            self.output.nameValue($("Id"), routeTable.id);
            self.output.nameValue($("Name"), routeTable.name);
            self.output.nameValue($("Type"), resourceInfo.resourceType);
            self.output.nameValue($("Location"), routeTable.location);
            self.output.nameValue($("Provisioning state"), routeTable.provisioningState);
            self.output.nameValue($("Tags"), tagUtils.getTagsInfo(routeTable.tags));

            if ((routeTable.subnets.length > 0)) {
              self.output.header($("Subnets"));
              routeTable.subnets.forEach(function(subnet) {
                self.output.nameValue($("Id"), subnet.id, 2); }); } ;



            if ((routeTable.routes.length > 0)) {
              self.output.header($("Routes"));
              routeTable.routes.forEach(function(route) {
                self.output.nameValue($("Name"), route.name, 2);
                self.output.nameValue($("Address prefix"), route.addressPrefix, 2);
                self.output.nameValue($("Next hop type"), route.nextHopType, 2);
                self.output.nameValue($("Next hop IP address"), route.nextHopIpAddress, 2);
                self.output.data(""); }); } ; } ; }); _(); }, true)); }); },






  list: function list__3(resourceGroupName, options, _) { var self, progress, routeTables, __this = this; var __frame = { name: "list__3", line: 89 }; return __func(_, this, arguments, list__3, 2, __frame, function __$list__3() { self = __this;

      progress = self.interaction.progress(("Looking up route tables")); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$list__3() {



            return self.networkResourceProviderClient.routeTables.list(resourceGroupName, __cb(_, __frame, 6, 67, function ___(__0, __1) { routeTables = __1; _(null, null, true); }, true)); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$list__3() {

              progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$list__3() {


          self.interaction.formatOutput(routeTables.routeTables, function(data) {
            if ((data.length === 0)) {
              self.output.warn($("No route tables found")); }
             else {
              self.output.table(data, function(row, routeTable) {
                row.cell($("Name"), routeTable.name);
                row.cell($("Location"), routeTable.location);
                row.cell($("Routes number"), routeTable.routes.length);
                row.cell($("Subnets number"), routeTable.subnets.length); }); } ; }); _(); }); }); }); },





  delete: function delete__4(resourceGroupName, routeTableName, options, _) { var self, routeTable, progress, __this = this; var __frame = { name: "delete__4", line: 114 }; return __func(_, this, arguments, delete__4, 3, __frame, function __$delete__4() { self = __this;

      return self.get(resourceGroupName, routeTableName, __cb(_, __frame, 2, 26, function ___(__0, __2) { routeTable = __2;

        if (!routeTable) {
          return _(new Error(util.format($("Route table \"%s\" not found in the resource group \"%s\""), routeTableName, resourceGroupName))); } ; return (function __$delete__4(_) {


          var __1 = !options.quiet; if (!__1) { return _(null, __1); } ; return self.interaction.confirm(util.format($("Delete route table \"%s\"? [y/n] "), routeTableName), __cb(_, __frame, 8, 44, function ___(__0, __3) { var __2 = !__3; return _(null, __2); }, true)); })(__cb(_, __frame, -113, 17, function ___(__0, __3) { return (function __$delete__4(__then) { if (__3) { return _(null); } else { __then(); } ; })(function __$delete__4() {



            progress = self.interaction.progress(util.format($("Deleting route table \"%s\""), routeTableName)); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$delete__4() {

                  return self.networkResourceProviderClient.routeTables.deleteMethod(resourceGroupName, routeTableName, __cb(_, __frame, 14, 53, function __$delete__4() { _(null, null, true); }, true)); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$delete__4() {

                    progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$delete__4() { _(); }); }); }); }, true)); }, true)); }); },



  get: function get__5(resourceGroupName, routeTableName, _) { var self, progress, routeTable, __this = this; var __frame = { name: "get__5", line: 134 }; return __func(_, this, arguments, get__5, 2, __frame, function __$get__5() { self = __this;

      progress = self.interaction.progress(util.format($("Looking up route table \"%s\""), routeTableName)); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$get__5() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$get__5() {


                  return self.networkResourceProviderClient.routeTables.get(resourceGroupName, routeTableName, __cb(_, __frame, 5, 66, function ___(__0, __1) { routeTable = __1; __then(); }, true)); }); })(function ___(e, __result) { __catch(function __$get__5() { if (e) {

                    if ((e.statusCode === 404)) {
                      return _(null, null); }
                     else {
                      return _(e); } ; __then(); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$get__5() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$get__5() {


              progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$get__5() {

          return _(null, routeTable.routeTable); }); }); }); },


  update: function update__6(resourceGroupName, routeTableName, parameters, _) { var self, progress, __this = this; var __frame = { name: "update__6", line: 152 }; return __func(_, this, arguments, update__6, 3, __frame, function __$update__6() { self = __this;

      progress = self.interaction.progress(util.format($("Updating route table \"%s\""), routeTableName)); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$update__6() {

            return self.networkResourceProviderClient.routeTable.createOrUpdate(resourceGroupName, routeTableName, parameters, __cb(_, __frame, 4, 52, function __$update__6() { _(null, null, true); }, true)); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$update__6() {

              progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$update__6() { _(); }); }); }); },



  createRoute: function createRoute__7(resourceGroupName, routeTableName, routeName, options, _) { var self, parameters, route, progress, __this = this; var __frame = { name: "createRoute__7", line: 162 }; return __func(_, this, arguments, createRoute__7, 4, __frame, function __$createRoute__7() { self = __this;


      return self._parseRoute(routeName, options, __cb(_, __frame, 3, 26, function ___(__0, __1) { parameters = __1;
        return self.getRoute(resourceGroupName, routeTableName, routeName, __cb(_, __frame, 4, 21, function ___(__0, __2) { route = __2;
          if (route) {
            return _(new Error(util.format($("A route with name \"%s\" already exists in a route table \"%s\""), routeName, routeTableName))); } ;


          progress = self.interaction.progress(util.format($("Creating route \"%s\" in a route table \"%s\""), routeName, routeTableName)); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$createRoute__7() {

                return self.networkResourceProviderClient.routes.createOrUpdate(resourceGroupName, routeTableName, routeName, parameters, __cb(_, __frame, 11, 48, function __$createRoute__7() { _(null, null, true); }, true)); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$createRoute__7() {

                  progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$createRoute__7() {

              return self.showRoute(resourceGroupName, routeTableName, routeName, options, __cb(_, __frame, 15, 9, function __$createRoute__7() { _(); }, true)); }); }); }, true)); }, true)); }); },


  setRoute: function setRoute__8(resourceGroupName, routeTableName, routeName, options, _) { var self, parameters, route, __this = this; var __frame = { name: "setRoute__8", line: 180 }; return __func(_, this, arguments, setRoute__8, 4, __frame, function __$setRoute__8() { self = __this;

      return self._parseRoute(routeName, options, __cb(_, __frame, 2, 26, function ___(__0, __1) { parameters = __1;

        return self.getRoute(resourceGroupName, routeTableName, routeName, __cb(_, __frame, 4, 21, function ___(__0, __2) { route = __2;
          if (!route) {
            return _(new Error(util.format($("A route with name \"%s\" not found"), routeName))); } ;


          if (options.addressPrefix) { route.addressPrefix = parameters.addressPrefix; } ;
          if (options.nextHopType) { route.nextHopType = parameters.nextHopType; } ;
          if (options.nextHopIpAddress) { route.nextHopIpAddress = parameters.nextHopIpAddress; } ;

          return self.updateRoute(resourceGroupName, routeTableName, routeName, route, __cb(_, __frame, 13, 9, function __$setRoute__8() {
            return self.showRoute(resourceGroupName, routeTableName, routeName, options, __cb(_, __frame, 14, 9, function __$setRoute__8() { _(); }, true)); }, true)); }, true)); }, true)); }); },


  listRoutes: function listRoutes__9(resourceGroupName, routeTableName, options, _) { var self, progress, routes, __this = this; var __frame = { name: "listRoutes__9", line: 197 }; return __func(_, this, arguments, listRoutes__9, 3, __frame, function __$listRoutes__9() { self = __this;

      progress = self.interaction.progress(("Looking up routes")); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$listRoutes__9() {



            return self.networkResourceProviderClient.routes.list(resourceGroupName, routeTableName, __cb(_, __frame, 6, 57, function ___(__0, __1) { routes = __1; _(null, null, true); }, true)); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$listRoutes__9() {

              progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$listRoutes__9() {


          self.interaction.formatOutput(routes.routes, function(data) {
            if ((data.length === 0)) {
              self.output.warn(util.format($("No routes defined for the route table \"%s\""), routeTableName)); }
             else {
              self.output.table(data, function(row, route) {
                row.cell($("Name"), route.name);
                row.cell($("Address prefix"), route.addressPrefix);
                row.cell($("Next hop type"), route.nextHopType);
                row.cell($("Next hop IP address"), (route.nextHopIpAddress || "")); }); } ; }); _(); }); }); }); },





  showRoute: function showRoute__10(resourceGroupName, routeTableName, routeName, options, _) { var self, route, __this = this; var __frame = { name: "showRoute__10", line: 222 }; return __func(_, this, arguments, showRoute__10, 4, __frame, function __$showRoute__10() { self = __this;

      return self.getRoute(resourceGroupName, routeTableName, routeName, __cb(_, __frame, 2, 21, function ___(__0, __1) { route = __1;

        self.interaction.formatOutput(route, function(route) {
          if (!route) {
            self.output.warn(util.format($("A route with name \"%s\" not found"), routeName)); }
           else {
            self.output.nameValue($("Id"), route.id);
            self.output.nameValue($("Name"), route.name);
            self.output.nameValue($("Provisioning state"), route.provisioningState);
            self.output.nameValue($("Next hop type"), route.nextHopType);
            self.output.nameValue($("Next hop IP address"), route.nextHopIpAddress);
            self.output.nameValue($("Address prefix"), route.addressPrefix); } ; }); _(); }, true)); }); },




  deleteRoute: function deleteRoute__11(resourceGroupName, routeTableName, routeName, options, _) { var self, route, progress, __this = this; var __frame = { name: "deleteRoute__11", line: 240 }; return __func(_, this, arguments, deleteRoute__11, 4, __frame, function __$deleteRoute__11() { self = __this;


      return self.getRoute(resourceGroupName, routeTableName, routeName, __cb(_, __frame, 3, 21, function ___(__0, __2) { route = __2;
        if (!route) {
          return _(new Error(util.format($("A route with name \"%s\" not found"), routeName))); } ; return (function __$deleteRoute__11(_) {


          var __1 = !options.quiet; if (!__1) { return _(null, __1); } ; return self.interaction.confirm(util.format($("Delete route \"%s\"? [y/n] "), routeName), __cb(_, __frame, 8, 44, function ___(__0, __3) { var __2 = !__3; return _(null, __2); }, true)); })(__cb(_, __frame, -239, 17, function ___(__0, __3) { return (function __$deleteRoute__11(__then) { if (__3) { return _(null); } else { __then(); } ; })(function __$deleteRoute__11() {



            progress = self.interaction.progress(util.format($("Deleting route \"%s\""), routeName)); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$deleteRoute__11() {

                  return self.networkResourceProviderClient.routes.deleteMethod(resourceGroupName, routeTableName, routeName, __cb(_, __frame, 14, 48, function __$deleteRoute__11() { _(null, null, true); }, true)); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$deleteRoute__11() {

                    progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$deleteRoute__11() { _(); }); }); }); }, true)); }, true)); }); },



  getRoute: function getRoute__12(resourceGroupName, routeTableName, routeName, _) { var self, progress, route, __this = this; var __frame = { name: "getRoute__12", line: 260 }; return __func(_, this, arguments, getRoute__12, 3, __frame, function __$getRoute__12() { self = __this;

      progress = self.interaction.progress(util.format($("Looking up route \"%s\" in route table \"%s\""), routeName, routeTableName)); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$getRoute__12() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$getRoute__12() {


                  return self.networkResourceProviderClient.routes.get(resourceGroupName, routeTableName, routeName, __cb(_, __frame, 5, 56, function ___(__0, __1) { route = __1; __then(); }, true)); }); })(function ___(e, __result) { __catch(function __$getRoute__12() { if (e) {

                    if ((e.statusCode === 404)) {
                      return _(null, null); }
                     else {
                      return _(e); } ; __then(); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$getRoute__12() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$getRoute__12() {


              progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$getRoute__12() {

          return _(null, route.route); }); }); }); },


  updateRoute: function updateRoute__13(resourceGroupName, routeTableName, routeName, parameters, _) { var self, progress, __this = this; var __frame = { name: "updateRoute__13", line: 278 }; return __func(_, this, arguments, updateRoute__13, 4, __frame, function __$updateRoute__13() { self = __this;

      progress = self.interaction.progress(util.format($("Updating route \"%s\" in route table \"%s\""), routeName, routeTableName)); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$updateRoute__13() {

            return self.networkResourceProviderClient.routes.createOrUpdate(resourceGroupName, routeTableName, routeName, parameters, __cb(_, __frame, 4, 48, function __$updateRoute__13() { _(null, null, true); }, true)); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$updateRoute__13() {

              progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$updateRoute__13() { _(); }); }); }); },



  _parseRouteTable: function(location, options) {
    var parameters = {
      location: location };


    if (options.type) {
      parameters.type = options.type; } ;


    if (options.tags) {
      parameters.tags = tagUtils.buildTagsParameter(null, options); } ;

    return parameters; },


  _parseRoute: function _parseRoute__14(routeName, options, _) { var self, route, prefixValidationResult, ipValidationResult, __this = this; var __frame = { name: "_parseRoute__14", line: 303 }; return __func(_, this, arguments, _parseRoute__14, 2, __frame, function __$_parseRoute__14() { self = __this;

      route = { };

      if (options.addressPrefix) {
        prefixValidationResult = self.vnetUtil.parseIPv4Cidr(options.addressPrefix);
        if (prefixValidationResult.error) {
          return _(new Error($("address prefix must be in CIDR format"))); } ;

        route.addressPrefix = prefixValidationResult.ipv4Cidr; } ; return (function __$_parseRoute__14(__then) {


        if (options.nextHopType) {
          route.nextHopType = utils.verifyParamExistsInCollection(constants.route.nextHopType, options.nextHopType, "next hop type"); return (function __$_parseRoute__14(__then) {


            if ((utils.ignoreCaseAndSpaceEquals(options.nextHopType, constants.route.nextHopType[0]) && !options.nextHopIpAddress)) {
              return self.interaction.promptIfNotGiven($("Next hop ip address: "), options.nextHopIpAddress, __cb(_, __frame, 17, 52, function ___(__0, __1) { options.nextHopIpAddress = __1; __then(); }, true)); } else { __then(); } ; })(__then); } else { __then(); } ; })(function __$_parseRoute__14() {



        if (options.nextHopIpAddress) {
          ipValidationResult = self.vnetUtil.parseIPv4(options.nextHopIpAddress);
          if (ipValidationResult.error) {
            return _(new Error(util.format($("next hop ip address \"%s\" is not valid"), options.nextHopIpAddress))); } ;

          route.nextHopIpAddress = options.nextHopIpAddress; } else {
          if (utils.ignoreCaseAndSpaceEquals(options.nextHopType, constants.route.nextHopType[0])) {
            return _(new Error($("--next-hop-ip-address cannot be Null or Empty when --next-hop-type is VirtualAppliance"))); } ; } ;


        return _(null, route); }); }); }});




module.exports = RouteTable;
