/*** Generated by streamline 0.10.17 (callbacks) - DO NOT EDIT ***/ var __rt=require('streamline/lib/callbacks/runtime').runtime(__filename, false),__func=__rt.__func,__cb=__rt.__cb,__catch=__rt.__catch,__tryCatch=__rt.__tryCatch; var __ = require("underscore");















var util = require("util");
var utils = require("../../../util/utils");
var $ = utils.getLocaleString;
var constants = require("./constants");
var resourceUtils = require("../resource/resourceUtils");
var tagUtils = require("../tag/tagUtils");

function ExpressRoute(cli, networkResourceProviderClient) {
  this.networkResourceProviderClient = networkResourceProviderClient;
  this.output = cli.output;
  this.interaction = cli.interaction;};


__.extend(ExpressRoute.prototype, {




  create: function create__1(resourceGroupName, circuitName, location, options, _) { var self, parameters, circuit, progress, __this = this; var __frame = { name: "create__1", line: 35 }; return __func(_, this, arguments, create__1, 4, __frame, function __$create__1() { self = __this;


      parameters = {
        name: circuitName,
        location: location,
        sku: { },
        serviceProviderProperties: {
          serviceProviderName: options.serviceProviderName,
          peeringLocation: options.peeringLocation } };



      parameters = self._parseCircuit(parameters, options, true);

      return self.get(resourceGroupName, circuitName, __cb(_, __frame, 15, 23, function ___(__0, __1) { circuit = __1;
        if (circuit) {
          return _(new Error(util.format($("An express route circuit with name \"%s\" already exists in the resource group \"%s\""), circuitName, resourceGroupName))); } ;


        progress = self.interaction.progress(util.format($("Creating express route circuit \"%s\""), circuitName)); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$create__1() {

              return self.networkResourceProviderClient.expressRouteCircuits.createOrUpdate(resourceGroupName, circuitName, parameters, __cb(_, __frame, 22, 62, function __$create__1() { _(null, null, true); }, true)); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$create__1() {

                progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$create__1() {

            return self.show(resourceGroupName, circuitName, options, __cb(_, __frame, 26, 9, function __$create__1() { _(); }, true)); }); }); }, true)); }); },


  set: function set__2(resourceGroupName, circuitName, options, _) { var self, circuit, progress, __this = this; var __frame = { name: "set__2", line: 64 }; return __func(_, this, arguments, set__2, 3, __frame, function __$set__2() { self = __this;


      return self.get(resourceGroupName, circuitName, __cb(_, __frame, 3, 23, function ___(__0, __1) { circuit = __1;
        if (!circuit) {
          return _(new Error(util.format($("A express route circuit with name \"%s\" not found in the resource group \"%s\""), circuitName, resourceGroupName))); } ;


        circuit = self._parseCircuit(circuit, options, false);

        progress = self.interaction.progress(util.format($("Updating express route circuit \"%s\""), circuitName)); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$set__2() {

              return self.networkResourceProviderClient.expressRouteCircuits.createOrUpdate(resourceGroupName, circuitName, circuit, __cb(_, __frame, 12, 62, function __$set__2() { _(null, null, true); }, true)); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$set__2() {

                progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$set__2() {

            return self.show(resourceGroupName, circuitName, options, __cb(_, __frame, 16, 9, function __$set__2() { _(); }, true)); }); }); }, true)); }); },


  list: function list__3(resourceGroupName, options, _) { var self, progress, circuits, __this = this; var __frame = { name: "list__3", line: 83 }; return __func(_, this, arguments, list__3, 2, __frame, function __$list__3() { self = __this;

      progress = self.interaction.progress($("Getting the express route circuits"));

      circuits = null; return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$list__3() {

            return self.networkResourceProviderClient.expressRouteCircuits.list(resourceGroupName, __cb(_, __frame, 6, 73, function ___(__0, __1) { circuits = __1; _(null, null, true); }, true)); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$list__3() {

              progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$list__3() {


          self.interaction.formatOutput(circuits.expressRouteCircuits, function(circuits) {
            if ((circuits.length === 0)) {
              self.output.warn($("No express route circuits found")); }
             else {
              self.output.table(circuits, function(row, circuit) {
                row.cell($("Name"), circuit.name);
                row.cell($("Location"), circuit.location);
                row.cell($("Provider name"), circuit.serviceProviderProperties.serviceProviderName);
                row.cell($("Peering location"), circuit.serviceProviderProperties.peeringLocation);
                row.cell($("Bandwidth, Mbps"), circuit.serviceProviderProperties.bandwidthInMbps);
                row.cell($("Circuit state"), circuit.circuitProvisioningState);
                row.cell($("SKU"), circuit.sku.name); }); } ; }); _(); }); }); }); },





  show: function show__4(resourceGroupName, circuitName, options, _) { var self, circuit, __this = this; var __frame = { name: "show__4", line: 111 }; return __func(_, this, arguments, show__4, 3, __frame, function __$show__4() { self = __this;

      return self.get(resourceGroupName, circuitName, __cb(_, __frame, 2, 23, function ___(__0, __1) { circuit = __1;

        self.interaction.formatOutput(circuit, function(circuit) {
          if ((circuit === null)) {
            self.output.warn(util.format($("An express route circuit with name \"%s\" not found in the resource group \"%s\""), circuitName, resourceGroupName)); }
           else {
            var resourceInfo = resourceUtils.getResourceInformation(circuit.id);
            self.output.nameValue($("Id"), circuit.id);
            self.output.nameValue($("Name"), circuit.name);
            self.output.nameValue($("Type"), resourceInfo.resourceType);
            self.output.nameValue($("Location"), circuit.location);
            self.output.nameValue($("Provisioning state"), circuit.provisioningState);
            self.output.nameValue($("Tags"), tagUtils.getTagsInfo(circuit.tags));
            self.output.nameValue($("Circuit provisioning state"), circuit.circuitProvisioningState);
            self.output.nameValue($("Service Key"), circuit.serviceKey);

            self.output.header($("Service provider"));
            self.output.nameValue($("Name"), circuit.serviceProviderProperties.serviceProviderName, 2);
            self.output.nameValue($("Provisioning state"), circuit.serviceProviderProvisioningState, 2);
            self.output.nameValue($("Peering location"), circuit.serviceProviderProperties.peeringLocation, 2);
            self.output.nameValue($("Bandwidth in Mbps"), circuit.serviceProviderProperties.bandwidthInMbps, 2);

            self.output.header($("SKU"));
            self.output.nameValue($("Name"), circuit.sku.name, 2);
            self.output.nameValue($("Tier"), circuit.sku.tier, 2);
            self.output.nameValue($("Family"), circuit.sku.family, 2); } ; }); _(); }, true)); }); },




  delete: function delete__5(resourceGroupName, circuitName, options, _) { var self, circuit, progress, __this = this; var __frame = { name: "delete__5", line: 143 }; return __func(_, this, arguments, delete__5, 3, __frame, function __$delete__5() { self = __this;

      return self.get(resourceGroupName, circuitName, __cb(_, __frame, 2, 23, function ___(__0, __2) { circuit = __2;

        if (!circuit) {
          return _(new Error(util.format($("An express route circuit with name \"%s\" not found in the resource group \"%s\""), circuitName, resourceGroupName))); } ; return (function __$delete__5(_) {


          var __1 = !options.quiet; if (!__1) { return _(null, __1); } ; return self.interaction.confirm(util.format($("Delete express route circuit \"%s\"? [y/n] "), circuitName), __cb(_, __frame, 8, 44, function ___(__0, __3) { var __2 = !__3; return _(null, __2); }, true)); })(__cb(_, __frame, -142, 17, function ___(__0, __3) { return (function __$delete__5(__then) { if (__3) { return _(null); } else { __then(); } ; })(function __$delete__5() {



            progress = self.interaction.progress(util.format($("Deleting express route circuit \"%s\""), circuitName)); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$delete__5() {

                  return self.networkResourceProviderClient.expressRouteCircuits.deleteMethod(resourceGroupName, circuitName, __cb(_, __frame, 14, 62, function __$delete__5() { _(null, null, true); }, true)); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$delete__5() {

                    progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$delete__5() { _(); }); }); }); }, true)); }, true)); }); },



  get: function get__6(resourceGroupName, circuitName, _) { var self, progress, circuit, __this = this; var __frame = { name: "get__6", line: 163 }; return __func(_, this, arguments, get__6, 2, __frame, function __$get__6() { self = __this;

      progress = self.interaction.progress(util.format($("Looking up the express route circuit \"%s\""), circuitName)); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$get__6() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$get__6() {


                  return self.networkResourceProviderClient.expressRouteCircuits.get(resourceGroupName, circuitName, __cb(_, __frame, 5, 76, function ___(__0, __1) { circuit = __1;
                    return _(null, circuit.expressRouteCircuit); }, true)); }); })(function ___(e, __result) { __catch(function __$get__6() { if (e) {

                    if ((e.statusCode === 404)) {
                      return _(null, null); } ;

                    return _(e); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$get__6() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$get__6() {

              progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$get__6() { _(); }); }); }); },



  _parseCircuit: function(circuit, options, useDefaults) {
    var self = this;

    if (options.bandwidthInMbps) {
      if (isNaN(options.bandwidthInMbps)) {
        throw new Error($("--bandwidth-in-mbps parameter must be an integer")); } ;

      circuit.serviceProviderProperties.bandwidthInMbps = options.bandwidthInMbps; }
     else if (useDefaults) {
      var defBandwidth = constants.expressRoute.defBandwidthInMbps;
      self.output.warn(util.format($("Using default bandwidth: %s"), defBandwidth));
      circuit.serviceProviderProperties.bandwidthInMbps = defBandwidth; }  ;


    if (options.skuTier) {
      circuit.sku.tier = utils.verifyParamExistsInCollection(constants.expressRoute.tier, options.skuTier, "--sku-tier"); }
     else if (useDefaults) {
      var defTier = constants.expressRoute.tier[0];
      self.output.warn(util.format($("Using default sku tier: %s"), defTier));
      circuit.sku.tier = defTier; }  ;


    if (options.skuFamily) {
      circuit.sku.family = utils.verifyParamExistsInCollection(constants.expressRoute.family, options.skuFamily, "--sku-family"); }
     else if (useDefaults) {
      var defFamily = constants.expressRoute.family[0];
      self.output.warn(util.format($("Using default sku family: %s"), defFamily));
      circuit.sku.family = defFamily; }  ;


    if ((circuit.sku.tier && circuit.sku.family)) {
      circuit.sku.name = ((circuit.sku.tier + "_") + circuit.sku.family); } ;


    if (options.tags) {
      circuit.tags = tagUtils.buildTagsParameter(null, options); } ;


    if ((options.tags === false)) {
      circuit.tags = { }; } ;


    return circuit; },





  listProviders: function listProviders__7(options, _) { var self, progress, providers, __this = this; var __frame = { name: "listProviders__7", line: 228 }; return __func(_, this, arguments, listProviders__7, 1, __frame, function __$listProviders__7() { self = __this;

      progress = self.interaction.progress($("Getting express route service providers"));

      providers = null; return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$listProviders__7() {

            return self.networkResourceProviderClient.expressRouteServiceProviders.list(__cb(_, __frame, 6, 82, function ___(__0, __1) { providers = __1; _(null, null, true); }, true)); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$listProviders__7() {

              progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$listProviders__7() {


          self.interaction.formatOutput(providers.expressRouteServiceProviders, function(providers) {
            if ((providers.length === 0)) {
              self.output.warn($("No express route service providers found"));
              return; } ;

            self.output.table(providers, function(row, provider) {
              row.cell($("Name"), provider.name);
              var bandwidthRange = "";
              if ((provider.bandwidthsOffered.length > 1)) {
                bandwidthRange = util.format("%s-%s", provider.bandwidthsOffered.shift().offerName, provider.bandwidthsOffered.pop().offerName); }

               else if ((provider.bandwidthsOffered.length == 1)) {
                bandwidthRange = provider.bandwidthsOffered.shift().offerName; }  ;

              row.cell($("Bandwidths offered"), bandwidthRange);
              row.cell($("Peering locations"), provider.peeringLocations.join()); }); }); _(); }); }); }); }});






module.exports = ExpressRoute;
