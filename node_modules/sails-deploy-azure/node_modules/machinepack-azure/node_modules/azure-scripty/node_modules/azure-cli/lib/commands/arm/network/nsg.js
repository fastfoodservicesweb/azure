/*** Generated by streamline 0.10.17 (callbacks) - DO NOT EDIT ***/ var __rt=require('streamline/lib/callbacks/runtime').runtime(__filename, false),__func=__rt.__func,__cb=__rt.__cb,__catch=__rt.__catch,__tryCatch=__rt.__tryCatch; var __ = require("underscore");















var util = require("util");
var utils = require("../../../util/utils");
var $ = utils.getLocaleString;
var constants = require("./constants");
var tagUtils = require("../tag/tagUtils");
var resourceUtils = require("../resource/resourceUtils");
var VNetUtil = require("../../../util/vnet.util");

function Nsg(cli, networkResourceProviderClient) {
  this.networkResourceProviderClient = networkResourceProviderClient;
  this.vnetUtil = new VNetUtil();
  this.output = cli.output;
  this.interaction = cli.interaction;};


__.extend(Nsg.prototype, {
  create: function create__1(resourceGroupName, nsgName, location, options, _) { var self, nsg, nsgProfile, progress, __this = this; var __frame = { name: "create__1", line: 33 }; return __func(_, this, arguments, create__1, 4, __frame, function __$create__1() { self = __this;

      return self.get(resourceGroupName, nsgName, __cb(_, __frame, 2, 19, function ___(__0, __1) { nsg = __1;

        if (nsg) {
          return _(new Error(util.format($("A network security group with name \"%s\" already exists in the resource group \"%s\""), nsgName, resourceGroupName))); } ;


        nsgProfile = {
          name: nsgName,
          location: location };


        if (options.tags) {
          nsgProfile.tags = tagUtils.buildTagsParameter(null, options); } ;


        progress = self.interaction.progress(util.format($("Creating a network security group \"%s\""), nsgName)); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$create__1() {

              return self.networkResourceProviderClient.networkSecurityGroups.createOrUpdate(resourceGroupName, nsgName, nsgProfile, __cb(_, __frame, 19, 63, function __$create__1() { _(null, null, true); }, true)); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$create__1() {

                progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$create__1() {

            return self.show(resourceGroupName, nsgName, options, __cb(_, __frame, 23, 9, function __$create__1() { _(); }, true)); }); }); }, true)); }); },


  set: function set__2(resourceGroupName, nsgName, options, _) { var self, nsg, progress, __this = this; var __frame = { name: "set__2", line: 59 }; return __func(_, this, arguments, set__2, 3, __frame, function __$set__2() { self = __this;

      return self.get(resourceGroupName, nsgName, __cb(_, __frame, 2, 19, function ___(__0, __1) { nsg = __1;

        if (!nsg) {
          return _(new Error(util.format($("A network security group with name \"%s\" not found in the resource group \"%s\""), nsgName, resourceGroupName))); } ;


        if (options.tags) {
          tagUtils.appendTags(nsg, tagUtils.buildTagsParameter(null, options)); } ;

        if ((options.tags === false)) {
          nsg.tags = { }; } ;


        progress = self.interaction.progress(util.format($("Setting a network security group \"%s\""), nsgName)); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$set__2() {

              return self.networkResourceProviderClient.networkSecurityGroups.createOrUpdate(resourceGroupName, nsgName, nsg, __cb(_, __frame, 17, 63, function __$set__2() { _(null, null, true); }, true)); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$set__2() {

                progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$set__2() {

            return self.show(resourceGroupName, nsgName, options, __cb(_, __frame, 21, 9, function __$set__2() { _(); }, true)); }); }); }, true)); }); },


  list: function list__3(resourceGroupName, options, _) { var self, progress, groups, __this = this; var __frame = { name: "list__3", line: 83 }; return __func(_, this, arguments, list__3, 2, __frame, function __$list__3() { self = __this;

      progress = self.interaction.progress($("Getting the network security groups"));
      groups = null; return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$list__3() {

            return self.networkResourceProviderClient.networkSecurityGroups.list(resourceGroupName, __cb(_, __frame, 5, 72, function ___(__0, __1) { groups = __1; _(null, null, true); }, true)); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$list__3() {

              progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$list__3() {


          self.interaction.formatOutput(groups.networkSecurityGroups, function(outputData) {
            if ((outputData.length === 0)) {
              self.output.warn($("No network security groups found")); }
             else {
              self.output.table(outputData, function(row, nsg) {
                row.cell($("Name"), nsg.name);
                row.cell($("Location"), nsg.location); }); } ; }); _(); }); }); }); },





  show: function show__4(resourceGroupName, nsgName, options, _) { var self, nsg, resourceInfo, rules, __this = this; var __frame = { name: "show__4", line: 105 }; return __func(_, this, arguments, show__4, 3, __frame, function __$show__4() { self = __this;

      return self.get(resourceGroupName, nsgName, __cb(_, __frame, 2, 19, function ___(__0, __1) { nsg = __1;

        if (nsg) {
          resourceInfo = resourceUtils.getResourceInformation(nsg.id);
          rules = self._getAllRules(nsg);
          self.interaction.formatOutput(nsg, function(nsg) {
            self.output.nameValue($("Id"), nsg.id);
            self.output.nameValue($("Name"), nsg.name);
            self.output.nameValue($("Type"), resourceInfo.resourceType);
            self.output.nameValue($("Location"), nsg.location);
            self.output.nameValue($("Provisioning state"), nsg.provisioningState);
            self.output.nameValue($("Tags"), tagUtils.getTagsInfo(nsg.tags));

            if ((rules.length > 0)) {
              self.output.header($("Security group rules"));
              self.output.table(rules, function(row, rule) {
                row.cell($("Name"), rule.name);
                row.cell($("Source IP"), rule.sourceAddressPrefix);
                row.cell($("Source Port"), rule.sourcePortRange);
                row.cell($("Destination IP"), rule.destinationAddressPrefix);
                row.cell($("Destination Port"), rule.destinationPortRange);
                row.cell($("Protocol"), rule.protocol);
                row.cell($("Direction"), rule.direction);
                row.cell($("Access"), rule.access);
                row.cell($("Priority"), rule.priority); }); } ; }); }



         else {
          if (self.output.format().json) {
            self.output.json({ }); }
           else {
            self.output.warn(util.format($("A network security group with name \"%s\" not found in the resource group \"%s\""), nsgName, resourceGroupName)); } ; } ; _(); }, true)); }); },




  delete: function delete__5(resourceGroupName, nsgName, options, _) { var self, nsg, progress, __this = this; var __frame = { name: "delete__5", line: 144 }; return __func(_, this, arguments, delete__5, 3, __frame, function __$delete__5() { self = __this;

      return self.get(resourceGroupName, nsgName, __cb(_, __frame, 2, 19, function ___(__0, __2) { nsg = __2;
        if (!nsg) {
          return _(new Error(util.format($("A network security group with name \"%s\" not found in the resource group \"%s\""), nsgName, resourceGroupName))); } ; return (function __$delete__5(_) {


          var __1 = !options.quiet; if (!__1) { return _(null, __1); } ; return self.interaction.confirm(util.format($("Delete network security group \"%s\"? [y/n] "), nsgName), __cb(_, __frame, 7, 44, function ___(__0, __3) { var __2 = !__3; return _(null, __2); }, true)); })(__cb(_, __frame, -143, 17, function ___(__0, __3) { return (function __$delete__5(__then) { if (__3) { return _(null); } else { __then(); } ; })(function __$delete__5() {



            progress = self.interaction.progress(util.format($("Deleting network security group \"%s\""), nsgName)); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$delete__5() {

                  return self.networkResourceProviderClient.networkSecurityGroups.deleteMethod(resourceGroupName, nsgName, __cb(_, __frame, 13, 63, function __$delete__5() { _(null, null, true); }, true)); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$delete__5() {

                    progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$delete__5() { _(); }); }); }); }, true)); }, true)); }); },



  get: function get__6(resourceGroupName, nsgName, _) { var self, progress, nsg, __this = this; var __frame = { name: "get__6", line: 163 }; return __func(_, this, arguments, get__6, 2, __frame, function __$get__6() { self = __this;

      progress = self.interaction.progress(util.format($("Looking up the network security group \"%s\""), nsgName)); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$get__6() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$get__6() {

                  return self.networkResourceProviderClient.networkSecurityGroups.get(resourceGroupName, nsgName, __cb(_, __frame, 4, 73, function ___(__0, __1) { nsg = __1;
                    return _(null, nsg.networkSecurityGroup); }, true)); }); })(function ___(e, __result) { __catch(function __$get__6() { if (e) {

                    if ((e.statusCode === 404)) {
                      return _(null, null); } ;

                    return _(e); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$get__6() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$get__6() {

              progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$get__6() { _(); }); }); }); },



  createRule: function createRule__7(resourceGroupName, nsgName, ruleName, options, _) { var self, nsgProfile, rule, progress, __this = this; var __frame = { name: "createRule__7", line: 179 }; return __func(_, this, arguments, createRule__7, 4, __frame, function __$createRule__7() { self = __this;

      nsgProfile = self._parseSecurityRule(options, true);

      return self.getRule(resourceGroupName, nsgName, ruleName, __cb(_, __frame, 4, 20, function ___(__0, __1) { rule = __1;
        if (rule) {
          return _(new Error(util.format($("A network security rule with name \"%s\" already exists in the network security group \"%s\""), ruleName, nsgName))); } ;


        progress = self.interaction.progress(util.format($("Creating a network security rule \"%s\""), ruleName)); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$createRule__7() {

              return self.networkResourceProviderClient.securityRules.createOrUpdate(resourceGroupName, nsgName, ruleName, nsgProfile, __cb(_, __frame, 11, 55, function __$createRule__7() { _(null, null, true); }, true)); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$createRule__7() {

                progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$createRule__7() {

            return self.showRule(resourceGroupName, nsgName, ruleName, options, __cb(_, __frame, 15, 9, function __$createRule__7() { _(); }, true)); }); }); }, true)); }); },


  setRule: function setRule__8(resourceGroupName, nsgName, ruleName, options, _) { var self, nsg, rule, ruleProfile, progress, __this = this; var __frame = { name: "setRule__8", line: 197 }; return __func(_, this, arguments, setRule__8, 4, __frame, function __$setRule__8() { self = __this;

      return self.get(resourceGroupName, nsgName, __cb(_, __frame, 2, 19, function ___(__0, __1) { nsg = __1;
        if (!nsg) {
          return _(new Error(util.format($("A network security group with name \"%s\" not found in the resource group \"%s\""), ruleName, resourceGroupName))); } ;


        rule = self._findSecurityRule(nsg, ruleName);
        if (!rule) {
          rule = self._findDefaultRule(nsg, ruleName);
          if (rule) {
            return _(new Error(util.format($("Setting up for a network default security rule is not supported")))); } ;

          return _(new Error(util.format($("A network security rule with name \"%s\" not found in the security group \"%s\""), ruleName, nsgName))); } ;


        ruleProfile = self._parseSecurityRule(options, false);
        if (options.description) { rule.description = ruleProfile.description; } ;
        if (options.protocol) { rule.protocol = ruleProfile.protocol; } ;
        if (options.sourceAddressPrefix) { rule.sourceAddressPrefix = ruleProfile.sourceAddressPrefix; } ;
        if (options.sourcePortRange) { rule.sourcePortRange = ruleProfile.sourcePortRange; } ;
        if (options.destinationAddressPrefix) { rule.destinationAddressPrefix = ruleProfile.destinationAddressPrefix; } ;
        if (options.destinationPortRange) { rule.destinationPortRange = ruleProfile.destinationPortRange; } ;
        if (options.access) { rule.access = ruleProfile.access; } ;
        if (options.priority) { rule.priority = ruleProfile.priority; } ;
        if (options.direction) { rule.direction = ruleProfile.direction; } ;

        progress = self.interaction.progress(util.format($("Setting a network security rule \"%s\""), ruleName)); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$setRule__8() {

              return self.networkResourceProviderClient.securityRules.createOrUpdate(resourceGroupName, nsgName, ruleName, rule, __cb(_, __frame, 29, 55, function __$setRule__8() { _(null, null, true); }, true)); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$setRule__8() {

                progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$setRule__8() {

            return self.showRule(resourceGroupName, nsgName, ruleName, options, __cb(_, __frame, 33, 9, function __$setRule__8() { _(); }, true)); }); }); }, true)); }); },


  listRules: function listRules__9(resourceGroupName, nsgName, options, _) { var self, nsg, rules, __this = this; var __frame = { name: "listRules__9", line: 233 }; return __func(_, this, arguments, listRules__9, 3, __frame, function __$listRules__9() { self = __this;

      return self.get(resourceGroupName, nsgName, __cb(_, __frame, 2, 19, function ___(__0, __1) { nsg = __1;
        rules = self._getAllRules(nsg);

        self.interaction.formatOutput(rules, function(outputData) {
          if ((outputData.length === 0)) {
            self.output.warn($("No rules found")); }
           else {
            self.output.table(outputData, function(row, rule) {
              row.cell($("Name"), rule.name);
              row.cell($("Source IP"), rule.sourceAddressPrefix);
              row.cell($("Source Port"), rule.sourcePortRange);
              row.cell($("Destination IP"), rule.destinationAddressPrefix);
              row.cell($("Destination Port"), rule.destinationPortRange);
              row.cell($("Protocol"), rule.protocol);
              row.cell($("Direction"), rule.direction);
              row.cell($("Access"), rule.access);
              row.cell($("Priority"), rule.priority); }); } ; }); _(); }, true)); }); },





  showRule: function showRule__10(resourceGroupName, nsgName, ruleName, options, _) { var self, nsg, rule, resourceInfo, __this = this; var __frame = { name: "showRule__10", line: 257 }; return __func(_, this, arguments, showRule__10, 4, __frame, function __$showRule__10() { self = __this;

      return self.get(resourceGroupName, nsgName, __cb(_, __frame, 2, 19, function ___(__0, __1) { nsg = __1;

        if (!nsg) {
          return _(new Error(util.format($("A network security group with name \"%s\" not found in the resource group \"%s\""), nsgName, resourceGroupName))); } ;


        rule = self._findSecurityRule(nsg, ruleName);
        if (!rule) {
          rule = self._findDefaultRule(nsg, ruleName); } ;


        if (rule) {
          resourceInfo = resourceUtils.getResourceInformation(rule.id);
          self.interaction.formatOutput(rule, function(rule) {
            self.output.nameValue($("Id"), rule.id);
            self.output.nameValue($("Name"), rule.name);
            self.output.nameValue($("Type"), resourceInfo.resourceType);
            self.output.nameValue($("Provisioning state"), rule.provisioningState);
            self.output.nameValue($("Description"), rule.description);
            self.output.nameValue($("Source IP"), rule.sourceAddressPrefix);
            self.output.nameValue($("Source Port"), rule.sourcePortRange);
            self.output.nameValue($("Destination IP"), rule.destinationAddressPrefix);
            self.output.nameValue($("Destination Port"), rule.destinationPortRange);
            self.output.nameValue($("Protocol"), rule.protocol);
            self.output.nameValue($("Direction"), rule.direction);
            self.output.nameValue($("Access"), rule.access);
            self.output.nameValue($("Priority"), rule.priority); }); }

         else {
          if (output.format().json) {
            output.json({ }); }
           else {
            output.warn(util.format($("A network security rule with name \"%s\" not found in the security group \"%s\""), ruleName, nsgName)); } ; } ; _(); }, true)); }); },




  deleteRule: function deleteRule__11(resourceGroupName, nsgName, ruleName, options, _) { var self, nsg, rule, progress, __this = this; var __frame = { name: "deleteRule__11", line: 296 }; return __func(_, this, arguments, deleteRule__11, 4, __frame, function __$deleteRule__11() { self = __this;

      return self.get(resourceGroupName, nsgName, __cb(_, __frame, 2, 19, function ___(__0, __2) { nsg = __2;
        if (!nsg) {
          return _(new Error(util.format($("A network security group with name \"%s\" not found in the resource group \"%s\""), ruleName, resourceGroupName))); } ;


        rule = self._findSecurityRule(nsg, ruleName);
        if (!rule) {
          rule = self._findDefaultRule(nsg, ruleName);
          if (rule) {
            return _(new Error(util.format($("A network default security rule with name \"%s\" cannot be deleted"), ruleName))); } ;

          return _(new Error(util.format($("A network security rule with name \"%s\" not found in the security group \"%s\""), ruleName, nsgName))); } ; return (function __$deleteRule__11(_) {


          var __1 = !options.quiet; if (!__1) { return _(null, __1); } ; return self.interaction.confirm(util.format($("Delete network security rule \"%s\"? [y/n] "), ruleName), __cb(_, __frame, 16, 44, function ___(__0, __3) { var __2 = !__3; return _(null, __2); }, true)); })(__cb(_, __frame, -295, 17, function ___(__0, __3) { return (function __$deleteRule__11(__then) { if (__3) { return _(null); } else { __then(); } ; })(function __$deleteRule__11() {



            progress = self.interaction.progress(util.format($("Deleting network security rule \"%s\""), ruleName)); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$deleteRule__11() {

                  return self.networkResourceProviderClient.securityRules.deleteMethod(resourceGroupName, nsgName, ruleName, __cb(_, __frame, 22, 55, function __$deleteRule__11() { _(null, null, true); }, true)); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$deleteRule__11() {

                    progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$deleteRule__11() { _(); }); }); }); }, true)); }, true)); }); },



  getRule: function getRule__12(resourceGroupName, nsgName, ruleName, _) { var self, progress, rule, __this = this; var __frame = { name: "getRule__12", line: 324 }; return __func(_, this, arguments, getRule__12, 3, __frame, function __$getRule__12() { self = __this;

      progress = self.interaction.progress(util.format($("Looking up the network security rule \"%s\""), ruleName)); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$getRule__12() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$getRule__12() {

                  return self.networkResourceProviderClient.securityRules.get(resourceGroupName, nsgName, ruleName, __cb(_, __frame, 4, 66, function ___(__0, __1) { rule = __1;
                    return _(null, rule); }, true)); }); })(function ___(e, __result) { __catch(function __$getRule__12() { if (e) {

                    if ((e.code === "NotFound")) {
                      return _(null, null); } ;

                    return _(e); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$getRule__12() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$getRule__12() {

              progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$getRule__12() { _(); }); }); }); },



  _parseSecurityRule: function(options, useDefaults) {
    var self = this;
    var ruleProfile = { };

    if (options.description) {
      if (((options.description !== true) && (options.description !== "''"))) {
        if ((options.description.length > 140)) {
          throw new Error($("description parameter restricted to 140 chars")); } ;

        ruleProfile.description = options.description; } ; } ;



    if (options.protocol) {
      if (utils.stringIsNullOrEmpty(options.protocol)) {
        throw new Error($("--protocol parameter must not be null or empty string")); } ;

      ruleProfile.protocol = utils.verifyParamExistsInCollection(constants.nsg.protocols, options.protocol, "--protocol"); }
     else if (useDefaults) {
      var defProtocol = constants.nsg.protocols[0];
      self.output.warn(util.format($("Using default protocol: %s"), defProtocol));
      ruleProfile.protocol = defProtocol; }  ;


    if (options.sourcePortRange) {
      ruleProfile.sourcePortRange = self._validatePortRange(options.sourcePortRange, "--source-port-range"); }
     else if (useDefaults) {
      var defSourcePort = constants.nsg.portDef;
      self.output.warn(util.format($("Using default source port: %s"), defSourcePort));
      ruleProfile.sourcePortRange = defSourcePort; }  ;


    if (options.destinationPortRange) {
      ruleProfile.destinationPortRange = self._validatePortRange(options.destinationPortRange, "--destination-port-range"); }
     else if (useDefaults) {
      var defDestPort = constants.nsg.portDef;
      self.output.warn(util.format($("Using default destination port: %s"), defDestPort));
      ruleProfile.destinationPortRange = defDestPort; }  ;


    if (options.sourceAddressPrefix) {
      ruleProfile.sourceAddressPrefix = self._validateAddressPrefix(options.sourceAddressPrefix, "--source-address-prefix"); }

     else if (useDefaults) {
      var defSourcePrefix = constants.nsg.prefixDef;
      self.output.warn(util.format($("Using default source address prefix: %s"), defSourcePrefix));
      ruleProfile.sourceAddressPrefix = defSourcePrefix; }  ;


    if (options.destinationAddressPrefix) {
      ruleProfile.destinationAddressPrefix = self._validateAddressPrefix(options.destinationAddressPrefix, "--destination-address-prefix"); }
     else if (useDefaults) {
      var defDestPrefix = constants.nsg.prefixDef;
      self.output.warn(util.format($("Using default destination address prefix: %s"), defDestPrefix));
      ruleProfile.destinationAddressPrefix = defDestPrefix; }  ;


    if (options.access) {
      if (utils.stringIsNullOrEmpty(options.access)) {
        throw new Error($("access parameter must not be null or empty string")); } ;

      ruleProfile.access = utils.verifyParamExistsInCollection(constants.nsg.access, options.access, "--access"); }
     else if (useDefaults) {
      var defAccess = constants.nsg.access[0];
      self.output.warn(util.format($("Using default access: %s"), defAccess));
      ruleProfile.access = defAccess; }  ;


    if (options.priority) {
      var priority = utils.parseInt(options.priority);
      if (((isNaN(priority) || (priority < constants.nsg.priorityMin)) || (priority > constants.nsg.priorityMax))) {
        throw new Error(util.format($("--priority must be an integer between %s and %s"), constants.nsg.priorityMin, constants.nsg.priorityMax)); } ;

      ruleProfile.priority = priority; }
     else if (useDefaults) {
      var defPriority = constants.nsg.priorityMin;
      self.output.warn(util.format($("Using default priority: %s"), defPriority));
      ruleProfile.priority = defPriority; }  ;


    if (options.direction) {
      if (utils.stringIsNullOrEmpty(options.direction)) {
        throw new Error($("direction parameter must not be null or empty string")); } ;

      ruleProfile.direction = utils.verifyParamExistsInCollection(constants.nsg.direction, options.direction, "--direction"); }
     else if (useDefaults) {
      var defDirection = constants.nsg.direction[0];
      self.output.warn(util.format($("Using default direction: %s"), defDirection));
      ruleProfile.direction = defDirection; }  ;


    return ruleProfile; },


  _validatePortRange: function(port, paramName) {
    if ((((port === "*") || (port === "\"*\"")) || !isNaN(port))) {
      return port; } ;

    var rangePattern = /^[\d]+\s*-\s*[\d]+$/;
    var match = rangePattern.test(port);
    if (!match) {
      throw new Error(util.format($("%s parameter must be a valid port or port range between %s and %s. Asterisk can be used also. Example: 80, 80-81, *"), paramName, constants.nsg.portMin, constants.nsg.portMax)); } ;


    return port; },


  _validateAddressPrefix: function(ipInCidrFormat, addressPrefixType) {
    var self = this;
    if (utils.stringIsNullOrEmpty(ipInCidrFormat)) {
      throw new Error(util.format($("IPv4 %s address prefix must not be null or empty string"), addressPrefixType)); } ;


    if (((((ipInCidrFormat === "*") || (ipInCidrFormat === "Internet")) || (ipInCidrFormat === "VirtualNetwork")) || (ipInCidrFormat === "AzureLoadBalancer"))) {
      return ipInCidrFormat; } ;


    var ipValidationResult = self.vnetUtil.parseIPv4Cidr(ipInCidrFormat);
    if ((ipValidationResult.error || (ipValidationResult.cidr === null))) {
      throw new Error(util.format($("IPv4 %s address prefix must be in CIDR format. Asterix can also be used"), addressPrefixType)); } ;

    return ipValidationResult.ipv4Cidr; },


  _getAllRules: function(nsg) {
    var rules = nsg.securityRules.concat(nsg.defaultSecurityRules);
    return rules; },


  _findDefaultRule: function(nsg, ruleName) {
    return utils.findFirstCaseIgnore(nsg.defaultSecurityRules, { name: ruleName }); },


  _findSecurityRule: function(nsg, ruleName) {
    return utils.findFirstCaseIgnore(nsg.securityRules, { name: ruleName }); }});



module.exports = Nsg;
