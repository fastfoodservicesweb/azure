/*** Generated by streamline 0.10.17 (callbacks) - DO NOT EDIT ***/ "use strict"; var __rt=require('streamline/lib/callbacks/runtime').runtime(__filename, false),__func=__rt.__func,__cb=__rt.__cb,__tryCatch=__rt.__tryCatch; var adUtils = require("./adUtils");
















var profile = require("../../../util/profile");
var utils = require("../../../util/utils");
var util = require("util");

var $ = utils.getLocaleString;

exports.init = function(cli) {
  var log = cli.output;
  var withProgress = cli.interaction.withProgress.bind(cli.interaction);

  var ad = cli.category("ad").description($("Commands to display active directory objects"));

  var adApp = ad.category("app").description($("Commands to display active directory applications"));


  adApp.command("create").description($("Creates a new active directory application")).option("-n --name <name>", $("the display name for the application")).option("--home-page <home-page>", $("the URL to the application homepage")).option("-a --available", $("indicates if the application will be available to other tenants")).option("-p --password <password>", $("the value for the password credential associated with the application that will be valid for one year by default")).option("-i --identifier-uris <identifier-uris>", $("the comma-delimitied URIs that identify the application")).option("--key-value <key-value>", $("the value for the key credentials associated with the application that will be valid for one year by default")).option("--key-type <key-type>", $("the type of the key credentials associated with the application. Acceptable values are AsymmetricX509Cert, Password and Symmetric")).option("--key-usage <key-usage>", $("the usage of the key credentials associated with the application. Acceptable values are Sign and Verify")).option("--start-date <start-date>", $("the start date after which password or key would be valid. Default value is current time")).option("--end-date <end-date>", $("the end date till which password or key is valid. Default value is one year after current time")).execute(function __1(options, _) { var startDate, endDate, keyType, keyUsage, uris, appParams, subscription, client, application; var __frame = { name: "__1", line: 45 }; return __func(_, this, arguments, __1, 1, __frame, function __$__1() {












      if (((!options.name || !options.homePage) || !options.identifierUris)) {
        return _(new Error($("--name, --home-page and --identifier-uris are all required parameters."))); } ;

      if ((options.password && options.keyValue)) {
        return _(new Error($("specify either --password or --key-value, but not both"))); } ;


      startDate = (options.startDate ? new Date(Date.parse(options.startDate)) : new Date(Date.now()));








      return (function ___closure(_) { var date; if (options.endDate) { return _(null, new Date(Date.parse(options.endDate))); } else { date = new Date(startDate); date.setFullYear((startDate.getFullYear() + 1)); return _(null, date); } ; _(); })(__cb(_, __frame, 9, 20, function ___(__0, __2) { endDate = __2;

        keyType = (options.keyType ? options.KeyType : "AsymmetricX509Cert");
        keyUsage = (options.keyUsage ? options.keyUsage : "Verify");

        uris = (options.identifierUris ? options.identifierUris.split(",") : []);

        appParams = {
          availableToOtherTenants: (options.available ? true : false),
          displayName: options.name,
          homepage: options.homePage,
          identifierUris: uris };


        if (options.password) {
          appParams.passwordCredentials = [{
            startDate: startDate,
            endDate: endDate,
            keyId: utils.uuidGen(),
            value: options.password },]; } else {

          if (options.keyValue) {
            appParams.keyCredentials = [{
              startDate: startDate,
              endDate: endDate,
              keyId: utils.uuidGen(),
              value: options.keyValue,
              usage: keyUsage,
              type: keyType },]; } ; } ;



        subscription = profile.current.getSubscription(options.subscription);
        client = adUtils.getADGraphClient(subscription);

        return withProgress(util.format($("Creating application %s"), options.name), function __1(log, _) { var __frame = { name: "__1", line: 98 }; return __func(_, this, arguments, __1, 1, __frame, function __$__1() {

            return client.application.create(appParams, __cb(_, __frame, 1, 34, function ___(__0, __2) { var __1 = __2.application; return _(null, __1); }, true)); }); }, __cb(_, __frame, 52, 24, function ___(__0, __3) { application = __3;


          adUtils.displayAApplication(application, log); _(); }, true)); }, true)); }); });



  adApp.command("delete <object-id>").description($("Deletes the active directory application")).usage("[options] <object-id>").option("--objectId <object-id>", $("the object id of the application to remove")).option("-q, --quiet", $("quiet mode (do not ask for delete confirmation)")).execute(function __2(objectId, options, _) { var subscription, client, progress; var __frame = { name: "__2", line: 111 }; return __func(_, this, arguments, __2, 2, __frame, function __$__2() {





      if (!objectId) {
        return _(null, cli.missingArgument("objectId")); } ; return (function __$__2(_) {


        var __1 = !options.quiet; if (!__1) { return _(null, __1); } ; return cli.interaction.confirm(util.format($("Delete application %s? [y/n] "), objectId), __cb(_, __frame, 5, 45, function ___(__0, __3) { var __2 = !__3; return _(null, __2); }, true)); })(__cb(_, __frame, -110, 17, function ___(__0, __2) { return (function __$__2(__then) { if (__2) { return _(null); } else { __then(); } ; })(function __$__2() {


          subscription = profile.current.getSubscription(options.subscription);
          client = adUtils.getADGraphClient(subscription);
          progress = cli.interaction.progress(util.format($("Deleting application %s"), objectId)); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__2() {

                return client.application.deleteMethod(objectId, __cb(_, __frame, 12, 27, function __$__2() { _(null, null, true); }, true)); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$__2() {

                  progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$__2() { _(); }); }); }); }, true)); }); });};
