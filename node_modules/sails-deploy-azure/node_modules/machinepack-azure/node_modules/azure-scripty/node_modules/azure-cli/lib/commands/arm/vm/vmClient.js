/*** Generated by streamline 0.10.17 (callbacks) - DO NOT EDIT ***/ var __rt=require('streamline/lib/callbacks/runtime').runtime(__filename, false),__func=__rt.__func,__cb=__rt.__cb,__catch=__rt.__catch,__tryCatch=__rt.__tryCatch,__forIn=__rt.__forIn; var fs = require("fs");















var readableStream = require("readable-stream");
var stream = require("stream");
var __ = require("underscore");
var url = require("url");
var util = require("util");

var azureStorage = require("azure-storage");

var AvailabilitySet = require("./../availabilityset/availabilitySet");
var NetworkNic = require("./networkNic");
var NetworkPublicIP = require("./networkPublicIP");
var profile = require("../../../util/profile");
var StorageUtil = require("../../../util/storage.util");
var utils = require("../../../util/utils");
var vmConstants = require("../../../util/vmConstants");
var VirtualMachine = require("./virtualMachine");
var VMImage = require("./vmImage");
var VMExtensionProfile = require("./vmExtensionProfile");
var VMProfile = require("./vmProfile");
var vmShowUtil = require("./vmShowUtil");
var VMStorageProfile = require("./vmStorageProfile");

var $ = utils.getLocaleString;
var writable = (stream.Writable || readableStream.Writable);

function WriteStream(options) {
  writable.call(this, options);};


function VMClient(cli, subscription) {
  this.cli = cli;
  this.subscription = subscription;};


__.extend(VMClient.prototype, {
  createVM: function createVM__1(resourceGroupName, vmName, location, osType, options, _) { var subscription, params, serviceClients, virtualMachine, vmResult, vmProfile, vmCreateProfile, found, foundVersion, vmImage, publishersResult, publishers, key1, typeResult, types, key2, versionResult, versions, bgInfoParams, vmExtensionProfile, vmBgInfoExtension, __this = this; var __frame = { name: "createVM__1", line: 52 }; return __func(_, this, arguments, createVM__1, 5, __frame, function __$createVM__1() {
      subscription = profile.current.getSubscription(__this.subscription);
      params = { };

      params.subscriptionId = subscription.id;
      params.vmName = vmName;
      params.location = location;
      params.imageUrn = options.imageUrn;

      params.vmSize = options.vmSize;

      params.computerName = params.vmName;
      params.adminUsername = options.adminUsername;
      params.adminPassword = options.adminPassword;
      params.osType = osType;
      params.sshPublickeyFile = options.sshPublickeyFile;
      params.generateSshKeys = options.generateSshKeys;
      params.customData = options.customData;

      params.storageAccountName = options.storageAccountName;
      params.storageAccountContainerName = (options.storageAccountContainerName || "vhds");

      params.osDiskType = params.osType;
      params.osDiskCaching = options.osDiskCaching;
      params.osDiskVhd = options.osDiskVhd;

      params.diskEncryptionKeyVaultId = options.diskEncryptionKeyVaultId;
      params.diskEncryptionKeySecretUrl = options.diskEncryptionKeyUrl;
      params.keyEncryptionKeyVaultId = options.keyEncryptionKeyVaultId;
      params.keyEncryptionKeyUrl = options.keyEncryptionKeyUrl;

      params.dataDiskCaching = options.dataDiskCaching;
      params.dataDiskVhd = options.dataDiskVhd;
      params.dataDiskSize = options.dataDiskSize;
      params.newDataDisk = !options.dataDiskExisting;
      params.dataDisks = [];

      params.nicName = options.nicName;
      params.nicId = options.nicId;
      params.nicIds = options.nicIds;
      params.nicNames = options.nicNames;

      params.publicipName = options.publicIpName;
      params.publicipDomainName = options.publicIpDomainName;
      params.publicipIdletimeout = options.publicIpIdletimeout;
      params.publicipAllocationmethod = options.publicIpAllocationMethod;

      params.vnetName = options.vnetName;
      params.vnetAddressPrefix = options.vnetAddressPrefix;
      params.vnetSubnetName = options.vnetSubnetName;
      params.vnetSubnetAddressprefix = options.vnetSubnetAddressPrefix;

      params.availsetName = options.availsetName;

      params.tags = options.tags;

      params.enableBootDiagnostics = (options.enableBootDiagnostics ? options.enableBootDiagnostics : null);
      params.enableBootDiagnostics = (options.bootDiagnosticsStorageUri ? true : params.enableBootDiagnostics);
      params.bootDiagnosticsStorageUri = (options.bootDiagnosticsStorageUri ? options.bootDiagnosticsStorageUri : null);

      params.disableBginfoExtension = (options.disableBginfoExtension ? options.disableBginfoExtension : null);

      serviceClients = __this._getServiceClients(subscription);
      virtualMachine = new VirtualMachine(__this.cli, serviceClients);
      return virtualMachine.getVM(resourceGroupName, params.vmName, __cb(_, __frame, 64, 34, function ___(__0, __5) { vmResult = __5;
        if (vmResult) {
          return _(new Error(util.format($("A virtual machine with name \"%s\" already exists in the resource group \"%s\""), vmResult.virtualMachine.name, resourceGroupName))); } ;


        vmProfile = new VMProfile(__this.cli, resourceGroupName, params, serviceClients);
        return vmProfile.generateVMProfile(__cb(_, __frame, 70, 36, function ___(__0, __6) { vmCreateProfile = __6;
          return virtualMachine.createOrUpdateVM(resourceGroupName, vmCreateProfile.profile, true, __cb(_, __frame, 71, 19, function __$createVM__1() { return (function __$createVM__1(__then) {


              if ((!params.disableBginfoExtension && (osType.toString().toLowerCase() == "windows"))) {

                found = false;
                foundVersion = vmConstants.EXTENSIONS.BGINFO_VERSION;
                vmImage = new VMImage(__this.cli, serviceClients);
                return vmImage.getVMImagePublisherList(location, __cb(_, __frame, 79, 37, function ___(__0, __7) { publishersResult = __7;
                  publishers = publishersResult.resources;
                  var __1 = __forIn(publishers); var __2 = 0; return (function ___(__break) { var __more; var __loop = __cb(_, __frame, 0, 0, function __$createVM__1() { __more = false; var __14 = (__2 < __1.length); if (__14) { key1 = __1[__2++]; return (function __$createVM__1(__then) {
                          if ((publishers[key1].name === vmConstants.EXTENSIONS.BGINFO_PUBLISHER)) {
                            return vmImage.getVMExtensionImageTypeList(location, publishers[key1].name, __cb(_, __frame, 83, 35, function ___(__0, __8) { typeResult = __8;
                              types = typeResult.resources;
                              var __3 = __forIn(types); var __4 = 0; return (function ___(__break) { var __more; var __loop = __cb(_, __frame, 0, 0, function __$createVM__1() { __more = false; var __16 = (__4 < __3.length); if (__16) { key2 = __3[__4++]; return (function __$createVM__1(__then) {
                                      if ((types[key2].name === vmConstants.EXTENSIONS.BGINFO_NAME)) {
                                        return vmImage.getVMExtensionImageVersionList(location, publishers[key1].name, types[key2].name, __cb(_, __frame, 87, 42, function ___(__0, __9) { versionResult = __9;
                                          versions = versionResult.resources;
                                          if ((versions.length > 0)) {
                                            found = true;
                                            foundVersion = versions[(versions.length - 1)].name; } ; return __break(); }, true)); } else { __then(); } ; })(function __$createVM__1() { while (__more) { __loop(); }; __more = true; }); } else { __break(); } ; }); do { __loop(); } while (__more); __more = true; })(__break); }, true)); } else { __then(); } ; })(function __$createVM__1() { while (__more) { __loop(); }; __more = true; }); } else { __break(); } ; }); do { __loop(); } while (__more); __more = true; })(function __$createVM__1() { return (function __$createVM__1(__then) {








                      if (found) {
                        bgInfoParams = {
                          resourceGroupName: resourceGroupName,
                          osType: osType,
                          location: location,
                          version: foundVersion };


                        vmExtensionProfile = new VMExtensionProfile(__this.cli, bgInfoParams, serviceClients);
                        vmBgInfoExtension = vmExtensionProfile.generateVMBgInfoExtensionProfile();
                        return virtualMachine.createOrUpdateVMExtension(resourceGroupName, params.vmName, vmBgInfoExtension.profile, true, __cb(_, __frame, 110, 23, __then, true)); } else { __then(); } ; })(__then); }); }, true)); } else { __then(); } ; })(_); }, true)); }, true)); }, true)); }); },




  quickCreateVM: function quickCreateVM__2(resourceGroupName, vmName, location, osType, imageUrn, adminUsername, adminPassword, options, _) { var subscription, removeAllSpace, resourceNamePrefix, resourceName, params, serviceClients, virtualMachine, vmResult, vmProfile, vmCreateProfile, __this = this; var __frame = { name: "quickCreateVM__2", line: 167 }; return __func(_, this, arguments, quickCreateVM__2, 8, __frame, function __$quickCreateVM__2() {
      subscription = profile.current.getSubscription(__this.subscription);

      removeAllSpace = function(str) {
        return (str.replace(/[\(\)\{\}\[\]\.\,\;\:\"\ ']/g, "").toLowerCase()); };



      resourceNamePrefix = ((((removeAllSpace(vmName).slice(0, 5) + "-") + removeAllSpace(location).slice(0, 5)) + "-") + (new Date()).getTime().toString());


      resourceName = function(postFix) {
        return ((resourceNamePrefix + "-") + postFix); };


      params = { };

      params.subscriptionId = subscription.id;
      params.vmName = vmName;
      params.location = location;
      params.imageUrn = imageUrn;


      params.vmSize = "Standard_D1";

      params.computerName = params.vmName;
      params.adminUsername = adminUsername;
      params.adminPassword = adminPassword;
      params.osType = osType;

      params.storageAccountContainerName = "vhds";

      params.osDiskType = osType;

      params.dataDisks = [];

      params.nicName = resourceName("nic");

      params.publicipName = resourceName("pip");
      params.publicipDomainName = resourceName("pip");

      params.vnetName = resourceName("vnet");
      params.vnetAddressPrefix = "10.0.0.0/16";
      params.vnetSubnetName = resourceName("snet");
      params.vnetSubnetAddressprefix = "10.0.1.0/24";



      serviceClients = __this._getServiceClients(subscription);
      virtualMachine = new VirtualMachine(__this.cli, serviceClients);
      return virtualMachine.getVM(resourceGroupName, params.vmName, __cb(_, __frame, 50, 34, function ___(__0, __1) { vmResult = __1;
        if (vmResult) {
          return _(new Error(util.format($("A virtual machine with name \"%s\" already exists in the resource group \"%s\""), vmResult.virtualMachine.name, resourceGroupName))); } ;


        vmProfile = new VMProfile(__this.cli, resourceGroupName, params, serviceClients);
        return vmProfile.generateVMProfile(__cb(_, __frame, 56, 36, function ___(__0, __2) { vmCreateProfile = __2;
          return virtualMachine.createOrUpdateVM(resourceGroupName, vmCreateProfile.profile, true, __cb(_, __frame, 57, 19, function __$quickCreateVM__2() {

            return __this.showVM(resourceGroupName, params.vmName, { }, __cb(_, __frame, 59, 9, function __$quickCreateVM__2() { _(); }, true)); }, true)); }, true)); }, true)); }); },


  showVM: function showVM__3(resourceGroupName, name, options, _) { var output, isJson, depth, subscription, serviceClients, dependencies, vmResult, virtualMachine, __this = this; var __frame = { name: "showVM__3", line: 229 }; return __func(_, this, arguments, showVM__3, 3, __frame, function __$showVM__3() {
      output = __this.cli.output;
      isJson = output.format().json;
      depth = 0;
      if (isJson) {
        if (options.depth) {
          if ((options.depth === "full")) {
            depth = -1; }
           else {
            depth = utils.parseInt(options.depth);
            if (isNaN(depth)) {
              return _(new Error($("--depth is an optional parameter but when specified it must be an integer (number of times to recurse) or text \"full\" (idefinite recursion)"))); } ; } ; } ; }



       else {
        if (options.depth) {
          output.warn($("--depth paramater will be ignored when --json option is not specified")); } ; } ;



      subscription = profile.current.getSubscription(__this.subscription);
      serviceClients = __this._getServiceClients(subscription);
      dependencies = {
        virtualMachine: new VirtualMachine(__this.cli, serviceClients),
        availabilitySet: new AvailabilitySet(__this.cli, serviceClients),
        networkNic: new NetworkNic(__this.cli, serviceClients.networkResourceProviderClient) };


      return dependencies.virtualMachine.getVMByNameExpanded(resourceGroupName, name, depth, { }, dependencies, __cb(_, __frame, 29, 47, function ___(__0, __1) { vmResult = __1; return (function __$showVM__3(__then) {
          if (vmResult) {
            virtualMachine = vmResult.virtualMachine; return (function __$showVM__3(__then) {
              if (isJson) {
                output.json(virtualMachine); __then(); } else {

                return __this._populateNics(virtualMachine, subscription, __cb(_, __frame, 35, 30, function ___(__0, __2) { virtualMachine = __2;
                  vmShowUtil.show(virtualMachine, output.data); __then(); }, true)); } ; })(__then); } else {


            if (isJson) {
              output.json({ }); }
             else {
              output.warn($("No VMs found")); } ; __then(); } ; })(_); }, true)); }); },




  listVM: function listVM__4(resourceGroupName, options, _) { var subscription, serviceClients, virtualMachine, vmsResult, output, __this = this; var __frame = { name: "listVM__4", line: 276 }; return __func(_, this, arguments, listVM__4, 2, __frame, function __$listVM__4() {
      subscription = profile.current.getSubscription(__this.subscription);
      serviceClients = __this._getServiceClients(subscription);
      virtualMachine = new VirtualMachine(__this.cli, serviceClients);

      return virtualMachine.getVMList(resourceGroupName, __cb(_, __frame, 5, 35, function ___(__0, __1) { vmsResult = __1;
        output = __this.cli.output;
        __this.cli.interaction.formatOutput(vmsResult.virtualMachines, function(outputData) {
          if ((outputData.length === 0)) {
            output.info($("No VMs found")); }
           else {
            output.table(outputData, function(row, item) {
              row.cell($("Name"), item.name);
              row.cell($("ProvisioningState"), item.provisioningState);
              row.cell($("PowerState"), (item.powerState ? item.powerState : ""));
              row.cell($("Location"), item.location);
              row.cell($("Size"), item.hardwareProfile.virtualMachineSize); }); } ; }); _(); }, true)); }); },





  deleteVM: function deleteVM__5(resourceGroupName, name, options, _) { var subscription, serviceClients, virtualMachine, vmResult, __this = this; var __frame = { name: "deleteVM__5", line: 298 }; return __func(_, this, arguments, deleteVM__5, 3, __frame, function __$deleteVM__5() {
      subscription = profile.current.getSubscription(__this.subscription);
      serviceClients = __this._getServiceClients(subscription);
      virtualMachine = new VirtualMachine(__this.cli, serviceClients);

      return virtualMachine.getVM(resourceGroupName, name, __cb(_, __frame, 5, 34, function ___(__0, __2) { vmResult = __2;
        if (!vmResult) {
          return _(new Error(util.format($("Virtual machine \"%s\" not found under the resource group \"%s\""), name, resourceGroupName))); } ; return (function __$deleteVM__5(_) {


          var __1 = !options.quiet; if (!__1) { return _(null, __1); } ; return __this.cli.interaction.confirm(util.format($("Delete the virtual machine \"%s\"? [y/n] "), name), __cb(_, __frame, 10, 48, function ___(__0, __3) { var __2 = !__3; return _(null, __2); }, true)); })(__cb(_, __frame, -297, 17, function ___(__0, __3) { return (function __$deleteVM__5(__then) { if (__3) { return _(null); } else { __then(); } ; })(function __$deleteVM__5() {



            return virtualMachine.deleteVM(resourceGroupName, name, __cb(_, __frame, 14, 19, function __$deleteVM__5() { _(); }, true)); }); }, true)); }, true)); }); },


  stopVM: function stopVM__6(resourceGroupName, name, options, _) { var subscription, serviceClients, virtualMachine, vmResult, output, __this = this; var __frame = { name: "stopVM__6", line: 315 }; return __func(_, this, arguments, stopVM__6, 3, __frame, function __$stopVM__6() {
      subscription = profile.current.getSubscription(__this.subscription);
      serviceClients = __this._getServiceClients(subscription);
      virtualMachine = new VirtualMachine(__this.cli, serviceClients);

      return virtualMachine.getVM(resourceGroupName, name, __cb(_, __frame, 5, 34, function ___(__0, __1) { vmResult = __1;
        if (!vmResult) {
          return _(new Error(util.format($("Virtual machine \"%s\" not found under the resource group \"%s\""), name, resourceGroupName))); } ;


        output = __this.cli.output;
        output.warn($("VM shutdown will not release the compute resources so you will be billed for the compute resources that this Virtual Machine uses."));
        output.info($("To release the compute resources use \"azure vm deallocate\"."));
        return virtualMachine.stopVM(resourceGroupName, name, __cb(_, __frame, 13, 19, function __$stopVM__6() { _(); }, true)); }, true)); }); },


  restartVM: function restartVM__7(resourceGroupName, name, options, _) { var subscription, serviceClients, virtualMachine, vmResult, __this = this; var __frame = { name: "restartVM__7", line: 331 }; return __func(_, this, arguments, restartVM__7, 3, __frame, function __$restartVM__7() {
      subscription = profile.current.getSubscription(__this.subscription);
      serviceClients = __this._getServiceClients(subscription);
      virtualMachine = new VirtualMachine(__this.cli, serviceClients);

      return virtualMachine.getVM(resourceGroupName, name, __cb(_, __frame, 5, 34, function ___(__0, __1) { vmResult = __1;
        if (!vmResult) {
          return _(new Error(util.format($("Virtual machine \"%s\" not found under the resource group \"%s\""), name, resourceGroupName))); } ;


        return virtualMachine.restartVM(resourceGroupName, name, __cb(_, __frame, 10, 19, function __$restartVM__7() { _(); }, true)); }, true)); }); },


  startVM: function startVM__8(resourceGroupName, name, options, _) { var subscription, serviceClients, virtualMachine, vmResult, __this = this; var __frame = { name: "startVM__8", line: 344 }; return __func(_, this, arguments, startVM__8, 3, __frame, function __$startVM__8() {
      subscription = profile.current.getSubscription(__this.subscription);
      serviceClients = __this._getServiceClients(subscription);
      virtualMachine = new VirtualMachine(__this.cli, serviceClients);

      return virtualMachine.getVM(resourceGroupName, name, __cb(_, __frame, 5, 34, function ___(__0, __1) { vmResult = __1;
        if (!vmResult) {
          return _(new Error(util.format($("Virtual machine \"%s\" not found under the resource group \"%s\""), name, resourceGroupName))); } ;


        return virtualMachine.startVM(resourceGroupName, name, __cb(_, __frame, 10, 19, function __$startVM__8() { _(); }, true)); }, true)); }); },


  deallocateVM: function deallocateVM__9(resourceGroupName, name, options, _) { var subscription, serviceClients, virtualMachine, vmResult, __this = this; var __frame = { name: "deallocateVM__9", line: 357 }; return __func(_, this, arguments, deallocateVM__9, 3, __frame, function __$deallocateVM__9() {
      subscription = profile.current.getSubscription(__this.subscription);
      serviceClients = __this._getServiceClients(subscription);
      virtualMachine = new VirtualMachine(__this.cli, serviceClients);

      return virtualMachine.getVM(resourceGroupName, name, __cb(_, __frame, 5, 34, function ___(__0, __1) { vmResult = __1;
        if (!vmResult) {
          return _(new Error(util.format($("Virtual machine \"%s\" not found under the resource group \"%s\""), name, resourceGroupName))); } ;


        return virtualMachine.deallocateVM(resourceGroupName, name, __cb(_, __frame, 10, 19, function __$deallocateVM__9() { _(); }, true)); }, true)); }); },


  captureVM: function captureVM__10(resourceGroupName, name, vhdNamePrefix, options, _) { var subscription, serviceClients, virtualMachine, vmResult, result, __this = this; var __frame = { name: "captureVM__10", line: 370 }; return __func(_, this, arguments, captureVM__10, 4, __frame, function __$captureVM__10() {
      subscription = profile.current.getSubscription(__this.subscription);
      serviceClients = __this._getServiceClients(subscription);
      virtualMachine = new VirtualMachine(__this.cli, serviceClients);

      return virtualMachine.getVM(resourceGroupName, name, __cb(_, __frame, 5, 34, function ___(__0, __1) { vmResult = __1;
        if (!vmResult) {
          return _(new Error(util.format($("Virtual machine \"%s\" not found under the resource group \"%s\""), name, resourceGroupName))); } ;


        params = {
          destinationContainerName: (options.storageAccountContainerName || "vhds"),
          virtualHardDiskNamePrefix: vhdNamePrefix,
          overwrite: (options.overwrite ? true : false) };


        return virtualMachine.captureVM(resourceGroupName, name, params, __cb(_, __frame, 16, 32, function ___(__0, __2) { result = __2;
          if ((result.output && options.templateFileName)) {
            fs.writeFileSync(options.templateFileName, JSON.stringify(result.output));
            __this.cli.output.info(util.format($("Saved template to file \"%s\""), options.templateFileName)); } ; _(); }, true)); }, true)); }); },



  generalizeVM: function generalizeVM__11(resourceGroupName, name, options, _) { var subscription, serviceClients, virtualMachine, vmResult, __this = this; var __frame = { name: "generalizeVM__11", line: 393 }; return __func(_, this, arguments, generalizeVM__11, 3, __frame, function __$generalizeVM__11() {
      subscription = profile.current.getSubscription(__this.subscription);
      serviceClients = __this._getServiceClients(subscription);
      virtualMachine = new VirtualMachine(__this.cli, serviceClients);

      return virtualMachine.getVM(resourceGroupName, name, __cb(_, __frame, 5, 34, function ___(__0, __1) { vmResult = __1;
        if (!vmResult) {
          return _(new Error(util.format($("Virtual machine \"%s\" not found under the resource group \"%s\""), name, resourceGroupName))); } ;


        return virtualMachine.generalizeVM(resourceGroupName, name, __cb(_, __frame, 10, 19, function __$generalizeVM__11() { _(); }, true)); }, true)); }); },


  getInstanceView: function getInstanceView__12(resourceGroupName, name, options, _) { var subscription, serviceClients, virtualMachine, output, instanceViewResult, vmInstanceView, __this = this; var __frame = { name: "getInstanceView__12", line: 406 }; return __func(_, this, arguments, getInstanceView__12, 3, __frame, function __$getInstanceView__12() {
      subscription = profile.current.getSubscription(__this.subscription);
      serviceClients = __this._getServiceClients(subscription);
      virtualMachine = new VirtualMachine(__this.cli, serviceClients);
      output = __this.cli.output;

      return virtualMachine.getInstanceView(resourceGroupName, name, __cb(_, __frame, 6, 44, function ___(__0, __1) { instanceViewResult = __1;
        if (!instanceViewResult) {
          if (output.format().json) {
            output.json({ }); }
           else {
            output.warn($("No VMs found")); } ; }

         else {
          vmInstanceView = instanceViewResult.virtualMachine;
          __this.cli.interaction.formatOutput(vmInstanceView, function() {
            utils.logLineFormat(vmInstanceView, output.data); }); } ; _(); }, true)); }); },




  getSerialOutput: function getSerialOutput__13(resourceGroupName, name, options, _) { var subscription, serviceClients, virtualMachine, output, instanceViewResult, vmResult, instanceView, consoleScreenshotBlobUri, serialConsoleLogBlobUri, result, storageClient, keys, blobService, content, ws, performStorageOperation, operation, storageOptions, maxLen, startPos, strlen, __this = this; var __frame = { name: "getSerialOutput__13", line: 427 }; return __func(_, this, arguments, getSerialOutput__13, 3, __frame, function __$getSerialOutput__13() {
      subscription = profile.current.getSubscription(__this.subscription);
      serviceClients = __this._getServiceClients(subscription);
      virtualMachine = new VirtualMachine(__this.cli, serviceClients);
      output = __this.cli.output;

      return virtualMachine.getInstanceView(resourceGroupName, name, __cb(_, __frame, 6, 44, function ___(__0, __2) { instanceViewResult = __2; return (function __$getSerialOutput__13(__then) {
          if (!instanceViewResult) {
            if (output.format().json) {
              output.json({ }); }
             else {
              output.warn($("No VMs found")); } ; __then(); } else {


            vmResult = instanceViewResult.virtualMachine; return (function __$getSerialOutput__13(__then) {
              if (vmResult) {
                instanceView = vmResult.instanceView;
                if (((instanceView && instanceView.bootDiagnostics) && instanceView.bootDiagnostics.consoleScreenshotBlobUri)) {

                  consoleScreenshotBlobUri = instanceView.bootDiagnostics.consoleScreenshotBlobUri;
                  __this.cli.output.info(util.format($("Console Screenshot Blob Uri:\n%s"), consoleScreenshotBlobUri)); } ; return (function __$getSerialOutput__13(__then) {


                  if (((instanceView && instanceView.bootDiagnostics) && instanceView.bootDiagnostics.serialConsoleLogBlobUri)) {

                    serialConsoleLogBlobUri = instanceView.bootDiagnostics.serialConsoleLogBlobUri;
                    __this.cli.output.info(util.format($("Serial Console Log Blob Uri:\n%s"), serialConsoleLogBlobUri));


                    StorageUtil.init(__this.cli);

                    result = __this._getStorageAccountContainerAndBlobFromUri(serialConsoleLogBlobUri); return (function __$getSerialOutput__13(__then) {
                      if (((result.accountName && result.containerName) && result.blobName)) {
                        storageClient = serviceClients.storageManagementClient;
                        return storageClient.storageAccounts.listKeys(resourceGroupName, result.accountName, __cb(_, __frame, 34, 53, function ___(__0, __3) { keys = __3;
                          blobService = azureStorage.createBlobService(result.accountName, keys.storageAccountKeys.key1);

                          content = "";
                          util.inherits(WriteStream, writable);
                          WriteStream.prototype._write = function(chunk, encoding, done) {
                            content += chunk.toString();
                            done(); };

                          ws = new WriteStream();

                          performStorageOperation = StorageUtil.performStorageOperation;
                          operation = __this._getStorageBlobOperation(blobService, "getBlobToStream");
                          storageOptions = __this._getStorageBlobOperationDefaultOption(); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$getSerialOutput__13() {


                                return performStorageOperation(operation, __cb(_, __frame, 50, 14, __then, true), result.containerName, result.blobName, ws, storageOptions); }); })(function ___(e, __result) { __catch(function __$getSerialOutput__13() { if (e) {


                                  if (StorageUtil.isNotFoundException(e)) {
                                    __this.cli.output.warn(util.format($("Can not find blob '%s' in container '%s'"), result.blobName, result.containerName)); }

                                   else {
                                    return _(e); } ; __then(); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$getSerialOutput__13() {



                              maxLen = ((options.maxLength === null) ? 1000000 : parseInt(options.maxLength, 10));
                              startPos = 0; return (function ___(__break) { var __more; var __loop = __cb(_, __frame, 0, 0, function __$getSerialOutput__13() { __more = false;
                                  var __8 = (startPos < content.length); if (__8) { return (function __$getSerialOutput__13(_) {
                                      var __1 = (startPos > 0); if (!__1) { return _(null, __1); } ; return __this.cli.interaction.confirm("Do you want to view more log?", __cb(_, __frame, 64, 56, function ___(__0, __3) { var __2 = !__3; return _(null, __2); }, true)); })(__cb(_, __frame, -426, 17, function ___(__0, __4) { return (function __$getSerialOutput__13(__then) { if (__4) { return __break(); } else { __then(); } ; })(function __$getSerialOutput__13() {



                                        strlen = (((startPos + maxLen) < content.length) ? maxLen : (content.length - startPos));
                                        __this.cli.output.info(content.substr(startPos, strlen));
                                        startPos += parseInt(strlen, 10); while (__more) { __loop(); }; __more = true; }); }, true)); } else { __break(); } ; }); do { __loop(); } while (__more); __more = true; })(__then); }); }); }, true)); } else { __then(); } ; })(__then); } else { __then(); } ; })(__then); } else { __then(); } ; })(__then); } ; })(_); }, true)); }); },







  resetVMAccess: function resetVMAccess__14(resourceGroupName, name, options, _) { var subscription, serviceClients, virtualMachine, vmResult, vmExtensionProfile, vmAccessExtension, __this = this; var __frame = { name: "resetVMAccess__14", line: 505 }; return __func(_, this, arguments, resetVMAccess__14, 3, __frame, function __$resetVMAccess__14() {
      subscription = profile.current.getSubscription(__this.subscription);
      serviceClients = __this._getServiceClients(subscription);
      virtualMachine = new VirtualMachine(__this.cli, serviceClients);

      return virtualMachine.getVM(resourceGroupName, name, __cb(_, __frame, 5, 34, function ___(__0, __1) { vmResult = __1;
        if (!vmResult) {
          return _(new Error(util.format($("Virtual machine \"%s\" not found under the resource group \"%s\""), name, resourceGroupName))); } ;


        options.location = vmResult.virtualMachine.location;
        options.osType = vmResult.virtualMachine.storageProfile.oSDisk.operatingSystemType;
        options.version = options.extensionVersion;
        vmExtensionProfile = new VMExtensionProfile(__this.cli, options);
        vmAccessExtension = vmExtensionProfile.generateVMAccessExtensionProfile();

        return virtualMachine.createOrUpdateVMExtension(resourceGroupName, name, vmAccessExtension.profile, true, __cb(_, __frame, 16, 19, function __$resetVMAccess__14() { _(); }, true)); }, true)); }); },


  enableDiagVM: function enableDiagVM__15(resourceGroupName, name, options, _) { var subscription, serviceClients, virtualMachine, vmResult, diagParams, vmExtensionProfile, vmDiagExtension, __this = this; var __frame = { name: "enableDiagVM__15", line: 524 }; return __func(_, this, arguments, enableDiagVM__15, 3, __frame, function __$enableDiagVM__15() {
      subscription = profile.current.getSubscription(__this.subscription);
      serviceClients = __this._getServiceClients(subscription);
      virtualMachine = new VirtualMachine(__this.cli, serviceClients);

      return virtualMachine.getVM(resourceGroupName, name, __cb(_, __frame, 5, 34, function ___(__0, __1) { vmResult = __1;
        if (!vmResult) {
          return _(new Error(util.format($("Virtual machine \"%s\" not found under the resource group \"%s\""), name, resourceGroupName))); } ;


        diagParams = {
          resourceGroupName: resourceGroupName,
          osType: vmResult.virtualMachine.storageProfile.oSDisk.operatingSystemType,
          location: vmResult.virtualMachine.location,
          version: options.extensionVersion,
          storageAccountName: options.storageAccountName,
          osDiskUri: vmResult.virtualMachine.storageProfile.oSDisk.virtualHardDisk.uri,
          configFile: options.configFile,
          vmID: vmResult.virtualMachine.id };


        vmExtensionProfile = new VMExtensionProfile(__this.cli, diagParams, serviceClients);
        return vmExtensionProfile.generateVMDiagExtensionProfile(__cb(_, __frame, 22, 45, function ___(__0, __2) { vmDiagExtension = __2;
          return virtualMachine.createOrUpdateVMExtension(resourceGroupName, name, vmDiagExtension.profile, true, __cb(_, __frame, 23, 19, function __$enableDiagVM__15() { _(); }, true)); }, true)); }, true)); }); },


  setVM: function setVM__16(resourceGroupName, name, options, _) { var subscription, serviceClients, virtualMachine, vmResult, vmProfile, __this = this; var __frame = { name: "setVM__16", line: 550 }; return __func(_, this, arguments, setVM__16, 3, __frame, function __$setVM__16() {
      subscription = profile.current.getSubscription(__this.subscription);
      serviceClients = __this._getServiceClients(subscription);
      virtualMachine = new VirtualMachine(__this.cli, serviceClients);

      return virtualMachine.getVM(resourceGroupName, name, __cb(_, __frame, 5, 34, function ___(__0, __1) { vmResult = __1;
        if (!vmResult) {
          return _(new Error(util.format($("Virtual machine \"%s\" not found under the resource group \"%s\""), name, resourceGroupName))); } ;



        if (((options.disableBootDiagnostics || options.enableBootDiagnostics) || options.bootDiagnosticsStorageUri)) {
          options.disableBootDiagnostics = !!(options.disableBootDiagnostics);
          options.enableBootDiagnostics = (options.enableBootDiagnostics ? true : ((options.disableBootDiagnostics ? false : true)));
          options.enableBootDiagnostics = (options.bootDiagnosticsStorageUri ? true : options.enableBootDiagnostics);
          options.bootDiagnosticsStorageUri = (options.disableBootDiagnostics ? "" : ((options.bootDiagnosticsStorageUri ? options.bootDiagnosticsStorageUri : null))); }

         else {
          options.disableBootDiagnostics = null;
          options.enableBootDiagnostics = null;
          options.bootDiagnosticsStorageUri = null; } ;


        vmProfile = new VMProfile(__this.cli, resourceGroupName, options, serviceClients);
        return vmProfile.updateVMProfile(vmResult.virtualMachine, __cb(_, __frame, 24, 40, function ___(__0, __2) { vmResult.virtualMachine = __2;

          return virtualMachine.createOrUpdateVM(resourceGroupName, vmResult.virtualMachine, false, __cb(_, __frame, 26, 19, function __$setVM__16() { _(); }, true)); }, true)); }, true)); }); },


  listVMSizesOrLocationVMSizes: function listVMSizesOrLocationVMSizes__17(options, _) { var subscription, serviceClients, virtualMachine, sizeResult, vmResult, output, __this = this; var __frame = { name: "listVMSizesOrLocationVMSizes__17", line: 579 }; return __func(_, this, arguments, listVMSizesOrLocationVMSizes__17, 1, __frame, function __$listVMSizesOrLocationVMSizes__17() {
      if ((options.location && options.vmName)) {
        return _(new Error($("Both --location and --vm-name parameters cannot be specified together."))); } ; return (function __$listVMSizesOrLocationVMSizes__17(__then) {


        if (options.vmName) { return (function __$listVMSizesOrLocationVMSizes__17(__then) {
            if (!options.resourceGroup) {
              return __this.cli.interaction.promptIfNotGiven($("Resource group name: "), options.resourceGroup, __cb(_, __frame, 7, 53, function ___(__0, __1) { options.resourceGroup = __1; __then(); }, true)); } else { __then(); } ; })(__then); } else {

          if (!options.location) {
            return _(new Error($("One of the optional parameter --location or --vm-name is required."))); } ; __then(); } ; })(function __$listVMSizesOrLocationVMSizes__17() {


        subscription = profile.current.getSubscription(__this.subscription);
        serviceClients = __this._getServiceClients(subscription);
        virtualMachine = new VirtualMachine(__this.cli, serviceClients); return (function __$listVMSizesOrLocationVMSizes__17(__then) {


          if (options.vmName) {
            return virtualMachine.getVM(options.resourceGroup, options.vmName, __cb(_, __frame, 19, 36, function ___(__0, __2) { vmResult = __2;
              if (!vmResult) {
                return _(new Error(util.format($("Virtual machine \"%s\" not found under the resource group \"%s\""), options.vmName, options.resourceGroup))); } ;


              return virtualMachine.getVMSizesByVMName(options.resourceGroup, options.vmName, __cb(_, __frame, 24, 34, function ___(__0, __3) { sizeResult = __3; __then(); }, true)); }, true)); } else {

            return virtualMachine.getVMSizesByLocationName(options.location, __cb(_, __frame, 26, 34, function ___(__0, __4) { sizeResult = __4; __then(); }, true)); } ; })(function __$listVMSizesOrLocationVMSizes__17() {


          output = __this.cli.output;
          __this.cli.interaction.formatOutput(sizeResult.virtualMachineSizes, function(outputData) {
            if ((outputData.length === 0)) {
              output.info($("No VM size details found")); }
             else {
              output.table(outputData, function(row, item) {
                row.cell($("Name"), item.name);
                row.cell($("CPU Cores"), item.numberOfCores);
                row.cell($("Memory (MB)"), item.memoryInMB);
                row.cell($("Max data-disks"), item.maxDataDiskCount);
                row.cell($("Max data-disk Size (MB)"), item.resourceDiskSizeInMB);
                row.cell($("Max OS-disk Size (MB)"), item.oSDiskSizeInMB); }); } ; }); _(); }); }); }); },





  listComputeUsage: function listComputeUsage__18(location, options, _) { var subscription, client, usageResult, output, usages, __this = this; var __frame = { name: "listComputeUsage__18", line: 625 }; return __func(_, this, arguments, listComputeUsage__18, 2, __frame, function __$listComputeUsage__18() {
      subscription = profile.current.getSubscription(__this.subscription);
      client = utils.createComputeResourceProviderClient(subscription);

      return client.usage.list(location, __cb(_, __frame, 4, 35, function ___(__0, __1) { usageResult = __1;
        output = __this.cli.output;
        if (((!usageResult || !usageResult.usages) || (usageResult.usages.length === 0))) {
          if (output.format().json) {
            output.json([]); }
           else {
            output.warn($("No compute usage information found")); } ; return _(null); } ;





        usages = usageResult.usages;
        __this.cli.interaction.formatOutput(usages, function(outputData) {
          output.table(outputData, function(row, item) {
            row.cell($("Name"), item.name.localizedValue);
            row.cell($("Unit"), item.unit);
            row.cell($("CurrentValue"), item.currentValue);
            row.cell($("Limit"), item.limit); }); }); _(); }, true)); }); },




  attachNewDataDisk: function attachNewDataDisk__19(resourceGroup, vmName, size, vhdName, options, _) { var subscription, serviceClients, params, virtualMachine, vmResult, vmStorageProfile, newDataDisk, dataDisks, __this = this; var __frame = { name: "attachNewDataDisk__19", line: 652 }; return __func(_, this, arguments, attachNewDataDisk__19, 5, __frame, function __$attachNewDataDisk__19() {
      subscription = profile.current.getSubscription(__this.subscription);
      serviceClients = __this._getServiceClients(subscription);

      params = { };
      params.dataDiskSize = size;
      params.dataDiskCaching = options.hostCaching;
      params.dataDiskVhd = vhdName;
      params.vmName = vmName;
      params.storageAccountName = options.storageAccountName;
      params.storageAccountContainerName = (options.storageAccountContainerName || "vhds");
      params.lun = options.lun;
      params.newDataDisk = true;

      virtualMachine = new VirtualMachine(__this.cli, serviceClients);
      return virtualMachine.getVM(resourceGroup, vmName, __cb(_, __frame, 15, 34, function ___(__0, __1) { vmResult = __1;
        if (!vmResult) {
          return _(new Error(util.format($("Virtual machine \"%s\" not found under the resource group \"%s\""), vmName, resourceGroup))); } ;


        if (!options.storageAccountName) {
          params.osDiskUri = vmResult.virtualMachine.storageProfile.oSDisk.virtualHardDisk.uri; }
         else {
          params.location = vmResult.virtualMachine.location; } ;


        params.dataDisks = vmResult.virtualMachine.storageProfile.dataDisks;
        vmStorageProfile = new VMStorageProfile(__this.cli, resourceGroup, params, serviceClients);
        return vmStorageProfile.generateDataDiskProfile(__cb(_, __frame, 28, 39, function ___(__0, __2) { newDataDisk = __2;
          __this.cli.output.info(util.format($("New data disk location: %s "), newDataDisk.virtualHardDisk.uri));

          dataDisks = (vmResult.virtualMachine.storageProfile.dataDisks || []);
          dataDisks.push(newDataDisk); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$attachNewDataDisk__19() {


                return virtualMachine.createOrUpdateVM(resourceGroup, vmResult.virtualMachine, false, __cb(_, __frame, 35, 21, __then, true)); }); })(function ___(err, __result) { __catch(function __$attachNewDataDisk__19() { if (err) {

                  if (((err.code === "InvalidParameter") && (err.message === "The value of parameter 'dataDisk.lun' is invalid."))) {
                    return _(new Error(util.format($("Exceeded the maximum number of data disks that can be attached to a VM with size \"%s\"."), vmResult.virtualMachine.hardwareProfile.virtualMachineSize))); }
                   else {
                    return _(err); } ; __then(); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$attachNewDataDisk__19() { _(); }); }); }, true)); }, true)); }); },




  attachDataDisk: function attachDataDisk__20(resourceGroup, vmName, vhdUrl, options, _) { var subscription, serviceClients, params, virtualMachine, vmResult, vmStorageProfile, newDataDisk, dataDisks, __this = this; var __frame = { name: "attachDataDisk__20", line: 697 }; return __func(_, this, arguments, attachDataDisk__20, 4, __frame, function __$attachDataDisk__20() {
      subscription = profile.current.getSubscription(__this.subscription);
      serviceClients = __this._getServiceClients(subscription);

      params = { };
      params.dataDiskCaching = options.hostCaching;
      params.dataDiskVhd = vhdUrl;
      params.vmName = vmName;
      params.lun = options.lun;
      params.newDataDisk = false;

      virtualMachine = new VirtualMachine(__this.cli, serviceClients);
      return virtualMachine.getVM(resourceGroup, vmName, __cb(_, __frame, 12, 34, function ___(__0, __1) { vmResult = __1;
        if (!vmResult) {
          return _(new Error(util.format($("Virtual machine \"%s\" not found under the resource group \"%s\""), vmName, resourceGroup))); } ;


        params.dataDisks = vmResult.virtualMachine.storageProfile.dataDisks;
        vmStorageProfile = new VMStorageProfile(__this.cli, resourceGroup, params, serviceClients);
        return vmStorageProfile.generateDataDiskProfile(__cb(_, __frame, 19, 39, function ___(__0, __2) { newDataDisk = __2;

          dataDisks = (vmResult.virtualMachine.storageProfile.dataDisks || []);
          dataDisks.push(newDataDisk); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$attachDataDisk__20() {


                return virtualMachine.createOrUpdateVM(resourceGroup, vmResult.virtualMachine, false, __cb(_, __frame, 25, 21, __then, true)); }); })(function ___(err, __result) { __catch(function __$attachDataDisk__20() { if (err) {

                  if (((err.code === "InvalidParameter") && (err.message === "The value of parameter 'dataDisk.lun' is invalid."))) {
                    return _(new Error(util.format($("Exceeded the maximum number of data disks that can be attached to a VM with size \"%s\"."), vmResult.virtualMachine.hardwareProfile.virtualMachineSize))); }
                   else {
                    return _(err); } ; __then(); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$attachDataDisk__20() { _(); }); }); }, true)); }, true)); }); },




  detachDataDisk: function detachDataDisk__21(resourceGroup, vmName, lun, options, _) { var subscription, serviceClients, lunAsInt, virtualMachine, vmResult, vmStorageProfile, __this = this; var __frame = { name: "detachDataDisk__21", line: 732 }; return __func(_, this, arguments, detachDataDisk__21, 4, __frame, function __$detachDataDisk__21() {
      subscription = profile.current.getSubscription(__this.subscription);
      serviceClients = __this._getServiceClients(subscription);

      lunAsInt = utils.parseInt(lun);
      if (isNaN(lunAsInt)) {
        return _(new Error($("lun must be an integer"))); } ;


      virtualMachine = new VirtualMachine(__this.cli, serviceClients);
      return virtualMachine.getVM(resourceGroup, vmName, __cb(_, __frame, 10, 34, function ___(__0, __1) { vmResult = __1;
        if (!vmResult) {
          return _(new Error(util.format($("Virtual machine \"%s\" not found under the resource group \"%s\""), vmName, resourceGroup))); } ;


        vmStorageProfile = new VMStorageProfile(__this.cli, resourceGroup, { }, serviceClients);
        vmStorageProfile.removeDataDiskByLun(vmResult.virtualMachine, lunAsInt);

        return virtualMachine.createOrUpdateVM(resourceGroup, vmResult.virtualMachine, false, __cb(_, __frame, 18, 19, function __$detachDataDisk__21() { _(); }, true)); }, true)); }); },


  listDataDisks: function listDataDisks__22(resourceGroup, vmName, options, _) { var subscription, serviceClients, virtualMachine, vmResult, dataDisks, output, __this = this; var __frame = { name: "listDataDisks__22", line: 753 }; return __func(_, this, arguments, listDataDisks__22, 3, __frame, function __$listDataDisks__22() {
      subscription = profile.current.getSubscription(__this.subscription);
      serviceClients = __this._getServiceClients(subscription);

      virtualMachine = new VirtualMachine(__this.cli, serviceClients);
      return virtualMachine.getVM(resourceGroup, vmName, __cb(_, __frame, 5, 34, function ___(__0, __1) { vmResult = __1;
        if (!vmResult) {
          return _(new Error(util.format($("Virtual machine \"%s\" not found under the resource group \"%s\""), vmName, resourceGroup))); } ;


        dataDisks = vmResult.virtualMachine.storageProfile.dataDisks;
        output = __this.cli.output;
        if ((!dataDisks || (dataDisks.length === 0))) {
          if (output.format().json) {
            output.json([]); }
           else {
            output.warn($("No data disks found")); } ; return _(null); } ;





        __this.cli.interaction.formatOutput(dataDisks, function(outputData) {
          output.table(outputData, function(row, item) {
            row.cell($("Name"), item.name);
            row.cell($("Lun"), item.lun);
            row.cell($("DiskSizeGB"), (item.diskSizeGB ? item.diskSizeGB : ""));
            row.cell($("Caching"), item.caching);
            row.cell($("URI"), item.virtualHardDisk.uri); }); }); _(); }, true)); }); },




  setExtension: function setExtension__23(resourceGroupName, vmName, extensionName, publisherName, version, options, _) { var subscription, serviceClients, virtualMachine, vmResult, __this = this; var __frame = { name: "setExtension__23", line: 786 }; return __func(_, this, arguments, setExtension__23, 6, __frame, function __$setExtension__23() {
      subscription = profile.current.getSubscription(__this.subscription);
      serviceClients = __this._getServiceClients(subscription);

      virtualMachine = new VirtualMachine(__this.cli, serviceClients);
      return virtualMachine.getVM(resourceGroupName, vmName, __cb(_, __frame, 5, 34, function ___(__0, __1) { vmResult = __1;
        if (!vmResult) {
          return _(new Error(util.format($("Virtual machine \"%s\" not found under the resource group \"%s\""), vmName, resourceGroupName))); } ;


        virtualMachine = vmResult.virtualMachine;
        if ((virtualMachine.storageProfile.oSDisk.operatingSystemType === "Windows")) {
          if ((!virtualMachine.oSProfile.windowsConfiguration || !virtualMachine.oSProfile.windowsConfiguration.provisionVMAgent)) {
            return _(new Error($("Provision Guest Agent must be enabled on the VM before setting VM Extension."))); } ; } ; return (function __$setExtension__23(__then) {



          if (options.uninstall) {
            return __this._uninstallExtension(resourceGroupName, vmName, extensionName, serviceClients, options, __cb(_, __frame, 18, 11, function __$setExtension__23() { return _(null); }, true)); } else { __then(); } ; })(function __$setExtension__23() {



          options.location = vmResult.virtualMachine.location;
          return __this._createOrUpdateExtension(resourceGroupName, vmName, extensionName, publisherName, version, options, serviceClients, __cb(_, __frame, 23, 9, function __$setExtension__23() { _(); }, true)); }); }, true)); }); },


  getExtensions: function getExtensions__24(resourceGroup, vmName, options, _) { var subscription, serviceClients, virtualMachine, vmResult, output, __this = this; var __frame = { name: "getExtensions__24", line: 812 }; return __func(_, this, arguments, getExtensions__24, 3, __frame, function __$getExtensions__24() {
      subscription = profile.current.getSubscription(__this.subscription);
      serviceClients = __this._getServiceClients(subscription);

      virtualMachine = new VirtualMachine(__this.cli, serviceClients);
      return virtualMachine.getVM(resourceGroup, vmName, __cb(_, __frame, 5, 34, function ___(__0, __1) { vmResult = __1;
        if (!vmResult) {
          return _(new Error(util.format($("Virtual machine \"%s\" not found under the resource group \"%s\""), vmName, resourceGroup))); } ;


        output = __this.cli.output;
        if ((!vmResult.virtualMachine.extensions || (vmResult.virtualMachine.extensions.length === 0))) {
          if (output.format().json) {
            output.json([]); }
           else {
            output.warn($("No VM extensions found")); } ; return _(null); } ;





        __this.cli.interaction.formatOutput(vmResult.virtualMachine.extensions, function(outputData) {
          output.table(outputData, function(row, item) {
            row.cell($("Publisher"), item.publisher);
            row.cell($("Name"), item.name);
            row.cell($("Version"), item.typeHandlerVersion);
            row.cell($("State"), item.provisioningState); }); }); _(); }, true)); }); },




  createDockerVM: function createDockerVM__25(resourceGroupName, vmName, location, osType, options, _) { var subscription, serviceClients, dockerExtensionParams, vmExtensionProfile, dockerExtension, virtualMachine, __this = this; var __frame = { name: "createDockerVM__25", line: 843 }; return __func(_, this, arguments, createDockerVM__25, 5, __frame, function __$createDockerVM__25() {
      subscription = profile.current.getSubscription(__this.subscription);
      serviceClients = __this._getServiceClients(subscription);

      dockerExtensionParams = {
        dockerPort: options.dockerPort,
        dockerCertDir: options.dockerCertDir,
        version: options.dockerExtensionVersion,
        location: location,
        vmName: vmName,
        dockerCertCn: options.dockerCertCn };

      vmExtensionProfile = new VMExtensionProfile(__this.cli, dockerExtensionParams);
      return vmExtensionProfile.generateDockerExtensionProfile(__cb(_, __frame, 13, 45, function ___(__0, __1) { dockerExtension = __1;

        return __this.createVM(resourceGroupName, vmName, location, osType, options, __cb(_, __frame, 15, 9, function __$createDockerVM__25() {
          virtualMachine = new VirtualMachine(__this.cli, serviceClients); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$createDockerVM__25() {

                return virtualMachine.createOrUpdateVMExtension(resourceGroupName, vmName, dockerExtension.profile, true, __cb(_, __frame, 18, 21, __then, true)); }); })(function ___(e, __result) { __catch(function __$createDockerVM__25() { if (e) {

                  return virtualMachine.deleteVM(resourceGroupName, vmName, __cb(_, __frame, 20, 21, function __$createDockerVM__25() {
                    return _(e); }, true)); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$createDockerVM__25() { _(); }); }); }, true)); }, true)); }); },



  listVMImagePublishers: function listVMImagePublishers__26(location, options, _) { var subscription, serviceClients, vmImage, publishersResult, publishers, output, __this = this; var __frame = { name: "listVMImagePublishers__26", line: 868 }; return __func(_, this, arguments, listVMImagePublishers__26, 2, __frame, function __$listVMImagePublishers__26() {
      subscription = profile.current.getSubscription(__this.subscription);
      serviceClients = __this._getServiceClients(subscription);

      vmImage = new VMImage(__this.cli, serviceClients);
      return vmImage.getVMImagePublisherList(location, __cb(_, __frame, 5, 35, function ___(__0, __1) { publishersResult = __1;

        publishers = publishersResult.resources;
        output = __this.cli.output;
        if ((!publishers || (publishers.length === 0))) {
          if (output.format().json) {
            output.json([]); }
           else {
            output.warn(util.format($("No virtual machine and/or extension image publishers found in the region \"%s\""), location)); } ; return _(null); } ;





        __this.cli.interaction.formatOutput(publishers, function(outputData) {
          output.table(outputData, function(row, item) {
            row.cell($("Publisher"), item.name);
            row.cell($("Location"), item.location); }); }); _(); }, true)); }); },




  listVMImageOffers: function listVMImageOffers__27(location, publisherName, options, _) { var subscription, serviceClients, vmImage, offersResult, offers, output, __this = this; var __frame = { name: "listVMImageOffers__27", line: 895 }; return __func(_, this, arguments, listVMImageOffers__27, 3, __frame, function __$listVMImageOffers__27() {
      subscription = profile.current.getSubscription(__this.subscription);
      serviceClients = __this._getServiceClients(subscription);

      vmImage = new VMImage(__this.cli, serviceClients);
      return vmImage.getVMImageOffersList(location, publisherName, __cb(_, __frame, 5, 31, function ___(__0, __1) { offersResult = __1;

        offers = offersResult.resources;
        output = __this.cli.output;
        if ((!offers || (offers.length === 0))) {
          if (output.format().json) {
            output.json([]); }
           else {
            output.warn(util.format($("No virtual machine image offers found (publisher: \"%s\" location:\"%s\")"), publisherName, location)); } ; return _(null); } ;





        __this.cli.interaction.formatOutput(offers, function(outputData) {
          output.table(outputData, function(row, item) {
            row.cell($("Publisher"), item.publisher);
            row.cell($("Offer"), item.name);
            row.cell($("Location"), item.location); }); }); _(); }, true)); }); },




  listVMImageSkus: function listVMImageSkus__28(location, publisherName, offer, options, _) { var subscription, serviceClients, vmImage, skuResult, skus, output, __this = this; var __frame = { name: "listVMImageSkus__28", line: 923 }; return __func(_, this, arguments, listVMImageSkus__28, 4, __frame, function __$listVMImageSkus__28() {
      subscription = profile.current.getSubscription(__this.subscription);
      serviceClients = __this._getServiceClients(subscription);

      vmImage = new VMImage(__this.cli, serviceClients);
      return vmImage.getVMImageSkusList(location, publisherName, offer, __cb(_, __frame, 5, 28, function ___(__0, __1) { skuResult = __1;

        skus = skuResult.resources;
        output = __this.cli.output;
        if ((!skus || (skus.length === 0))) {
          if (output.format().json) {
            output.json([]); }
           else {
            output.warn(util.format($("No virtual machine image skus found (publisher: \"%s\" location:\"%s\" offer:\"%s\")"), publisherName, location, offer)); } ; return _(null); } ;





        __this.cli.interaction.formatOutput(skus, function(outputData) {
          output.table(outputData, function(row, item) {
            row.cell($("Publisher"), item.publisher);
            row.cell($("Offer"), item.offer);
            row.cell($("sku"), item.name);
            row.cell($("Location"), item.location); }); }); _(); }, true)); }); },




  listVMImages: function listVMImages__29(params, options, _) { var subscription, serviceClients, imageFilter, vmImage, imagesResult, images, output, __this = this; var __frame = { name: "listVMImages__29", line: 952 }; return __func(_, this, arguments, listVMImages__29, 2, __frame, function __$listVMImages__29() {
      subscription = profile.current.getSubscription(__this.subscription);
      serviceClients = __this._getServiceClients(subscription);
      imageFilter = {
        location: params.location,
        publishername: params.publisher,
        offer: params.offer,
        skus: params.sku };


      vmImage = new VMImage(__this.cli, serviceClients);
      return vmImage.getVMImageList(imageFilter, __cb(_, __frame, 11, 31, function ___(__0, __1) { imagesResult = __1;
        images = imagesResult.resources;
        output = __this.cli.output;
        if ((!images || (images.length === 0))) {
          if (output.format().json) {
            output.json([]); }
           else {
            output.warn($("No virtual machine images found")); } ; return _(null); } ;





        __this.cli.interaction.formatOutput(images, function(outputData) {
          output.table(outputData, function(row, item) {
            row.cell($("Publisher"), item.publisher);
            row.cell($("Offer"), item.offer);
            row.cell($("Sku"), item.skus);
            row.cell($("OS"), item.operatingSystem);
            row.cell($("Version"), item.name);
            row.cell($("Location"), item.location);
            row.cell($("Urn"), item.urn); }); }); _(); }, true)); }); },




  listVMExtensionImageTypes: function listVMExtensionImageTypes__30(location, publisherName, options, _) { var subscription, serviceClients, vmImage, typesResult, types, output, __this = this; var __frame = { name: "listVMExtensionImageTypes__30", line: 989 }; return __func(_, this, arguments, listVMExtensionImageTypes__30, 3, __frame, function __$listVMExtensionImageTypes__30() {
      subscription = profile.current.getSubscription(__this.subscription);
      serviceClients = __this._getServiceClients(subscription);

      vmImage = new VMImage(__this.cli, serviceClients);
      return vmImage.getVMExtensionImageTypeList(location, publisherName, __cb(_, __frame, 5, 30, function ___(__0, __1) { typesResult = __1;

        types = typesResult.resources;
        output = __this.cli.output;
        if ((!types || (types.length === 0))) {
          if (output.format().json) {
            output.json([]); }
           else {
            output.warn(util.format($("No virtual machine extension image types found (publisher: \"%s\" location:\"%s\")"), publisherName, location)); } ; return _(null); } ;





        __this.cli.interaction.formatOutput(types, function(outputData) {
          output.table(outputData, function(row, item) {
            row.cell($("Publisher"), item.publisher);
            row.cell($("Type"), item.name);
            row.cell($("Location"), item.location); }); }); _(); }, true)); }); },




  listVMExtensionImageVersions: function listVMExtensionImageVersions__31(location, publisherName, typeName, options, _) { var subscription, serviceClients, vmImage, versionsResult, versions, output, __this = this; var __frame = { name: "listVMExtensionImageVersions__31", line: 1017 }; return __func(_, this, arguments, listVMExtensionImageVersions__31, 4, __frame, function __$listVMExtensionImageVersions__31() {
      subscription = profile.current.getSubscription(__this.subscription);
      serviceClients = __this._getServiceClients(subscription);

      vmImage = new VMImage(__this.cli, serviceClients);
      return vmImage.getVMExtensionImageVersionList(location, publisherName, typeName, __cb(_, __frame, 5, 33, function ___(__0, __1) { versionsResult = __1;

        versions = versionsResult.resources;
        output = __this.cli.output;
        if ((!versions || (versions.length === 0))) {
          if (output.format().json) {
            output.json([]); }
           else {
            output.warn(util.format($("No virtual machine extension image versions found (publisher: \"%s\" type: \"%s\" location:\"%s\")"), publisherName, typeName, location)); } ; return _(null); } ;





        __this.cli.interaction.formatOutput(versions, function(outputData) {
          output.table(outputData, function(row, item) {
            row.cell($("Publisher"), item.publisher);
            row.cell($("Type"), item.typeName);
            row.cell($("Version"), item.name);
            row.cell($("Location"), item.location); }); }); _(); }, true)); }); },




  getVMExtensionImage: function getVMExtensionImage__32(location, publisherName, typeName, version, options, _) { var subscription, serviceClients, vmImage, imageResult, output, __this = this; var __frame = { name: "getVMExtensionImage__32", line: 1046 }; return __func(_, this, arguments, getVMExtensionImage__32, 5, __frame, function __$getVMExtensionImage__32() {
      subscription = profile.current.getSubscription(__this.subscription);
      serviceClients = __this._getServiceClients(subscription);

      vmImage = new VMImage(__this.cli, serviceClients);
      return vmImage.getVMExtensionImage(location, publisherName, typeName, version, __cb(_, __frame, 5, 30, function ___(__0, __1) { imageResult = __1;

        output = __this.cli.output;
        if (!imageResult) {
          if (output.format().json) {
            output.json([]); }
           else {
            output.warn(util.format($("No virtual machine extension images found (publisher: \"%s\" type: \"%s\" version: \"%s\" location:\"%s\")"), publisherName, typeName, version, location)); } ; return _(null); }




         else {
          output.json(imageResult); } ; _(); }, true)); }); },



  _createOrUpdateExtension: function _createOrUpdateExtension__33(resourceGroupName, vmName, extensionName, publisherName, version, options, serviceClients, _) { var vMExtensionProfile, vmExtension, virtualMachine, __this = this; var __frame = { name: "_createOrUpdateExtension__33", line: 1068 }; return __func(_, this, arguments, _createOrUpdateExtension__33, 7, __frame, function __$_createOrUpdateExtension__33() {
      options.extensionName = extensionName;
      options.publisherName = publisherName;
      options.version = version;

      vMExtensionProfile = new VMExtensionProfile(__this.cli, options);
      vmExtension = vMExtensionProfile.generateExtensionProfile();

      virtualMachine = new VirtualMachine(__this.cli, serviceClients);
      return virtualMachine.createOrUpdateVMExtension(resourceGroupName, vmName, vmExtension.profile, true, __cb(_, __frame, 9, 19, function __$_createOrUpdateExtension__33() { _(); }, true)); }); },


  _uninstallExtension: function _uninstallExtension__34(resourceGroupName, vmName, extensionName, serviceClients, options, _) { var virtualMachine, extension, __this = this; var __frame = { name: "_uninstallExtension__34", line: 1080 }; return __func(_, this, arguments, _uninstallExtension__34, 5, __frame, function __$_uninstallExtension__34() {
      virtualMachine = new VirtualMachine(__this.cli, serviceClients);
      return virtualMachine.getVMExtension(resourceGroupName, vmName, extensionName, __cb(_, __frame, 2, 35, function ___(__0, __2) { extension = __2;
        if (!extension) {
          return _(new Error(util.format($("Extension \"%s\" not found under the virtual machine \"%s\""), extensionName, vmName))); } ; return (function __$_uninstallExtension__34(_) {


          var __1 = !options.quiet; if (!__1) { return _(null, __1); } ; return __this.cli.interaction.confirm(util.format($("Uninstall the virtual machine extension \"%s\"? [y/n] "), extensionName), __cb(_, __frame, 7, 48, function ___(__0, __3) { var __2 = !__3; return _(null, __2); }, true)); })(__cb(_, __frame, -1079, 17, function ___(__0, __3) { return (function __$_uninstallExtension__34(__then) { if (__3) { return _(null); } else { __then(); } ; })(function __$_uninstallExtension__34() {



            return virtualMachine.deleteVMExtension(resourceGroupName, vmName, extensionName, __cb(_, __frame, 11, 19, function __$_uninstallExtension__34() { _(); }, true)); }); }, true)); }, true)); }); },


  _populateNics: function _populateNics__35(virtualMachine, subscription, _) { var networkInterfaces, networkResourceProviderClient, networkNic, networkPublicIP, i, networkInterface, nicInfo, ipConfigurations, ipConfiguration, pubIPInfo, __this = this; var __frame = { name: "_populateNics__35", line: 1094 }; return __func(_, this, arguments, _populateNics__35, 2, __frame, function __$_populateNics__35() {
      if (((!virtualMachine || !virtualMachine.networkProfile) || !virtualMachine.networkProfile.networkInterfaces)) {
        return _(null, virtualMachine); } ;


      networkInterfaces = virtualMachine.networkProfile.networkInterfaces; return (function __$_populateNics__35(__then) {
        if ((networkInterfaces.length > 0)) {
          networkResourceProviderClient = utils.createNetworkResourceProviderClient(subscription);
          networkNic = new NetworkNic(__this.cli, networkResourceProviderClient);
          networkPublicIP = new NetworkPublicIP(__this.cli, networkResourceProviderClient);

          i = 0; var __4 = false; return (function ___(__break) { var __more; var __loop = __cb(_, __frame, 0, 0, function __$_populateNics__35() { __more = false; if (__4) { i++; } else { __4 = true; } ; var __3 = (i < networkInterfaces.length); if (__3) {
                networkInterface = networkInterfaces[i];
                return networkNic.getNICInfoById(networkInterface.referenceUri, __cb(_, __frame, 13, 33, function ___(__0, __1) { nicInfo = __1; return (function __$_populateNics__35(__then) {
                    if (nicInfo.profile) {
                      networkInterface.expanded = nicInfo.profile;
                      ipConfigurations = networkInterface.expanded.ipConfigurations; return (function __$_populateNics__35(__then) {
                        if ((ipConfigurations && (ipConfigurations.length > 0))) {

                          ipConfiguration = ipConfigurations[0]; return (function __$_populateNics__35(__then) {
                            if ((ipConfiguration.publicIpAddress && ipConfiguration.publicIpAddress.id)) {
                              return networkPublicIP.getPublicIPInfoById(ipConfiguration.publicIpAddress.id, __cb(_, __frame, 21, 46, function ___(__0, __2) { pubIPInfo = __2;
                                if (pubIPInfo.profile) {
                                  ipConfiguration.publicIpAddress.expanded = pubIPInfo.profile; } ; __then(); }, true)); } else { __then(); } ; })(__then); } else { __then(); } ; })(__then); } else { __then(); } ; })(function __$_populateNics__35() { while (__more) { __loop(); }; __more = true; }); }, true)); } else { __break(); } ; }); do { __loop(); } while (__more); __more = true; })(__then); } else { __then(); } ; })(function __$_populateNics__35() {







        return _(null, virtualMachine); }); }); },


  _getServiceClients: function(subscription) {
    return {
      computeManagementClient: utils.createComputeResourceProviderClient(subscription),
      storageManagementClient: utils.createStorageResourceProviderClient(subscription),
      networkResourceProviderClient: utils.createNetworkResourceProviderClient(subscription) }; },



  _getStorageAccountContainerAndBlobFromUri: function(serialConsoleLogBlobUri) {
    var result = {
      accountName: null,
      containerName: null,
      blobName: null };


    var parsedResult = url.parse(serialConsoleLogBlobUri, true);
    var hostName = (parsedResult.host || "");
    var hostSegments = hostName.split(".");
    var containerAndBlobPath = (parsedResult.path || "");
    if (((containerAndBlobPath.length > 0) && (containerAndBlobPath.charAt(0) === "/"))) {
      containerAndBlobPath = containerAndBlobPath.substr(1, (containerAndBlobPath.length - 1)); } ;

    var pathSegments = containerAndBlobPath.split("/");

    if (((hostSegments.length > 0) && (pathSegments.length == 2))) {
      result.accountName = hostSegments[0];
      result.containerName = pathSegments[0];
      result.blobName = pathSegments[1]; } ;


    return result; },


  _getStorageBlobOperation: function(serviceClient, operationName) {
    return StorageUtil.getStorageOperation(serviceClient, StorageUtil.OperationType.Blob, operationName); },


  _getStorageBlobOperationDefaultOption: function() {
    var option = StorageUtil.getStorageOperationDefaultOption();


    option.parallelOperationThreadCount = StorageUtil.threadsInOperation;

    return option; },


  setAzureDiskEncryption: function setAzureDiskEncryption__36(resourceGroupName, name, options, _) { var subscription, serviceClients, virtualMachine, params, vmResult, vmExtensionProfile, azureDiskEncryptionExtension, result, extensionName, publisherName, extensionResult, statusUrl, vmModel, encryptionSettings, __this = this; var __frame = { name: "setAzureDiskEncryption__36", line: 1174 }; return __func(_, this, arguments, setAzureDiskEncryption__36, 3, __frame, function __$setAzureDiskEncryption__36() {
      subscription = profile.current.getSubscription(__this.subscription);
      serviceClients = __this._getServiceClients(subscription);
      virtualMachine = new VirtualMachine(__this.cli, serviceClients);
      params = { };

      return virtualMachine.getVM(resourceGroupName, name, __cb(_, __frame, 6, 34, function ___(__0, __2) { vmResult = __2;
        if (!vmResult) {
          return _(new Error(util.format($("Virtual machine \"%s\" not found under the resource group \"%s\""), name, resourceGroupName))); } ;


        params.location = vmResult.virtualMachine.location;
        params.osType = vmResult.virtualMachine.storageProfile.oSDisk.operatingSystemType;
        params.version = options.extensionVersion;
        params.aadClientId = options.aadClientId;
        params.aadClientSecret = options.aadClientSecret;
        params.aadClientCertThumbprint = options.aadClientCertThumbprint;
        params.diskEncryptionKeyVaultUrl = options.diskEncryptionKeyVaultUrl;
        params.diskEncryptionKeyVaultId = options.diskEncryptionKeyVaultId;
        params.keyEncryptionKeyUrl = options.keyEncryptionKeyUrl;
        params.keyEncryptionKeyVaultId = options.keyEncryptionKeyVaultId;
        params.keyEncryptionAlgorithm = options.keyEncryptionAlgorithm;
        params.volumeType = options.volumeType;
        params.sequenceVersion = options.sequenceVersion;


        vmExtensionProfile = new VMExtensionProfile(__this.cli, params);
        azureDiskEncryptionExtension = vmExtensionProfile.generateAzureDiskEncryptionExtensionProfile(); return (function __$setAzureDiskEncryption__36(_) {

          var __1 = !options.quiet; if (!__1) { return _(null, __1); } ;
          return __this.cli.interaction.confirm($("This cmdlet prepares the VM and enables encryption which may reboot the machine and takes 10-15 minutes to finish. Please save your work on the VM before confirming. Do you want to continue? [y/n] "), __cb(_, __frame, 30, 30, function ___(__0, __3) { var __2 = !__3; return _(null, __2); }, true)); })(__cb(_, __frame, -1173, 17, function ___(__0, __3) { return (function __$setAzureDiskEncryption__36(__then) { if (__3) { return _(null); } else { __then(); } ; })(function __$setAzureDiskEncryption__36() {




            return virtualMachine.createOrUpdateVMExtension(resourceGroupName, name, azureDiskEncryptionExtension.profile, true, __cb(_, __frame, 35, 32, function ___(__0, __4) { result = __4;
              if ((!(result) || !utils.ignoreCaseEquals(result.status, vmConstants.EXTENSIONS.EXTENSION_PROVISIONING_SUCCEEDED))) {


                return _(new Error(util.format($("Installing extension failed with : %s  "), result.error.message))); } ;



              extensionName = "";
              publisherName = "";

              if (utils.ignoreCaseEquals(params.osType, "Linux")) {
                extensionName = vmConstants.EXTENSIONS.AZURE_DISK_ENCRYPTION_LINUX_EXTENSION_NAME;
                publisherName = vmConstants.EXTENSIONS.AZURE_DISK_ENCRYPTION_LINUX_EXTENSION_PUBLISHER; } else {

                if (utils.ignoreCaseEquals(params.osType, "Windows")) {
                  extensionName = vmConstants.EXTENSIONS.AZURE_DISK_ENCRYPTION_WINDOWS_EXTENSION_NAME;
                  publisherName = vmConstants.EXTENSIONS.AZURE_DISK_ENCRYPTION_WINDOWS_EXTENSION_PUBLISHER; } ; } ;

              return serviceClients.computeManagementClient.virtualMachineExtensions.getWithInstanceView(resourceGroupName, name, extensionName, __cb(_, __frame, 54, 90, function ___(__0, __5) { extensionResult = __5;

                if ((((((((!extensionResult || !extensionResult.virtualMachineExtension) || !extensionResult.virtualMachineExtension.instanceView) || !extensionResult.virtualMachineExtension.instanceView.statuses) || ((extensionResult.virtualMachineExtension.instanceView.statuses.length < 1))) || !utils.ignoreCaseEquals(extensionResult.virtualMachineExtension.publisher, publisherName)) || !utils.ignoreCaseEquals(extensionResult.virtualMachineExtension.extensionType, extensionName)) || !utils.ignoreCaseEquals(extensionResult.virtualMachineExtension.provisioningState, vmConstants.EXTENSIONS.EXTENSION_PROVISIONING_SUCCEEDED))) {








                  return _(new Error(util.format($("Virtual machine \"%s\" extension with successful status not found after installing extension  "), extensionName))); } ;


                statusUrl = extensionResult.virtualMachineExtension.instanceView.statuses[0].message;
                if (utils.stringIsNullOrEmpty(statusUrl)) {

                  return _(new Error(util.format($("Extension status is empty. It should be valid KeyVault secret URL"), statusUrl))); } ;


                return virtualMachine.getVM(resourceGroupName, name, __cb(_, __frame, 74, 33, function ___(__0, __6) { vmModel = __6;
                  if (((!vmModel || !vmModel.virtualMachine) || !vmModel.virtualMachine.storageProfile)) {



                    return _(new Error(util.format($("Virtual machine \"%s\" with valid storage profile is not found under the resource group \"%s\""), name, resourceGroupName))); } ;



                  encryptionSettings = {
                    diskEncryptionKey: {
                      sourceVault: {
                        referenceUri: options.diskEncryptionKeyVaultId },

                      secretUrl: statusUrl },

                    keyEncryptionKey: null };

                  if ((options.keyEncryptionKeyVaultId || options.keyEncryptionKeyUrl)) {
                    encryptionSettings.keyEncryptionKey = {
                      sourceVault: {
                        referenceUri: options.keyEncryptionKeyVaultId },

                      keyUrl: options.keyEncryptionKeyUrl }; } ;




                  vmModel.virtualMachine.storageProfile.oSDisk.encryptionSettings = encryptionSettings;
                  return virtualMachine.createOrUpdateVM(resourceGroupName, vmModel.virtualMachine, false, __cb(_, __frame, 103, 26, _, true)); }, true)); }, true)); }, true)); }); }, true)); }, true)); }); },


  showAzureDiskEncryptionStatus: function showAzureDiskEncryptionStatus__37(resourceGroupName, name, options, _) { var subscription, serviceClients, virtualMachine, output, encryptionStatus, extensionStatus, vmModel, extensionName, publisherName, isJson, string, __this = this; var __frame = { name: "showAzureDiskEncryptionStatus__37", line: 1280 }; return __func(_, this, arguments, showAzureDiskEncryptionStatus__37, 3, __frame, function __$showAzureDiskEncryptionStatus__37() {
      subscription = profile.current.getSubscription(__this.subscription);
      serviceClients = __this._getServiceClients(subscription);
      virtualMachine = new VirtualMachine(__this.cli, serviceClients);
      output = __this.cli.output;
      encryptionStatus = {
        osVolumeEncrypted: false,
        osVolumeEncryptionSettings: null,
        dataVolumesEncrypted: false };

      extensionStatus = null;

      return virtualMachine.getVM(resourceGroupName, name, __cb(_, __frame, 12, 33, function ___(__0, __1) { vmModel = __1;
        if (!vmModel) {
          return _(new Error(util.format($("Virtual machine \"%s\" not found under the resource group \"%s\""), name, resourceGroupName))); } ; return (function __$showAzureDiskEncryptionStatus__37(__then) {


          if (vmModel.virtualMachine.storageProfile.oSDisk.encryptionSettings) {

            encryptionStatus.osVolumeEncryptionSettings = vmModel.virtualMachine.storageProfile.oSDisk.encryptionSettings;
            encryptionStatus.osVolumeEncrypted = true;




            extensionName = "";
            publisherName = "";

            if (utils.ignoreCaseEquals(vmModel.virtualMachine.storageProfile.oSDisk.operatingSystemType, "Linux")) {
              extensionName = vmConstants.EXTENSIONS.AZURE_DISK_ENCRYPTION_LINUX_EXTENSION_NAME;
              publisherName = vmConstants.EXTENSIONS.AZURE_DISK_ENCRYPTION_LINUX_EXTENSION_PUBLISHER; } else {

              if (utils.ignoreCaseEquals(vmModel.virtualMachine.storageProfile.oSDisk.operatingSystemType, "Windows")) {
                extensionName = vmConstants.EXTENSIONS.AZURE_DISK_ENCRYPTION_WINDOWS_EXTENSION_NAME;
                publisherName = vmConstants.EXTENSIONS.AZURE_DISK_ENCRYPTION_WINDOWS_EXTENSION_PUBLISHER; } ; } ; return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$showAzureDiskEncryptionStatus__37() {



                  return serviceClients.computeManagementClient.virtualMachineExtensions.getWithInstanceView(resourceGroupName, name, extensionName, __cb(_, __frame, 38, 90, function ___(__0, __2) { extensionStatus = __2; __then(); }, true)); }); })(function ___(e, __result) { __catch(function __$showAzureDiskEncryptionStatus__37() { if (e) {


                    extensionStatus = null; __then(); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$showAzureDiskEncryptionStatus__37() {


                if ((((((extensionStatus) && (extensionStatus.virtualMachineExtension)) && utils.ignoreCaseEquals(extensionStatus.virtualMachineExtension.publisher, publisherName)) && utils.ignoreCaseEquals(extensionStatus.virtualMachineExtension.extensionType, extensionName)) && utils.ignoreCaseEquals(extensionStatus.virtualMachineExtension.provisioningState, vmConstants.EXTENSIONS.EXTENSION_PROVISIONING_SUCCEEDED))) {





                  if ((((!extensionStatus.virtualMachineExtension.settings.VolumeType || utils.ignoreCaseEquals(extensionStatus.virtualMachineExtension.settings.VolumeType, "All")) || utils.ignoreCaseEquals(extensionStatus.virtualMachineExtension.settings.VolumeType, "Data")) || (utils.stringIsNullOrEmpty(extensionStatus.virtualMachineExtension.settings.VolumeType)))) {




                    encryptionStatus.dataVolumesEncrypted = true; } ; } ; __then(); }); }); } else { __then(); } ; })(function __$showAzureDiskEncryptionStatus__37() {





          isJson = output.format().json;
          if (isJson) {
            output.json(encryptionStatus); }
           else {
            string = JSON.stringify(encryptionStatus);
            __this.cli.output.info(string); } ;


          return _(null, encryptionStatus); }); }, true)); }); }});




module.exports = VMClient;
