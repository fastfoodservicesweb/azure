/*** Generated by streamline 0.10.17 (callbacks) - DO NOT EDIT ***/ var __rt=require('streamline/lib/callbacks/runtime').runtime(__filename, false),__func=__rt.__func,__cb=__rt.__cb,__catch=__rt.__catch,__tryCatch=__rt.__tryCatch; var __ = require("underscore");















var util = require("util");
var utils = require("../../../util/utils");
var $ = utils.getLocaleString;
var vnetShowUtil = require("./vnetShowUtil");
var VNetUtil = require("../../../util/vnet.util");
var Nsg = require("./nsg");
var RouteTable = require("./routeTable");

function Subnet(cli, networkResourceProviderClient) {
  this.networkResourceProviderClient = networkResourceProviderClient;
  this.nsgCrud = new Nsg(cli, networkResourceProviderClient);
  this.vnetUtil = new VNetUtil();
  this.output = cli.output;
  this.interaction = cli.interaction;
  this.routeTableCrud = new RouteTable(cli, networkResourceProviderClient);};


__.extend(Subnet.prototype, {
  create: function create__1(resourceGroupName, vnetName, name, options, _) { var self, subnet, subnetProfile, progress, __this = this; var __frame = { name: "create__1", line: 35 }; return __func(_, this, arguments, create__1, 4, __frame, function __$create__1() { self = __this;

      return self.get(resourceGroupName, vnetName, name, __cb(_, __frame, 2, 22, function ___(__0, __1) { subnet = __1;

        if (subnet) {
          return _(new Error(util.format($("A subnet with name \"%s\" already exists in the resource group \"%s\""), name, resourceGroupName))); } ;


        return self._parseSubnet(resourceGroupName, vnetName, options, true, __cb(_, __frame, 8, 29, function ___(__0, __2) { subnetProfile = __2;
          progress = self.interaction.progress(util.format($("Creating subnet \"%s\""), name)); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$create__1() {


                return self.networkResourceProviderClient.subnets.createOrUpdate(resourceGroupName, vnetName, name, subnetProfile, __cb(_, __frame, 12, 49, function __$create__1() { _(null, null, true); }, true)); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$create__1() {

                  progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$create__1() {

              return self.show(resourceGroupName, vnetName, name, options, __cb(_, __frame, 16, 9, function __$create__1() { _(); }, true)); }); }); }, true)); }, true)); }); },


  set: function set__2(resourceGroupName, vnetName, name, options, _) { var self, subnet, subnetProfile, progress, __this = this; var __frame = { name: "set__2", line: 54 }; return __func(_, this, arguments, set__2, 4, __frame, function __$set__2() { self = __this;

      return self.get(resourceGroupName, vnetName, name, __cb(_, __frame, 2, 22, function ___(__0, __1) { subnet = __1;

        if (!subnet) {
          return _(new Error(util.format($("A subnet with name \"%s\" not found in the resource group \"%s\""), name, resourceGroupName))); } ;


        return self._parseSubnet(resourceGroupName, vnetName, options, false, __cb(_, __frame, 8, 29, function ___(__0, __2) { subnetProfile = __2;

          if (options.addressPrefix) {
            subnet.addressPrefix = subnetProfile.addressPrefix; } ;


          if ((options.networkSecurityGroupId || options.networkSecurityGroupName)) {
            subnet.networkSecurityGroup = subnetProfile.networkSecurityGroup; } ;


          if ((options.routeTableId || options.routeTableName)) {
            subnet.routeTable = subnetProfile.routeTable; } ;


          progress = self.interaction.progress(util.format($("Setting subnet \"%s\""), name)); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$set__2() {

                return self.networkResourceProviderClient.subnets.createOrUpdate(resourceGroupName, vnetName, name, subnet, __cb(_, __frame, 24, 49, function __$set__2() { _(null, null, true); }, true)); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$set__2() {

                  progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$set__2() {

              return self.show(resourceGroupName, vnetName, name, options, __cb(_, __frame, 28, 9, function __$set__2() { _(); }, true)); }); }); }, true)); }, true)); }); },


  list: function list__3(resourceGroupName, vnetName, options, _) { var self, progress, subnets, __this = this; var __frame = { name: "list__3", line: 85 }; return __func(_, this, arguments, list__3, 3, __frame, function __$list__3() { self = __this;

      progress = self.interaction.progress($("Getting virtual network subnets "));

      subnets = null; return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$list__3() {

            return self.networkResourceProviderClient.subnets.list(resourceGroupName, vnetName, __cb(_, __frame, 6, 59, function ___(__0, __1) { subnets = __1; _(null, null, true); }, true)); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$list__3() {

              progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$list__3() {


          self.interaction.formatOutput(subnets.subnets, function(outputData) {
            if ((outputData.length === 0)) {
              self.output.warn($("No subnets found")); }
             else {
              self.output.table(outputData, function(row, subnet) {
                row.cell($("Name"), subnet.name);
                row.cell($("Address prefix"), subnet.addressPrefix); }); } ; }); _(); }); }); }); },





  show: function show__4(resourceGroupName, vnetName, name, options, _) { var self, subnet, __this = this; var __frame = { name: "show__4", line: 108 }; return __func(_, this, arguments, show__4, 4, __frame, function __$show__4() { self = __this;

      return self.get(resourceGroupName, vnetName, name, __cb(_, __frame, 2, 22, function ___(__0, __1) { subnet = __1;

        self.interaction.formatOutput(subnet, function(subnet) {
          if ((subnet === null)) {
            self.output.warn(util.format($("A subnet with name \"%s\" not found in the resource group \"%s\""), name, resourceGroupName)); }
           else {
            vnetShowUtil.showSubnet(subnet, self.output); } ; }); _(); }, true)); }); },




  get: function get__5(resourceGroupName, vnetName, subnetName, _) { var self, progress, subnet, __this = this; var __frame = { name: "get__5", line: 121 }; return __func(_, this, arguments, get__5, 3, __frame, function __$get__5() { self = __this;

      progress = self.interaction.progress(util.format($("Looking up the subnet \"%s\""), subnetName)); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$get__5() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$get__5() {

                  return self.networkResourceProviderClient.subnets.get(resourceGroupName, vnetName, subnetName, __cb(_, __frame, 4, 62, function ___(__0, __1) { subnet = __1;
                    return _(null, subnet.subnet); }, true)); }); })(function ___(e, __result) { __catch(function __$get__5() { if (e) {

                    if ((e.statusCode === 404)) {
                      return _(null, null); } ;

                    return _(e); } else { _(null, __result); } ; }, _); }); })(function ___() { __tryCatch(_, function __$get__5() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$get__5() {

              progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$get__5() { _(); }); }); }); },



  delete: function delete__6(resourceGroupName, vnetName, name, options, _) { var self, subnet, progress, __this = this; var __frame = { name: "delete__6", line: 137 }; return __func(_, this, arguments, delete__6, 4, __frame, function __$delete__6() { self = __this;

      return self.get(resourceGroupName, vnetName, name, __cb(_, __frame, 2, 22, function ___(__0, __2) { subnet = __2;

        if (!subnet) {
          return _(new Error(util.format($("A subnet with name \"%s\" not found in the resource group \"%s\""), name, resourceGroupName))); } ; return (function __$delete__6(_) {


          var __1 = !options.quiet; if (!__1) { return _(null, __1); } ; return self.interaction.confirm(util.format($("Delete subnet \"%s\"? [y/n] "), name), __cb(_, __frame, 8, 44, function ___(__0, __3) { var __2 = !__3; return _(null, __2); }, true)); })(__cb(_, __frame, -136, 17, function ___(__0, __3) { return (function __$delete__6(__then) { if (__3) { return _(null); } else { __then(); } ; })(function __$delete__6() {



            progress = self.interaction.progress(util.format($("Deleting subnet \"%s\""), name)); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$delete__6() {

                  return self.networkResourceProviderClient.subnets.deleteMethod(resourceGroupName, vnetName, name, __cb(_, __frame, 14, 49, function __$delete__6() { _(null, null, true); }, true)); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$delete__6() {

                    progress.end(); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$delete__6() { _(); }); }); }); }, true)); }, true)); }); },



  _parseSubnet: function _parseSubnet__7(resourceGroupName, vnetName, options, useDefaultSubnetCidr, _) { var self, vnet, addressSpace, vnetAddressPrefix, parameters, nsg, routeTable, __this = this; var __frame = { name: "_parseSubnet__7", line: 157 }; return __func(_, this, arguments, _parseSubnet__7, 4, __frame, function __$_parseSubnet__7() { self = __this;


      return self.networkResourceProviderClient.virtualNetworks.get(resourceGroupName, vnetName, __cb(_, __frame, 3, 66, function ___(__0, __1) { vnet = __1;
        if (!vnet) {
          return _(new Error(util.format($("Virtual network \"%s\" not found in resource group \"%s\""), vnetName, resourceGroupName))); } ;



        if (options.addressPrefix) {
          self._validateAddressPrefix(options.addressPrefix);
          addressSpace = options.addressPrefix; } ;


        if ((!addressSpace && useDefaultSubnetCidr)) {
          vnetAddressPrefix = vnet.virtualNetwork.addressSpace.addressPrefixes[0];
          if (!vnetAddressPrefix) {
            return _(new Error(util.format($("Virtual network \"%s\" does not contain any address prefix"), vnetName))); } ;

          addressSpace = vnetAddressPrefix.split("/")[0];
          addressSpace = ((addressSpace + "/") + self.vnetUtil.getDefaultSubnetCIDRFromAddressSpaceCIDR(parseInt(vnetAddressPrefix.split("/")[1])));

          self.output.warn(util.format($("using default address space %s"), addressSpace)); } ;


        parameters = {
          addressPrefix: addressSpace }; return (function __$_parseSubnet__7(__then) {


          if (options.networkSecurityGroupId) {
            if (options.networkSecurityGroupName) {
              self.output.warn($("--network-security-group-name parameter will be ignored because --network-security-group-id and --network-security-group-name parameters are mutually exclusive")); } ;

            if (((options.networkSecurityGroupId !== true) && (options.networkSecurityGroupId !== "''"))) {
              parameters.networkSecurityGroup = {
                id: options.networkSecurityGroupId }; } ; __then(); } else { return (function __$_parseSubnet__7(__then) {


              if (options.networkSecurityGroupName) {
                if (utils.stringIsNullOrEmpty(options.networkSecurityGroupName)) {
                  return _(new Error($("A network security group name must not be null or empty string"))); } ;


                return self.nsgCrud.get(resourceGroupName, options.networkSecurityGroupName, __cb(_, __frame, 43, 29, function ___(__0, __2) { nsg = __2;
                  if (!nsg) {
                    return _(new Error(util.format($("A network security group with name \"%s\" not found in the resource group \"%s\""), options.networkSecurityGroupName, resourceGroupName))); } ;



                  parameters.networkSecurityGroup = {
                    id: nsg.id }; __then(); }, true)); } else { __then(); } ; })(__then); } ; })(function __$_parseSubnet__7() { return (function __$_parseSubnet__7(__then) {



            if (options.routeTableId) {
              if (options.routeTableName) {
                output.warn($("--route-table-name parameter will be ignored because --route-table-id and --route-table-name parameters are mutually exclusive")); } ;

              if (((options.routeTableId !== true) && (options.routeTableId !== "''"))) {
                parameters.routeTable = {
                  id: options.routeTableId }; } ; __then(); } else { return (function __$_parseSubnet__7(__then) {


                if (options.routeTableName) {
                  if (utils.stringIsNullOrEmpty(options.routeTableName)) {
                    return _(new Error($("A route table name must not be null or empty string"))); } ;


                  return self.routeTableCrud.get(resourceGroupName, options.routeTableName, __cb(_, __frame, 68, 43, function ___(__0, __3) { routeTable = __3;
                    if (!routeTable) {
                      return _(new Error(util.format($("A route table with name \"%s\" not found in the resource group \"%s\""), options.routeTableName, resourceGroupName))); } ;



                    parameters.routeTable = {
                      id: routeTable.id }; __then(); }, true)); } else { __then(); } ; })(__then); } ; })(function __$_parseSubnet__7() {



            return _(null, parameters); }); }); }, true)); }); },


  _validateAddressPrefix: function(addressPrefix) {
    var self = this;

    if (utils.stringIsNullOrEmpty(addressPrefix)) {
      throw new Error($("address prefix parameter must not be null or empty string")); } ;


    var ipValidationResult = self.vnetUtil.parseIPv4Cidr(addressPrefix);
    if (ipValidationResult.error) {
      throw new Error($(ipValidationResult.error)); } ;

    if ((ipValidationResult.cidr === null)) {
      throw new Error($("The --address-prefix must be in cidr format (---.---.---.---/cidr)")); } ; }});




module.exports = Subnet;
